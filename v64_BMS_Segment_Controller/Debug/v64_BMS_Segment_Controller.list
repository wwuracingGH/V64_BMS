
v64_BMS_Segment_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c40  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d38  08002d38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d38  08002d38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d38  08002d38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000000c  08002d4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08002d4c  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e412  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002049  00000000  00000000  0002e446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00030490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  000312f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159b2  00000000  00000000  00032058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff79  00000000  00000000  00047a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c48a  00000000  00000000  00057983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3e0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003448  00000000  00000000  000e3e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002ce0 	.word	0x08002ce0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002ce0 	.word	0x08002ce0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MaxInit>:

/*
 * Private function definitions
 */

void MaxInit(SPI_HandleTypeDef hspi, ADC_HandleTypeDef hadc, TIM_HandleTypeDef htim) {
 8000218:	b084      	sub	sp, #16
 800021a:	b5b0      	push	{r4, r5, r7, lr}
 800021c:	af00      	add	r7, sp, #0
 800021e:	2510      	movs	r5, #16
 8000220:	197c      	adds	r4, r7, r5
 8000222:	6020      	str	r0, [r4, #0]
 8000224:	6061      	str	r1, [r4, #4]
 8000226:	60a2      	str	r2, [r4, #8]
 8000228:	60e3      	str	r3, [r4, #12]
	maxspi = hspi;
 800022a:	4a11      	ldr	r2, [pc, #68]	; (8000270 <MaxInit+0x58>)
 800022c:	002c      	movs	r4, r5
 800022e:	193b      	adds	r3, r7, r4
 8000230:	0010      	movs	r0, r2
 8000232:	0019      	movs	r1, r3
 8000234:	2364      	movs	r3, #100	; 0x64
 8000236:	001a      	movs	r2, r3
 8000238:	f002 fd40 	bl	8002cbc <memcpy>
	maxadc = hadc;
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <MaxInit+0x5c>)
 800023e:	2364      	movs	r3, #100	; 0x64
 8000240:	191b      	adds	r3, r3, r4
 8000242:	19db      	adds	r3, r3, r7
 8000244:	0010      	movs	r0, r2
 8000246:	0019      	movs	r1, r3
 8000248:	2364      	movs	r3, #100	; 0x64
 800024a:	001a      	movs	r2, r3
 800024c:	f002 fd36 	bl	8002cbc <memcpy>
	maxtim = htim;
 8000250:	4a09      	ldr	r2, [pc, #36]	; (8000278 <MaxInit+0x60>)
 8000252:	23c8      	movs	r3, #200	; 0xc8
 8000254:	191b      	adds	r3, r3, r4
 8000256:	19db      	adds	r3, r3, r7
 8000258:	0010      	movs	r0, r2
 800025a:	0019      	movs	r1, r3
 800025c:	234c      	movs	r3, #76	; 0x4c
 800025e:	001a      	movs	r2, r3
 8000260:	f002 fd2c 	bl	8002cbc <memcpy>
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	bcb0      	pop	{r4, r5, r7}
 800026a:	bc08      	pop	{r3}
 800026c:	b004      	add	sp, #16
 800026e:	4718      	bx	r3
 8000270:	20000028 	.word	0x20000028
 8000274:	2000008c 	.word	0x2000008c
 8000278:	200000f0 	.word	0x200000f0

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b0c3      	sub	sp, #268	; 0x10c
 8000280:	af42      	add	r7, sp, #264	; 0x108
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000282:	f000 fbc9 	bl	8000a18 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000286:	f000 f833 	bl	80002f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028a:	f000 f9b1 	bl	80005f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800028e:	f000 f877 	bl	8000380 <MX_ADC1_Init>
  MX_TIM14_Init();
 8000292:	f000 f957 	bl	8000544 <MX_TIM14_Init>
  MX_SPI1_Init();
 8000296:	f000 f8dd 	bl	8000454 <MX_SPI1_Init>
  MX_SPI2_Init();
 800029a:	f000 f919 	bl	80004d0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MaxInit(hspi1,hadc1,htim14);
 800029e:	4c11      	ldr	r4, [pc, #68]	; (80002e4 <main+0x68>)
 80002a0:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <main+0x6c>)
 80002a2:	23b8      	movs	r3, #184	; 0xb8
 80002a4:	446b      	add	r3, sp
 80002a6:	0018      	movs	r0, r3
 80002a8:	0011      	movs	r1, r2
 80002aa:	234c      	movs	r3, #76	; 0x4c
 80002ac:	001a      	movs	r2, r3
 80002ae:	f002 fd05 	bl	8002cbc <memcpy>
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <main+0x70>)
 80002b4:	2354      	movs	r3, #84	; 0x54
 80002b6:	446b      	add	r3, sp
 80002b8:	0018      	movs	r0, r3
 80002ba:	0011      	movs	r1, r2
 80002bc:	2364      	movs	r3, #100	; 0x64
 80002be:	001a      	movs	r2, r3
 80002c0:	f002 fcfc 	bl	8002cbc <memcpy>
 80002c4:	466b      	mov	r3, sp
 80002c6:	0018      	movs	r0, r3
 80002c8:	0023      	movs	r3, r4
 80002ca:	3310      	adds	r3, #16
 80002cc:	2254      	movs	r2, #84	; 0x54
 80002ce:	0019      	movs	r1, r3
 80002d0:	f002 fcf4 	bl	8002cbc <memcpy>
 80002d4:	6820      	ldr	r0, [r4, #0]
 80002d6:	6861      	ldr	r1, [r4, #4]
 80002d8:	68a2      	ldr	r2, [r4, #8]
 80002da:	68e3      	ldr	r3, [r4, #12]
 80002dc:	f7ff ff9c 	bl	8000218 <MaxInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
 80002e0:	e7fe      	b.n	80002e0 <main+0x64>
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	200001a0 	.word	0x200001a0
 80002e8:	20000268 	.word	0x20000268
 80002ec:	2000013c 	.word	0x2000013c

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b093      	sub	sp, #76	; 0x4c
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	2414      	movs	r4, #20
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2334      	movs	r3, #52	; 0x34
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fce4 	bl	8002cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	0018      	movs	r0, r3
 800030a:	2310      	movs	r3, #16
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f002 fcdd 	bl	8002cce <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fab7 	bl	800188c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031e:	193b      	adds	r3, r7, r4
 8000320:	2202      	movs	r2, #2
 8000322:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	193b      	adds	r3, r7, r4
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	0052      	lsls	r2, r2, #1
 800032a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800032c:	193b      	adds	r3, r7, r4
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2240      	movs	r2, #64	; 0x40
 8000336:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	193b      	adds	r3, r7, r4
 8000340:	0018      	movs	r0, r3
 8000342:	f001 fae3 	bl	800190c <HAL_RCC_OscConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800034a:	f000 f995 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2207      	movs	r2, #7
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2100      	movs	r1, #0
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fdde 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000374:	f000 f980 	bl	8000678 <Error_Handler>
  }
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b013      	add	sp, #76	; 0x4c
 800037e:	bd90      	pop	{r4, r7, pc}

08000380 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	0018      	movs	r0, r3
 800038a:	230c      	movs	r3, #12
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f002 fc9d 	bl	8002cce <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000394:	4b2d      	ldr	r3, [pc, #180]	; (800044c <MX_ADC1_Init+0xcc>)
 8000396:	4a2e      	ldr	r2, [pc, #184]	; (8000450 <MX_ADC1_Init+0xd0>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800039a:	4b2c      	ldr	r3, [pc, #176]	; (800044c <MX_ADC1_Init+0xcc>)
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	0612      	lsls	r2, r2, #24
 80003a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003a2:	4b2a      	ldr	r3, [pc, #168]	; (800044c <MX_ADC1_Init+0xcc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a8:	4b28      	ldr	r3, [pc, #160]	; (800044c <MX_ADC1_Init+0xcc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ae:	4b27      	ldr	r3, [pc, #156]	; (800044c <MX_ADC1_Init+0xcc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_ADC1_Init+0xcc>)
 80003b6:	2204      	movs	r2, #4
 80003b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ba:	4b24      	ldr	r3, [pc, #144]	; (800044c <MX_ADC1_Init+0xcc>)
 80003bc:	2200      	movs	r2, #0
 80003be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003c0:	4b22      	ldr	r3, [pc, #136]	; (800044c <MX_ADC1_Init+0xcc>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c6:	4b21      	ldr	r3, [pc, #132]	; (800044c <MX_ADC1_Init+0xcc>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003cc:	4b1f      	ldr	r3, [pc, #124]	; (800044c <MX_ADC1_Init+0xcc>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d2:	4b1e      	ldr	r3, [pc, #120]	; (800044c <MX_ADC1_Init+0xcc>)
 80003d4:	2220      	movs	r2, #32
 80003d6:	2100      	movs	r1, #0
 80003d8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <MX_ADC1_Init+0xcc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_ADC1_Init+0xcc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003e6:	4b19      	ldr	r3, [pc, #100]	; (800044c <MX_ADC1_Init+0xcc>)
 80003e8:	222c      	movs	r2, #44	; 0x2c
 80003ea:	2100      	movs	r1, #0
 80003ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_ADC1_Init+0xcc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_ADC1_Init+0xcc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_ADC1_Init+0xcc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_ADC1_Init+0xcc>)
 8000402:	223c      	movs	r2, #60	; 0x3c
 8000404:	2100      	movs	r1, #0
 8000406:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000408:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_ADC1_Init+0xcc>)
 800040a:	2200      	movs	r2, #0
 800040c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_ADC1_Init+0xcc>)
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fc85 	bl	8000d20 <HAL_ADC_Init>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800041a:	f000 f92d 	bl	8000678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2201      	movs	r2, #1
 8000422:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000430:	1d3a      	adds	r2, r7, #4
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_ADC1_Init+0xcc>)
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fe1a 	bl	8001070 <HAL_ADC_ConfigChannel>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000440:	f000 f91a 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b004      	add	sp, #16
 800044a:	bd80      	pop	{r7, pc}
 800044c:	2000013c 	.word	0x2000013c
 8000450:	40012400 	.word	0x40012400

08000454 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_SPI1_Init+0x74>)
 800045a:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <MX_SPI1_Init+0x78>)
 800045c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000460:	2282      	movs	r2, #130	; 0x82
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000466:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <MX_SPI1_Init+0x74>)
 800046e:	22e0      	movs	r2, #224	; 0xe0
 8000470:	00d2      	lsls	r2, r2, #3
 8000472:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_SPI1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_SPI1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_SPI1_Init+0x74>)
 80004a2:	2207      	movs	r2, #7
 80004a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_SPI1_Init+0x74>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <MX_SPI1_Init+0x74>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 ffe9 	bl	800248c <HAL_SPI_Init>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004be:	f000 f8db 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200001a0 	.word	0x200001a0
 80004cc:	40013000 	.word	0x40013000

080004d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004d4:	4b19      	ldr	r3, [pc, #100]	; (800053c <MX_SPI2_Init+0x6c>)
 80004d6:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <MX_SPI2_Init+0x70>)
 80004d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80004da:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_SPI2_Init+0x6c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <MX_SPI2_Init+0x6c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_SPI2_Init+0x6c>)
 80004e8:	22e0      	movs	r2, #224	; 0xe0
 80004ea:	00d2      	lsls	r2, r2, #3
 80004ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_SPI2_Init+0x6c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_SPI2_Init+0x6c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_SPI2_Init+0x6c>)
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_SPI2_Init+0x6c>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_SPI2_Init+0x6c>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_SPI2_Init+0x6c>)
 8000510:	2200      	movs	r2, #0
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_SPI2_Init+0x6c>)
 8000516:	2207      	movs	r2, #7
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_SPI2_Init+0x6c>)
 800051c:	2200      	movs	r2, #0
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_SPI2_Init+0x6c>)
 8000522:	2200      	movs	r2, #0
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <MX_SPI2_Init+0x6c>)
 8000528:	0018      	movs	r0, r3
 800052a:	f001 ffaf 	bl	800248c <HAL_SPI_Init>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000532:	f000 f8a1 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000204 	.word	0x20000204
 8000540:	40003800 	.word	0x40003800

08000544 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	2310      	movs	r3, #16
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f002 fbbb 	bl	8002cce <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <MX_TIM14_Init+0xa0>)
 800055a:	4a23      	ldr	r2, [pc, #140]	; (80005e8 <MX_TIM14_Init+0xa4>)
 800055c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 800055e:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <MX_TIM14_Init+0xa0>)
 8000560:	220f      	movs	r2, #15
 8000562:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <MX_TIM14_Init+0xa0>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800056a:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_TIM14_Init+0xa0>)
 800056c:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <MX_TIM14_Init+0xa8>)
 800056e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <MX_TIM14_Init+0xa0>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_TIM14_Init+0xa0>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <MX_TIM14_Init+0xa0>)
 800057e:	0018      	movs	r0, r3
 8000580:	f002 f83c 	bl	80025fc <HAL_TIM_Base_Init>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000588:	f000 f876 	bl	8000678 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_TIM14_Init+0xa0>)
 800058e:	0018      	movs	r0, r3
 8000590:	f002 f88c 	bl	80026ac <HAL_TIM_IC_Init>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000598:	f000 f86e 	bl	8000678 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2201      	movs	r2, #1
 80005a6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80005ae:	003b      	movs	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005b4:	0039      	movs	r1, r7
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_TIM14_Init+0xa0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 f8d6 	bl	800276c <HAL_TIM_IC_ConfigChannel>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80005c4:	f000 f858 	bl	8000678 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim14, TIM_TIM14_TI1_MCO, TIM_CHANNEL_1) != HAL_OK)
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_TIM14_Init+0xa0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	2103      	movs	r1, #3
 80005ce:	0018      	movs	r0, r3
 80005d0:	f002 faf6 	bl	8002bc0 <HAL_TIMEx_TISelection>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM14_Init+0x98>
  {
    Error_Handler();
 80005d8:	f000 f84e 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b004      	add	sp, #16
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000268 	.word	0x20000268
 80005e8:	40002000 	.word	0x40002000
 80005ec:	0000ffff 	.word	0x0000ffff

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	240c      	movs	r4, #12
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0018      	movs	r0, r3
 80005fc:	2314      	movs	r3, #20
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f002 fb64 	bl	8002cce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_GPIO_Init+0x84>)
 8000608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_GPIO_Init+0x84>)
 800060c:	2102      	movs	r1, #2
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_GPIO_Init+0x84>)
 8000614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000616:	2202      	movs	r2, #2
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_GPIO_Init+0x84>)
 8000620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_GPIO_Init+0x84>)
 8000624:	2101      	movs	r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_GPIO_Init+0x84>)
 800062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062e:	2201      	movs	r2, #1
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000636:	23a0      	movs	r3, #160	; 0xa0
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	2200      	movs	r2, #0
 800063c:	21ae      	movs	r1, #174	; 0xae
 800063e:	0018      	movs	r0, r3
 8000640:	f001 f906 	bl	8001850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000644:	0021      	movs	r1, r4
 8000646:	187b      	adds	r3, r7, r1
 8000648:	22ae      	movs	r2, #174	; 0xae
 800064a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2201      	movs	r2, #1
 8000650:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	187a      	adds	r2, r7, r1
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 ff8e 	bl	8001588 <HAL_GPIO_Init>

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b009      	add	sp, #36	; 0x24
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x44>)
 800068c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_MspInit+0x44>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x44>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x44>)
 80006a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_MspInit+0x44>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0549      	lsls	r1, r1, #21
 80006ac:	430a      	orrs	r2, r1
 80006ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_MspInit+0x44>)
 80006b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	055b      	lsls	r3, r3, #21
 80006b8:	4013      	ands	r3, r2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b091      	sub	sp, #68	; 0x44
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	232c      	movs	r3, #44	; 0x2c
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	0018      	movs	r0, r3
 80006da:	2314      	movs	r3, #20
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f002 faf5 	bl	8002cce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e4:	2414      	movs	r4, #20
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	2318      	movs	r3, #24
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f002 faed 	bl	8002cce <memset>
  if(hadc->Instance==ADC1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <HAL_ADC_MspInit+0xb0>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d139      	bne.n	8000772 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	01d2      	lsls	r2, r2, #7
 8000704:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800070c:	193b      	adds	r3, r7, r4
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fd96 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000718:	f7ff ffae 	bl	8000678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_ADC_MspInit+0xb4>)
 800071e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_ADC_MspInit+0xb4>)
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	0349      	lsls	r1, r1, #13
 8000726:	430a      	orrs	r2, r1
 8000728:	641a      	str	r2, [r3, #64]	; 0x40
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_ADC_MspInit+0xb4>)
 800072c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	035b      	lsls	r3, r3, #13
 8000732:	4013      	ands	r3, r2
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_ADC_MspInit+0xb4>)
 800073a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <HAL_ADC_MspInit+0xb4>)
 800073e:	2101      	movs	r1, #1
 8000740:	430a      	orrs	r2, r1
 8000742:	635a      	str	r2, [r3, #52]	; 0x34
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_ADC_MspInit+0xb4>)
 8000746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000748:	2201      	movs	r2, #1
 800074a:	4013      	ands	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8000750:	212c      	movs	r1, #44	; 0x2c
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2241      	movs	r2, #65	; 0x41
 8000756:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2203      	movs	r2, #3
 800075c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	187a      	adds	r2, r7, r1
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f000 ff0b 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b011      	add	sp, #68	; 0x44
 8000778:	bd90      	pop	{r4, r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40012400 	.word	0x40012400
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b08f      	sub	sp, #60	; 0x3c
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	2424      	movs	r4, #36	; 0x24
 800078e:	193b      	adds	r3, r7, r4
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 fa99 	bl	8002cce <memset>
  if(hspi->Instance==SPI1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a66      	ldr	r2, [pc, #408]	; (800093c <HAL_SPI_MspInit+0x1b8>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d153      	bne.n	800084e <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a6:	4b66      	ldr	r3, [pc, #408]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007aa:	4b65      	ldr	r3, [pc, #404]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0149      	lsls	r1, r1, #5
 80007b0:	430a      	orrs	r2, r1
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
 80007b4:	4b62      	ldr	r3, [pc, #392]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	015b      	lsls	r3, r3, #5
 80007bc:	4013      	ands	r3, r2
 80007be:	623b      	str	r3, [r7, #32]
 80007c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b5f      	ldr	r3, [pc, #380]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b5e      	ldr	r3, [pc, #376]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b5c      	ldr	r3, [pc, #368]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b59      	ldr	r3, [pc, #356]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b58      	ldr	r3, [pc, #352]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007e0:	2102      	movs	r1, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b56      	ldr	r3, [pc, #344]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2202      	movs	r2, #2
 80007ec:	4013      	ands	r3, r2
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	22c0      	movs	r2, #192	; 0xc0
 80007f6:	0152      	lsls	r2, r2, #5
 80007f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2202      	movs	r2, #2
 80007fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	193a      	adds	r2, r7, r4
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f000 feb4 	bl	8001588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000820:	0021      	movs	r1, r4
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2208      	movs	r2, #8
 8000826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2202      	movs	r2, #2
 800082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	187b      	adds	r3, r7, r1
 8000842:	4a40      	ldr	r2, [pc, #256]	; (8000944 <HAL_SPI_MspInit+0x1c0>)
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	f000 fe9e 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800084c:	e071      	b.n	8000932 <HAL_SPI_MspInit+0x1ae>
  else if(hspi->Instance==SPI2)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a3d      	ldr	r2, [pc, #244]	; (8000948 <HAL_SPI_MspInit+0x1c4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d16c      	bne.n	8000932 <HAL_SPI_MspInit+0x1ae>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000858:	4b39      	ldr	r3, [pc, #228]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 800085a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800085c:	4b38      	ldr	r3, [pc, #224]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	01c9      	lsls	r1, r1, #7
 8000862:	430a      	orrs	r2, r1
 8000864:	63da      	str	r2, [r3, #60]	; 0x3c
 8000866:	4b36      	ldr	r3, [pc, #216]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 8000868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	01db      	lsls	r3, r3, #7
 800086e:	4013      	ands	r3, r2
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b32      	ldr	r3, [pc, #200]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 8000876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 800087a:	2102      	movs	r1, #2
 800087c:	430a      	orrs	r2, r1
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
 8000880:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 8000882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000884:	2202      	movs	r2, #2
 8000886:	4013      	ands	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 800088e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 8000892:	2101      	movs	r1, #1
 8000894:	430a      	orrs	r2, r1
 8000896:	635a      	str	r2, [r3, #52]	; 0x34
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <HAL_SPI_MspInit+0x1bc>)
 800089a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089c:	2201      	movs	r2, #1
 800089e:	4013      	ands	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_2;
 80008a4:	2124      	movs	r1, #36	; 0x24
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2282      	movs	r2, #130	; 0x82
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	000c      	movs	r4, r1
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2202      	movs	r2, #2
 80008b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2201      	movs	r2, #1
 80008c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <HAL_SPI_MspInit+0x1c0>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f000 fe5a 	bl	8001588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008d4:	0021      	movs	r1, r4
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	0092      	lsls	r2, r2, #2
 80008dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	000c      	movs	r4, r1
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2202      	movs	r2, #2
 80008e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2205      	movs	r2, #5
 80008f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <HAL_SPI_MspInit+0x1c0>)
 80008fc:	0019      	movs	r1, r3
 80008fe:	0010      	movs	r0, r2
 8000900:	f000 fe42 	bl	8001588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000904:	0021      	movs	r1, r4
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2210      	movs	r2, #16
 800090a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2202      	movs	r2, #2
 8000910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2201      	movs	r2, #1
 8000922:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	187a      	adds	r2, r7, r1
 8000926:	23a0      	movs	r3, #160	; 0xa0
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	0011      	movs	r1, r2
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fe2b 	bl	8001588 <HAL_GPIO_Init>
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b00f      	add	sp, #60	; 0x3c
 8000938:	bd90      	pop	{r4, r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40013000 	.word	0x40013000
 8000940:	40021000 	.word	0x40021000
 8000944:	50000400 	.word	0x50000400
 8000948:	40003800 	.word	0x40003800

0800094c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_TIM_Base_MspInit+0x38>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10d      	bne.n	800097a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_TIM_Base_MspInit+0x3c>)
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_TIM_Base_MspInit+0x3c>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0209      	lsls	r1, r1, #8
 8000968:	430a      	orrs	r2, r1
 800096a:	641a      	str	r2, [r3, #64]	; 0x40
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_TIM_Base_MspInit+0x3c>)
 800096e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40002000 	.word	0x40002000
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f89c 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c8:	f7ff fff7 	bl	80009ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	; (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f2:	f002 f93f 	bl	8002c74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009f6:	f7ff fc41 	bl	800027c <main>

080009fa <LoopForever>:

LoopForever:
  b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   r0, =_estack
 80009fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a08:	08002d40 	.word	0x08002d40
  ldr r2, =_sbss
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a10:	200002b8 	.word	0x200002b8

08000a14 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_Init+0x3c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_Init+0x3c>)
 8000a2a:	2180      	movs	r1, #128	; 0x80
 8000a2c:	0049      	lsls	r1, r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f810 	bl	8000a58 <HAL_InitTick>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e001      	b.n	8000a48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fe1e 	bl	8000684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	230f      	movs	r3, #15
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_InitTick+0x88>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d02b      	beq.n	8000ac8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_InitTick+0x8c>)
 8000a72:	681c      	ldr	r4, [r3, #0]
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_InitTick+0x88>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0019      	movs	r1, r3
 8000a7a:	23fa      	movs	r3, #250	; 0xfa
 8000a7c:	0098      	lsls	r0, r3, #2
 8000a7e:	f7ff fb3f 	bl	8000100 <__udivsi3>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	0020      	movs	r0, r4
 8000a88:	f7ff fb3a 	bl	8000100 <__udivsi3>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fd6d 	bl	800156e <HAL_SYSTICK_Config>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d112      	bne.n	8000abe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d80a      	bhi.n	8000ab4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fd4c 	bl	8001544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_InitTick+0x90>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e00d      	b.n	8000ad0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e008      	b.n	8000ad0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abe:	230f      	movs	r3, #15
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e003      	b.n	8000ad0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b005      	add	sp, #20
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	001a      	movs	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	18d2      	adds	r2, r2, r3
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_IncTick+0x20>)
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200002b4 	.word	0x200002b4

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	200002b4 	.word	0x200002b4

08000b24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000b34:	401a      	ands	r2, r3
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	fe3fffff 	.word	0xfe3fffff

08000b4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	23e0      	movs	r3, #224	; 0xe0
 8000b5a:	045b      	lsls	r3, r3, #17
 8000b5c:	4013      	ands	r3, r2
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	2104      	movs	r1, #4
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	2107      	movs	r1, #7
 8000b7e:	4091      	lsls	r1, r2
 8000b80:	000a      	movs	r2, r1
 8000b82:	43d2      	mvns	r2, r2
 8000b84:	401a      	ands	r2, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2104      	movs	r1, #4
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	4099      	lsls	r1, r3
 8000b90:	000b      	movs	r3, r1
 8000b92:	431a      	orrs	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b004      	add	sp, #16
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	2107      	movs	r1, #7
 8000bb6:	4091      	lsls	r1, r2
 8000bb8:	000a      	movs	r2, r1
 8000bba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000bc2:	40da      	lsrs	r2, r3
 8000bc4:	0013      	movs	r3, r2
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	211f      	movs	r1, #31
 8000be2:	400a      	ands	r2, r1
 8000be4:	210f      	movs	r1, #15
 8000be6:	4091      	lsls	r1, r2
 8000be8:	000a      	movs	r2, r1
 8000bea:	43d2      	mvns	r2, r2
 8000bec:	401a      	ands	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0e9b      	lsrs	r3, r3, #26
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	4019      	ands	r1, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	201f      	movs	r0, #31
 8000bfa:	4003      	ands	r3, r0
 8000bfc:	4099      	lsls	r1, r3
 8000bfe:	000b      	movs	r3, r1
 8000c00:	431a      	orrs	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	035b      	lsls	r3, r3, #13
 8000c20:	0b5b      	lsrs	r3, r3, #13
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	0352      	lsls	r2, r2, #13
 8000c42:	0b52      	lsrs	r2, r2, #13
 8000c44:	43d2      	mvns	r2, r2
 8000c46:	401a      	ands	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	0212      	lsls	r2, r2, #8
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	400b      	ands	r3, r1
 8000c74:	4904      	ldr	r1, [pc, #16]	; (8000c88 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000c76:	400b      	ands	r3, r1
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	07ffff00 	.word	0x07ffff00

08000c8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	0552      	lsls	r2, r2, #21
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	6fffffe8 	.word	0x6fffffe8

08000cb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	055b      	lsls	r3, r3, #21
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	055b      	lsls	r3, r3, #21
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d101      	bne.n	8000cd2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <LL_ADC_IsEnabled+0x18>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <LL_ADC_IsEnabled+0x1a>
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d101      	bne.n	8000d16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d28:	231f      	movs	r3, #31
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e17f      	b.n	8001046 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10a      	bne.n	8000d64 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fcbb 	bl	80006cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2254      	movs	r2, #84	; 0x54
 8000d60:	2100      	movs	r1, #0
 8000d62:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff ffa3 	bl	8000cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d115      	bne.n	8000d9e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff ff88 	bl	8000c8c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d7c:	4bb4      	ldr	r3, [pc, #720]	; (8001050 <HAL_ADC_Init+0x330>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	49b4      	ldr	r1, [pc, #720]	; (8001054 <HAL_ADC_Init+0x334>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff f9bc 	bl	8000100 <__udivsi3>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d90:	e002      	b.n	8000d98 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f9      	bne.n	8000d92 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff ff86 	bl	8000cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d10f      	bne.n	8000dcc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db0:	2210      	movs	r2, #16
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000dc4:	231f      	movs	r3, #31
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ff94 	bl	8000cfe <LL_ADC_REG_IsConversionOngoing>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	2210      	movs	r2, #16
 8000de0:	4013      	ands	r3, r2
 8000de2:	d000      	beq.n	8000de6 <HAL_ADC_Init+0xc6>
 8000de4:	e122      	b.n	800102c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d000      	beq.n	8000dee <HAL_ADC_Init+0xce>
 8000dec:	e11e      	b.n	800102c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	4a99      	ldr	r2, [pc, #612]	; (8001058 <HAL_ADC_Init+0x338>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	2202      	movs	r2, #2
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff ff6a 	bl	8000cdc <LL_ADC_IsEnabled>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d000      	beq.n	8000e0e <HAL_ADC_Init+0xee>
 8000e0c:	e0ad      	b.n	8000f6a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7e1b      	ldrb	r3, [r3, #24]
 8000e16:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e18:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7e5b      	ldrb	r3, [r3, #25]
 8000e1e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e20:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7e9b      	ldrb	r3, [r3, #26]
 8000e26:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e28:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <HAL_ADC_Init+0x118>
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	015b      	lsls	r3, r3, #5
 8000e36:	e000      	b.n	8000e3a <HAL_ADC_Init+0x11a>
 8000e38:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e3a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e40:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da04      	bge.n	8000e54 <HAL_ADC_Init+0x134>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	085b      	lsrs	r3, r3, #1
 8000e52:	e001      	b.n	8000e58 <HAL_ADC_Init+0x138>
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000e58:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	212c      	movs	r1, #44	; 0x2c
 8000e5e:	5c5b      	ldrb	r3, [r3, r1]
 8000e60:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e62:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	5c9b      	ldrb	r3, [r3, r2]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d115      	bne.n	8000ea0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7e9b      	ldrb	r3, [r3, #26]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	0252      	lsls	r2, r2, #9
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	e00b      	b.n	8000ea0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e98:	2201      	movs	r2, #1
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00a      	beq.n	8000ebe <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eac:	23e0      	movs	r3, #224	; 0xe0
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a65      	ldr	r2, [pc, #404]	; (800105c <HAL_ADC_Init+0x33c>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	0019      	movs	r1, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	0f9b      	lsrs	r3, r3, #30
 8000eda:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	223c      	movs	r2, #60	; 0x3c
 8000eec:	5c9b      	ldrb	r3, [r3, r2]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d111      	bne.n	8000f16 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	0f9b      	lsrs	r3, r3, #30
 8000ef8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000efe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f04:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f0a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	2201      	movs	r2, #1
 8000f12:	4313      	orrs	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	4a50      	ldr	r2, [pc, #320]	; (8001060 <HAL_ADC_Init+0x340>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	0019      	movs	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	23c0      	movs	r3, #192	; 0xc0
 8000f32:	061b      	lsls	r3, r3, #24
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d018      	beq.n	8000f6a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d012      	beq.n	8000f6a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	061b      	lsls	r3, r3, #24
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d00c      	beq.n	8000f6a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000f50:	4b44      	ldr	r3, [pc, #272]	; (8001064 <HAL_ADC_Init+0x344>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <HAL_ADC_Init+0x348>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	0019      	movs	r1, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	23f0      	movs	r3, #240	; 0xf0
 8000f60:	039b      	lsls	r3, r3, #14
 8000f62:	401a      	ands	r2, r3
 8000f64:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <HAL_ADC_Init+0x344>)
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f72:	001a      	movs	r2, r3
 8000f74:	2100      	movs	r1, #0
 8000f76:	f7ff fdf6 	bl	8000b66 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	493a      	ldr	r1, [pc, #232]	; (800106c <HAL_ADC_Init+0x34c>)
 8000f84:	001a      	movs	r2, r3
 8000f86:	f7ff fdee 	bl	8000b66 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d109      	bne.n	8000fa6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	4249      	negs	r1, r1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8000fa4:	e018      	b.n	8000fd8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	039b      	lsls	r3, r3, #14
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d112      	bne.n	8000fd8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	221c      	movs	r2, #28
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	4252      	negs	r2, r2
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0011      	movs	r1, r2
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2100      	movs	r1, #0
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff fdde 	bl	8000ba0 <LL_ADC_GetSamplingTimeCommonChannels>
 8000fe4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d10b      	bne.n	8001006 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4393      	bics	r3, r2
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001004:	e01c      	b.n	8001040 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	2212      	movs	r2, #18
 800100c:	4393      	bics	r3, r2
 800100e:	2210      	movs	r2, #16
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101a:	2201      	movs	r2, #1
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001022:	231f      	movs	r3, #31
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800102a:	e009      	b.n	8001040 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001030:	2210      	movs	r2, #16
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001038:	231f      	movs	r3, #31
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001040:	231f      	movs	r3, #31
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
}
 8001046:	0018      	movs	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	b008      	add	sp, #32
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000000 	.word	0x20000000
 8001054:	00030d40 	.word	0x00030d40
 8001058:	fffffefd 	.word	0xfffffefd
 800105c:	fffe0201 	.word	0xfffe0201
 8001060:	1ffffc02 	.word	0x1ffffc02
 8001064:	40012708 	.word	0x40012708
 8001068:	ffc3ffff 	.word	0xffc3ffff
 800106c:	07ffff04 	.word	0x07ffff04

08001070 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107a:	2317      	movs	r3, #23
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2254      	movs	r2, #84	; 0x54
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x24>
 8001090:	2302      	movs	r3, #2
 8001092:	e1c0      	b.n	8001416 <HAL_ADC_ConfigChannel+0x3a6>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2254      	movs	r2, #84	; 0x54
 8001098:	2101      	movs	r1, #1
 800109a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fe2c 	bl	8000cfe <LL_ADC_REG_IsConversionOngoing>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d000      	beq.n	80010ac <HAL_ADC_ConfigChannel+0x3c>
 80010aa:	e1a3      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d100      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x46>
 80010b4:	e143      	b.n	800133e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	429a      	cmp	r2, r3
 80010c0:	d004      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010c6:	4ac1      	ldr	r2, [pc, #772]	; (80013cc <HAL_ADC_ConfigChannel+0x35c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d108      	bne.n	80010de <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0019      	movs	r1, r3
 80010d6:	0010      	movs	r0, r2
 80010d8:	f7ff fd99 	bl	8000c0e <LL_ADC_REG_SetSequencerChAdd>
 80010dc:	e0c9      	b.n	8001272 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	211f      	movs	r1, #31
 80010e8:	400b      	ands	r3, r1
 80010ea:	210f      	movs	r1, #15
 80010ec:	4099      	lsls	r1, r3
 80010ee:	000b      	movs	r3, r1
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4013      	ands	r3, r2
 80010f4:	0019      	movs	r1, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	035b      	lsls	r3, r3, #13
 80010fc:	0b5b      	lsrs	r3, r3, #13
 80010fe:	d105      	bne.n	800110c <HAL_ADC_ConfigChannel+0x9c>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0e9b      	lsrs	r3, r3, #26
 8001106:	221f      	movs	r2, #31
 8001108:	4013      	ands	r3, r2
 800110a:	e098      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2201      	movs	r2, #1
 8001112:	4013      	ands	r3, r2
 8001114:	d000      	beq.n	8001118 <HAL_ADC_ConfigChannel+0xa8>
 8001116:	e091      	b.n	800123c <HAL_ADC_ConfigChannel+0x1cc>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d000      	beq.n	8001124 <HAL_ADC_ConfigChannel+0xb4>
 8001122:	e089      	b.n	8001238 <HAL_ADC_ConfigChannel+0x1c8>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	4013      	ands	r3, r2
 800112c:	d000      	beq.n	8001130 <HAL_ADC_ConfigChannel+0xc0>
 800112e:	e081      	b.n	8001234 <HAL_ADC_ConfigChannel+0x1c4>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2208      	movs	r2, #8
 8001136:	4013      	ands	r3, r2
 8001138:	d000      	beq.n	800113c <HAL_ADC_ConfigChannel+0xcc>
 800113a:	e079      	b.n	8001230 <HAL_ADC_ConfigChannel+0x1c0>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2210      	movs	r2, #16
 8001142:	4013      	ands	r3, r2
 8001144:	d000      	beq.n	8001148 <HAL_ADC_ConfigChannel+0xd8>
 8001146:	e071      	b.n	800122c <HAL_ADC_ConfigChannel+0x1bc>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2220      	movs	r2, #32
 800114e:	4013      	ands	r3, r2
 8001150:	d000      	beq.n	8001154 <HAL_ADC_ConfigChannel+0xe4>
 8001152:	e069      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1b8>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2240      	movs	r2, #64	; 0x40
 800115a:	4013      	ands	r3, r2
 800115c:	d000      	beq.n	8001160 <HAL_ADC_ConfigChannel+0xf0>
 800115e:	e061      	b.n	8001224 <HAL_ADC_ConfigChannel+0x1b4>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	4013      	ands	r3, r2
 8001168:	d000      	beq.n	800116c <HAL_ADC_ConfigChannel+0xfc>
 800116a:	e059      	b.n	8001220 <HAL_ADC_ConfigChannel+0x1b0>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4013      	ands	r3, r2
 8001176:	d151      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1ac>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4013      	ands	r3, r2
 8001182:	d149      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1a8>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4013      	ands	r3, r2
 800118e:	d141      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1a4>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4013      	ands	r3, r2
 800119a:	d139      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1a0>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	015b      	lsls	r3, r3, #5
 80011a4:	4013      	ands	r3, r2
 80011a6:	d131      	bne.n	800120c <HAL_ADC_ConfigChannel+0x19c>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	019b      	lsls	r3, r3, #6
 80011b0:	4013      	ands	r3, r2
 80011b2:	d129      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x198>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	01db      	lsls	r3, r3, #7
 80011bc:	4013      	ands	r3, r2
 80011be:	d121      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x194>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	4013      	ands	r3, r2
 80011ca:	d119      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x190>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	025b      	lsls	r3, r3, #9
 80011d4:	4013      	ands	r3, r2
 80011d6:	d111      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x18c>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	029b      	lsls	r3, r3, #10
 80011e0:	4013      	ands	r3, r2
 80011e2:	d109      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x188>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	02db      	lsls	r3, r3, #11
 80011ec:	4013      	ands	r3, r2
 80011ee:	d001      	beq.n	80011f4 <HAL_ADC_ConfigChannel+0x184>
 80011f0:	2312      	movs	r3, #18
 80011f2:	e024      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 80011f4:	2300      	movs	r3, #0
 80011f6:	e022      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 80011f8:	2311      	movs	r3, #17
 80011fa:	e020      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 80011fc:	2310      	movs	r3, #16
 80011fe:	e01e      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001200:	230f      	movs	r3, #15
 8001202:	e01c      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001204:	230e      	movs	r3, #14
 8001206:	e01a      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001208:	230d      	movs	r3, #13
 800120a:	e018      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 800120c:	230c      	movs	r3, #12
 800120e:	e016      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001210:	230b      	movs	r3, #11
 8001212:	e014      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001214:	230a      	movs	r3, #10
 8001216:	e012      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001218:	2309      	movs	r3, #9
 800121a:	e010      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 800121c:	2308      	movs	r3, #8
 800121e:	e00e      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001220:	2307      	movs	r3, #7
 8001222:	e00c      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001224:	2306      	movs	r3, #6
 8001226:	e00a      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001228:	2305      	movs	r3, #5
 800122a:	e008      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 800122c:	2304      	movs	r3, #4
 800122e:	e006      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001230:	2303      	movs	r3, #3
 8001232:	e004      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001234:	2302      	movs	r3, #2
 8001236:	e002      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ce>
 800123c:	2300      	movs	r3, #0
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	6852      	ldr	r2, [r2, #4]
 8001242:	201f      	movs	r0, #31
 8001244:	4002      	ands	r2, r0
 8001246:	4093      	lsls	r3, r2
 8001248:	000a      	movs	r2, r1
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	429a      	cmp	r2, r3
 800125e:	d808      	bhi.n	8001272 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	001a      	movs	r2, r3
 800126e:	f7ff fcae 	bl	8000bce <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	001a      	movs	r2, r3
 8001280:	f7ff fce8 	bl	8000c54 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db00      	blt.n	800128e <HAL_ADC_ConfigChannel+0x21e>
 800128c:	e0bc      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fc5b 	bl	8000b4c <LL_ADC_GetCommonPathInternalCh>
 8001296:	0003      	movs	r3, r0
 8001298:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_ADC_ConfigChannel+0x364>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d122      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012ac:	d11d      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	0412      	lsls	r2, r2, #16
 80012b4:	4313      	orrs	r3, r2
 80012b6:	4a46      	ldr	r2, [pc, #280]	; (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 80012b8:	0019      	movs	r1, r3
 80012ba:	0010      	movs	r0, r2
 80012bc:	f7ff fc32 	bl	8000b24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <HAL_ADC_ConfigChannel+0x368>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4945      	ldr	r1, [pc, #276]	; (80013dc <HAL_ADC_ConfigChannel+0x36c>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7fe ff1a 	bl	8000100 <__udivsi3>
 80012cc:	0003      	movs	r3, r0
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	0013      	movs	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	189b      	adds	r3, r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012da:	e002      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3b01      	subs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f9      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012e8:	e08e      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <HAL_ADC_ConfigChannel+0x370>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d10e      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	045b      	lsls	r3, r3, #17
 80012fa:	4013      	ands	r3, r2
 80012fc:	d109      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	0452      	lsls	r2, r2, #17
 8001304:	4313      	orrs	r3, r2
 8001306:	4a32      	ldr	r2, [pc, #200]	; (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 8001308:	0019      	movs	r1, r3
 800130a:	0010      	movs	r0, r2
 800130c:	f7ff fc0a 	bl	8000b24 <LL_ADC_SetCommonPathInternalCh>
 8001310:	e07a      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a33      	ldr	r2, [pc, #204]	; (80013e4 <HAL_ADC_ConfigChannel+0x374>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d000      	beq.n	800131e <HAL_ADC_ConfigChannel+0x2ae>
 800131c:	e074      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	03db      	lsls	r3, r3, #15
 8001324:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001326:	d000      	beq.n	800132a <HAL_ADC_ConfigChannel+0x2ba>
 8001328:	e06e      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	03d2      	lsls	r2, r2, #15
 8001330:	4313      	orrs	r3, r2
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 8001334:	0019      	movs	r1, r3
 8001336:	0010      	movs	r0, r2
 8001338:	f7ff fbf4 	bl	8000b24 <LL_ADC_SetCommonPathInternalCh>
 800133c:	e064      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	429a      	cmp	r2, r3
 8001348:	d004      	beq.n	8001354 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <HAL_ADC_ConfigChannel+0x35c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d107      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0019      	movs	r1, r3
 800135e:	0010      	movs	r0, r2
 8001360:	f7ff fc66 	bl	8000c30 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	da4d      	bge.n	8001408 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 800136e:	0018      	movs	r0, r3
 8001370:	f7ff fbec 	bl	8000b4c <LL_ADC_GetCommonPathInternalCh>
 8001374:	0003      	movs	r3, r0
 8001376:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <HAL_ADC_ConfigChannel+0x364>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d108      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <HAL_ADC_ConfigChannel+0x378>)
 8001386:	4013      	ands	r3, r2
 8001388:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 800138a:	0019      	movs	r1, r3
 800138c:	0010      	movs	r0, r2
 800138e:	f7ff fbc9 	bl	8000b24 <LL_ADC_SetCommonPathInternalCh>
 8001392:	e039      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <HAL_ADC_ConfigChannel+0x370>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d108      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_ADC_ConfigChannel+0x37c>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 80013a6:	0019      	movs	r1, r3
 80013a8:	0010      	movs	r0, r2
 80013aa:	f7ff fbbb 	bl	8000b24 <LL_ADC_SetCommonPathInternalCh>
 80013ae:	e02b      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_ADC_ConfigChannel+0x374>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d126      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <HAL_ADC_ConfigChannel+0x380>)
 80013be:	4013      	ands	r3, r2
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 80013c2:	0019      	movs	r1, r3
 80013c4:	0010      	movs	r0, r2
 80013c6:	f7ff fbad 	bl	8000b24 <LL_ADC_SetCommonPathInternalCh>
 80013ca:	e01d      	b.n	8001408 <HAL_ADC_ConfigChannel+0x398>
 80013cc:	80000004 	.word	0x80000004
 80013d0:	40012708 	.word	0x40012708
 80013d4:	b0001000 	.word	0xb0001000
 80013d8:	20000000 	.word	0x20000000
 80013dc:	00030d40 	.word	0x00030d40
 80013e0:	b8004000 	.word	0xb8004000
 80013e4:	b4002000 	.word	0xb4002000
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	feffffff 	.word	0xfeffffff
 80013f0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	2220      	movs	r2, #32
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001400:	2317      	movs	r3, #23
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2254      	movs	r2, #84	; 0x54
 800140c:	2100      	movs	r1, #0
 800140e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001410:	2317      	movs	r3, #23
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	781b      	ldrb	r3, [r3, #0]
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b006      	add	sp, #24
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	0002      	movs	r2, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b7f      	cmp	r3, #127	; 0x7f
 8001434:	d828      	bhi.n	8001488 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001436:	4a2f      	ldr	r2, [pc, #188]	; (80014f4 <__NVIC_SetPriority+0xd4>)
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	33c0      	adds	r3, #192	; 0xc0
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	589b      	ldr	r3, [r3, r2]
 8001446:	1dfa      	adds	r2, r7, #7
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	0011      	movs	r1, r2
 800144c:	2203      	movs	r2, #3
 800144e:	400a      	ands	r2, r1
 8001450:	00d2      	lsls	r2, r2, #3
 8001452:	21ff      	movs	r1, #255	; 0xff
 8001454:	4091      	lsls	r1, r2
 8001456:	000a      	movs	r2, r1
 8001458:	43d2      	mvns	r2, r2
 800145a:	401a      	ands	r2, r3
 800145c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	22ff      	movs	r2, #255	; 0xff
 8001464:	401a      	ands	r2, r3
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	0018      	movs	r0, r3
 800146c:	2303      	movs	r3, #3
 800146e:	4003      	ands	r3, r0
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001474:	481f      	ldr	r0, [pc, #124]	; (80014f4 <__NVIC_SetPriority+0xd4>)
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	430a      	orrs	r2, r1
 8001480:	33c0      	adds	r3, #192	; 0xc0
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001486:	e031      	b.n	80014ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <__NVIC_SetPriority+0xd8>)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	0019      	movs	r1, r3
 8001490:	230f      	movs	r3, #15
 8001492:	400b      	ands	r3, r1
 8001494:	3b08      	subs	r3, #8
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3306      	adds	r3, #6
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	18d3      	adds	r3, r2, r3
 800149e:	3304      	adds	r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1dfa      	adds	r2, r7, #7
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	0011      	movs	r1, r2
 80014a8:	2203      	movs	r2, #3
 80014aa:	400a      	ands	r2, r1
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	21ff      	movs	r1, #255	; 0xff
 80014b0:	4091      	lsls	r1, r2
 80014b2:	000a      	movs	r2, r1
 80014b4:	43d2      	mvns	r2, r2
 80014b6:	401a      	ands	r2, r3
 80014b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	22ff      	movs	r2, #255	; 0xff
 80014c0:	401a      	ands	r2, r3
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	2303      	movs	r3, #3
 80014ca:	4003      	ands	r3, r0
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <__NVIC_SetPriority+0xd8>)
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	001c      	movs	r4, r3
 80014d8:	230f      	movs	r3, #15
 80014da:	4023      	ands	r3, r4
 80014dc:	3b08      	subs	r3, #8
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	430a      	orrs	r2, r1
 80014e2:	3306      	adds	r3, #6
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	18c3      	adds	r3, r0, r3
 80014e8:	3304      	adds	r3, #4
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b003      	add	sp, #12
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	1e5a      	subs	r2, r3, #1
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	045b      	lsls	r3, r3, #17
 800150c:	429a      	cmp	r2, r3
 800150e:	d301      	bcc.n	8001514 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001510:	2301      	movs	r3, #1
 8001512:	e010      	b.n	8001536 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <SysTick_Config+0x44>)
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	3a01      	subs	r2, #1
 800151a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151c:	2301      	movs	r3, #1
 800151e:	425b      	negs	r3, r3
 8001520:	2103      	movs	r1, #3
 8001522:	0018      	movs	r0, r3
 8001524:	f7ff ff7c 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x44>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x44>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	210f      	movs	r1, #15
 8001550:	187b      	adds	r3, r7, r1
 8001552:	1c02      	adds	r2, r0, #0
 8001554:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	187b      	adds	r3, r7, r1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25b      	sxtb	r3, r3
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ffbf 	bl	80014fc <SysTick_Config>
 800157e:	0003      	movs	r3, r0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	e147      	b.n	8001828 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2101      	movs	r1, #1
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4091      	lsls	r1, r2
 80015a2:	000a      	movs	r2, r1
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d100      	bne.n	80015b0 <HAL_GPIO_Init+0x28>
 80015ae:	e138      	b.n	8001822 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d005      	beq.n	80015c8 <HAL_GPIO_Init+0x40>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2203      	movs	r2, #3
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d130      	bne.n	800162a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	409a      	lsls	r2, r3
 80015d6:	0013      	movs	r3, r2
 80015d8:	43da      	mvns	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	409a      	lsls	r2, r3
 80015ea:	0013      	movs	r3, r2
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015fe:	2201      	movs	r2, #1
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	43da      	mvns	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	2201      	movs	r2, #1
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2203      	movs	r2, #3
 8001630:	4013      	ands	r3, r2
 8001632:	2b03      	cmp	r3, #3
 8001634:	d017      	beq.n	8001666 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	43da      	mvns	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	4013      	ands	r3, r2
 800166e:	2b02      	cmp	r3, #2
 8001670:	d123      	bne.n	80016ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	58d3      	ldr	r3, [r2, r3]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2207      	movs	r2, #7
 8001684:	4013      	ands	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	409a      	lsls	r2, r3
 800168c:	0013      	movs	r3, r2
 800168e:	43da      	mvns	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2107      	movs	r1, #7
 800169e:	400b      	ands	r3, r1
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	409a      	lsls	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	08da      	lsrs	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3208      	adds	r2, #8
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	6939      	ldr	r1, [r7, #16]
 80016b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2203      	movs	r2, #3
 80016d8:	401a      	ands	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	23c0      	movs	r3, #192	; 0xc0
 80016f4:	029b      	lsls	r3, r3, #10
 80016f6:	4013      	ands	r3, r2
 80016f8:	d100      	bne.n	80016fc <HAL_GPIO_Init+0x174>
 80016fa:	e092      	b.n	8001822 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3318      	adds	r3, #24
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	589b      	ldr	r3, [r3, r2]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2203      	movs	r2, #3
 800170e:	4013      	ands	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	220f      	movs	r2, #15
 8001714:	409a      	lsls	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	43da      	mvns	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	23a0      	movs	r3, #160	; 0xa0
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	429a      	cmp	r2, r3
 8001728:	d013      	beq.n	8001752 <HAL_GPIO_Init+0x1ca>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a45      	ldr	r2, [pc, #276]	; (8001844 <HAL_GPIO_Init+0x2bc>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00d      	beq.n	800174e <HAL_GPIO_Init+0x1c6>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_GPIO_Init+0x2c0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d007      	beq.n	800174a <HAL_GPIO_Init+0x1c2>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_GPIO_Init+0x2c4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_GPIO_Init+0x1be>
 8001742:	2303      	movs	r3, #3
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x1cc>
 8001746:	2305      	movs	r3, #5
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x1cc>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x1cc>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x1cc>
 8001752:	2300      	movs	r3, #0
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	2103      	movs	r1, #3
 8001758:	400a      	ands	r2, r1
 800175a:	00d2      	lsls	r2, r2, #3
 800175c:	4093      	lsls	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001764:	4936      	ldr	r1, [pc, #216]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3318      	adds	r3, #24
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	035b      	lsls	r3, r3, #13
 800178a:	4013      	ands	r3, r2
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43da      	mvns	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	039b      	lsls	r3, r3, #14
 80017b4:	4013      	ands	r3, r2
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017c6:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 80017c8:	2384      	movs	r3, #132	; 0x84
 80017ca:	58d3      	ldr	r3, [r2, r3]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4013      	ands	r3, r2
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ec:	4914      	ldr	r1, [pc, #80]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 80017ee:	2284      	movs	r2, #132	; 0x84
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	58d3      	ldr	r3, [r2, r3]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43da      	mvns	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4013      	ands	r3, r2
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800181a:	4909      	ldr	r1, [pc, #36]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	40da      	lsrs	r2, r3
 8001830:	1e13      	subs	r3, r2, #0
 8001832:	d000      	beq.n	8001836 <HAL_GPIO_Init+0x2ae>
 8001834:	e6b0      	b.n	8001598 <HAL_GPIO_Init+0x10>
  }
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b006      	add	sp, #24
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021800 	.word	0x40021800
 8001844:	50000400 	.word	0x50000400
 8001848:	50000800 	.word	0x50000800
 800184c:	50000c00 	.word	0x50000c00

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	0008      	movs	r0, r1
 800185a:	0011      	movs	r1, r2
 800185c:	1cbb      	adds	r3, r7, #2
 800185e:	1c02      	adds	r2, r0, #0
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	1c7b      	adds	r3, r7, #1
 8001864:	1c0a      	adds	r2, r1, #0
 8001866:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001868:	1c7b      	adds	r3, r7, #1
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001870:	1cbb      	adds	r3, r7, #2
 8001872:	881a      	ldrh	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187a:	1cbb      	adds	r3, r7, #2
 800187c:	881a      	ldrh	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d11f      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	0013      	movs	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	189b      	adds	r3, r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4912      	ldr	r1, [pc, #72]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f7fe fc1e 	bl	8000100 <__udivsi3>
 80018c4:	0003      	movs	r3, r0
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ca:	e008      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e001      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e009      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	401a      	ands	r2, r3
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d0ed      	beq.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	40007000 	.word	0x40007000
 8001900:	fffff9ff 	.word	0xfffff9ff
 8001904:	20000000 	.word	0x20000000
 8001908:	000f4240 	.word	0x000f4240

0800190c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e2f3      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x1e>
 8001928:	e07c      	b.n	8001a24 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192a:	4bc3      	ldr	r3, [pc, #780]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2238      	movs	r2, #56	; 0x38
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001934:	4bc0      	ldr	r3, [pc, #768]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2203      	movs	r2, #3
 800193a:	4013      	ands	r3, r2
 800193c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b10      	cmp	r3, #16
 8001942:	d102      	bne.n	800194a <HAL_RCC_OscConfig+0x3e>
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d002      	beq.n	8001950 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4bb9      	ldr	r3, [pc, #740]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	029b      	lsls	r3, r3, #10
 8001958:	4013      	ands	r3, r2
 800195a:	d062      	beq.n	8001a22 <HAL_RCC_OscConfig+0x116>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d15e      	bne.n	8001a22 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e2ce      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	025b      	lsls	r3, r3, #9
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x78>
 8001974:	4bb0      	ldr	r3, [pc, #704]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4baf      	ldr	r3, [pc, #700]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	0249      	lsls	r1, r1, #9
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e020      	b.n	80019c6 <HAL_RCC_OscConfig+0xba>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	23a0      	movs	r3, #160	; 0xa0
 800198a:	02db      	lsls	r3, r3, #11
 800198c:	429a      	cmp	r2, r3
 800198e:	d10e      	bne.n	80019ae <HAL_RCC_OscConfig+0xa2>
 8001990:	4ba9      	ldr	r3, [pc, #676]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4ba8      	ldr	r3, [pc, #672]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	02c9      	lsls	r1, r1, #11
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4ba6      	ldr	r3, [pc, #664]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4ba5      	ldr	r3, [pc, #660]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0249      	lsls	r1, r1, #9
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e00b      	b.n	80019c6 <HAL_RCC_OscConfig+0xba>
 80019ae:	4ba2      	ldr	r3, [pc, #648]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4ba1      	ldr	r3, [pc, #644]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	49a1      	ldr	r1, [pc, #644]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	4b9f      	ldr	r3, [pc, #636]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b9e      	ldr	r3, [pc, #632]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	499f      	ldr	r1, [pc, #636]	; (8001c40 <HAL_RCC_OscConfig+0x334>)
 80019c2:	400a      	ands	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d014      	beq.n	80019f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f89f 	bl	8000b10 <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff f89a 	bl	8000b10 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e28d      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	4b93      	ldr	r3, [pc, #588]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0xcc>
 80019f6:	e015      	b.n	8001a24 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f88a 	bl	8000b10 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a02:	f7ff f885 	bl	8000b10 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b64      	cmp	r3, #100	; 0x64
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e278      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a14:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	029b      	lsls	r3, r3, #10
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0xf6>
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d100      	bne.n	8001a30 <HAL_RCC_OscConfig+0x124>
 8001a2e:	e099      	b.n	8001b64 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a30:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2238      	movs	r2, #56	; 0x38
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3a:	4b7f      	ldr	r3, [pc, #508]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	4013      	ands	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d102      	bne.n	8001a50 <HAL_RCC_OscConfig+0x144>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d002      	beq.n	8001a56 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d135      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a56:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x162>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e24b      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b72      	ldr	r3, [pc, #456]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a74      	ldr	r2, [pc, #464]	; (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	021a      	lsls	r2, r3, #8
 8001a7e:	4b6e      	ldr	r3, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a8a:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6e      	ldr	r2, [pc, #440]	; (8001c48 <HAL_RCC_OscConfig+0x33c>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a9e:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	0adb      	lsrs	r3, r3, #11
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	4a68      	ldr	r2, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x340>)
 8001aaa:	40da      	lsrs	r2, r3
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x344>)
 8001aae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x348>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe ffcf 	bl	8000a58 <HAL_InitTick>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d051      	beq.n	8001b62 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e221      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d030      	beq.n	8001b2c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aca:	4b5b      	ldr	r3, [pc, #364]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a5e      	ldr	r2, [pc, #376]	; (8001c48 <HAL_RCC_OscConfig+0x33c>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0049      	lsls	r1, r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f810 	bl	8000b10 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff f80b 	bl	8000b10 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1fe      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b48      	ldr	r3, [pc, #288]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	021a      	lsls	r2, r3, #8
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	e01b      	b.n	8001b64 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	4949      	ldr	r1, [pc, #292]	; (8001c58 <HAL_RCC_OscConfig+0x34c>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7fe ffea 	bl	8000b10 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7fe ffe5 	bl	8000b10 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1d8      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x236>
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2208      	movs	r2, #8
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d047      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b18      	cmp	r3, #24
 8001b78:	d10a      	bne.n	8001b90 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d03c      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d138      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e1ba      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d019      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ffb4 	bl	8000b10 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7fe ffaf 	bl	8000b10 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1a2      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d0f1      	beq.n	8001bae <HAL_RCC_OscConfig+0x2a2>
 8001bca:	e018      	b.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7fe ff9a 	bl	8000b10 <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be2:	f7fe ff95 	bl	8000b10 <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e188      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f1      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	d100      	bne.n	8001c0a <HAL_RCC_OscConfig+0x2fe>
 8001c08:	e0c6      	b.n	8001d98 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	231f      	movs	r3, #31
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2238      	movs	r2, #56	; 0x38
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d11e      	bne.n	8001c5c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d100      	bne.n	8001c2a <HAL_RCC_OscConfig+0x31e>
 8001c28:	e0b6      	b.n	8001d98 <HAL_RCC_OscConfig+0x48c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d000      	beq.n	8001c34 <HAL_RCC_OscConfig+0x328>
 8001c32:	e0b1      	b.n	8001d98 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e166      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	fffeffff 	.word	0xfffeffff
 8001c40:	fffbffff 	.word	0xfffbffff
 8001c44:	ffff80ff 	.word	0xffff80ff
 8001c48:	ffffc7ff 	.word	0xffffc7ff
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004
 8001c58:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c5c:	4bac      	ldr	r3, [pc, #688]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	055b      	lsls	r3, r3, #21
 8001c64:	4013      	ands	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x360>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x362>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d011      	beq.n	8001c96 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4ba7      	ldr	r3, [pc, #668]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c76:	4ba6      	ldr	r3, [pc, #664]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	0549      	lsls	r1, r1, #21
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c80:	4ba3      	ldr	r3, [pc, #652]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	055b      	lsls	r3, r3, #21
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c8e:	231f      	movs	r3, #31
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c96:	4b9f      	ldr	r3, [pc, #636]	; (8001f14 <HAL_RCC_OscConfig+0x608>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d11a      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca2:	4b9c      	ldr	r3, [pc, #624]	; (8001f14 <HAL_RCC_OscConfig+0x608>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b9b      	ldr	r3, [pc, #620]	; (8001f14 <HAL_RCC_OscConfig+0x608>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0049      	lsls	r1, r1, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe ff2e 	bl	8000b10 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cba:	f7fe ff29 	bl	8000b10 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e11c      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ccc:	4b91      	ldr	r3, [pc, #580]	; (8001f14 <HAL_RCC_OscConfig+0x608>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x3e2>
 8001ce0:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001ce2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce4:	4b8a      	ldr	r3, [pc, #552]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x404>
 8001cf6:	4b86      	ldr	r3, [pc, #536]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001cf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfa:	4b85      	ldr	r3, [pc, #532]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d02:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d06:	4b82      	ldr	r3, [pc, #520]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
 8001d10:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d14:	4b7e      	ldr	r3, [pc, #504]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	438a      	bics	r2, r1
 8001d1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d1c:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d20:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d22:	2104      	movs	r1, #4
 8001d24:	438a      	bics	r2, r1
 8001d26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d014      	beq.n	8001d5a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe feee 	bl	8000b10 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7fe fee9 	bl	8000b10 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4a74      	ldr	r2, [pc, #464]	; (8001f18 <HAL_RCC_OscConfig+0x60c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0db      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4e:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2202      	movs	r2, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x42e>
 8001d58:	e013      	b.n	8001d82 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fed9 	bl	8000b10 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d62:	e009      	b.n	8001d78 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7fe fed4 	bl	8000b10 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	4a6a      	ldr	r2, [pc, #424]	; (8001f18 <HAL_RCC_OscConfig+0x60c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0c6      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d78:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d82:	231f      	movs	r3, #31
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b60      	ldr	r3, [pc, #384]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d90:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001d92:	4962      	ldr	r1, [pc, #392]	; (8001f1c <HAL_RCC_OscConfig+0x610>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d100      	bne.n	8001da2 <HAL_RCC_OscConfig+0x496>
 8001da0:	e0b0      	b.n	8001f04 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2238      	movs	r2, #56	; 0x38
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d100      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4a4>
 8001dae:	e078      	b.n	8001ea2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d153      	bne.n	8001e60 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001dbe:	4958      	ldr	r1, [pc, #352]	; (8001f20 <HAL_RCC_OscConfig+0x614>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fea4 	bl	8000b10 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7fe fe9f 	bl	8000b10 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e092      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	049b      	lsls	r3, r3, #18
 8001de8:	4013      	ands	r3, r2
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1a      	ldr	r2, [r3, #32]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	431a      	orrs	r2, r3
 8001e14:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	0449      	lsls	r1, r1, #17
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e28:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	0549      	lsls	r1, r1, #21
 8001e32:	430a      	orrs	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7fe fe6b 	bl	8000b10 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fe66 	bl	8000b10 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e059      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	049b      	lsls	r3, r3, #18
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x534>
 8001e5e:	e051      	b.n	8001f04 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e66:	492e      	ldr	r1, [pc, #184]	; (8001f20 <HAL_RCC_OscConfig+0x614>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fe50 	bl	8000b10 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe fe4b 	bl	8000b10 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e03e      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	049b      	lsls	r3, r3, #18
 8001e90:	4013      	ands	r3, r2
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001e9a:	4923      	ldr	r1, [pc, #140]	; (8001f28 <HAL_RCC_OscConfig+0x61c>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	e030      	b.n	8001f04 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e02b      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_RCC_OscConfig+0x604>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	401a      	ands	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d11e      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2270      	movs	r2, #112	; 0x70
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d117      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	23fe      	movs	r3, #254	; 0xfe
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d10e      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	23f8      	movs	r3, #248	; 0xf8
 8001ee6:	039b      	lsls	r3, r3, #14
 8001ee8:	401a      	ands	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	0f5b      	lsrs	r3, r3, #29
 8001ef6:	075a      	lsls	r2, r3, #29
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b008      	add	sp, #32
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
 8001f18:	00001388 	.word	0x00001388
 8001f1c:	efffffff 	.word	0xefffffff
 8001f20:	feffffff 	.word	0xfeffffff
 8001f24:	1fc1808c 	.word	0x1fc1808c
 8001f28:	effefffc 	.word	0xeffefffc

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0e9      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b76      	ldr	r3, [pc, #472]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2207      	movs	r2, #7
 8001f46:	4013      	ands	r3, r2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d91e      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b73      	ldr	r3, [pc, #460]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2207      	movs	r2, #7
 8001f54:	4393      	bics	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	4b70      	ldr	r3, [pc, #448]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f60:	f7fe fdd6 	bl	8000b10 <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f68:	e009      	b.n	8001f7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6a:	f7fe fdd1 	bl	8000b10 <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	4a6a      	ldr	r2, [pc, #424]	; (8002120 <HAL_RCC_ClockConfig+0x1f4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0ca      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7e:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2207      	movs	r2, #7
 8001f84:	4013      	ands	r3, r2
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1ee      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2202      	movs	r2, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d006      	beq.n	8001fae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fa0:	4b60      	ldr	r3, [pc, #384]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa6:	21e0      	movs	r1, #224	; 0xe0
 8001fa8:	01c9      	lsls	r1, r1, #7
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4a5d      	ldr	r2, [pc, #372]	; (8002128 <HAL_RCC_ClockConfig+0x1fc>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d057      	beq.n	800207c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d12b      	bne.n	8002038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e097      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fec:	4b4d      	ldr	r3, [pc, #308]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	049b      	lsls	r3, r3, #18
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d11f      	bne.n	8002038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e08b      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002004:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4013      	ands	r3, r2
 800200e:	d113      	bne.n	8002038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e07f      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d106      	bne.n	800202a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 800201e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d108      	bne.n	8002038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e074      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	2202      	movs	r2, #2
 8002030:	4013      	ands	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e06d      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2207      	movs	r2, #7
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204c:	f7fe fd60 	bl	8000b10 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002054:	e009      	b.n	800206a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002056:	f7fe fd5b 	bl	8000b10 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <HAL_RCC_ClockConfig+0x1f4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e054      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2238      	movs	r2, #56	; 0x38
 8002070:	401a      	ands	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	429a      	cmp	r2, r3
 800207a:	d1ec      	bne.n	8002056 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2207      	movs	r2, #7
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d21e      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2207      	movs	r2, #7
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800209c:	f7fe fd38 	bl	8000b10 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7fe fd33 	bl	8000b10 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_RCC_ClockConfig+0x1f4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e02c      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2207      	movs	r2, #7
 80020c0:	4013      	ands	r3, r2
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2204      	movs	r2, #4
 80020ce:	4013      	ands	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <HAL_RCC_ClockConfig+0x200>)
 80020d8:	4013      	ands	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020e6:	f000 f829 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020ea:	0001      	movs	r1, r0
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	220f      	movs	r2, #15
 80020f4:	401a      	ands	r2, r3
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x204>)
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	58d3      	ldr	r3, [r2, r3]
 80020fc:	221f      	movs	r2, #31
 80020fe:	4013      	ands	r3, r2
 8002100:	000a      	movs	r2, r1
 8002102:	40da      	lsrs	r2, r3
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x208>)
 8002106:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_ClockConfig+0x20c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0018      	movs	r0, r3
 800210e:	f7fe fca3 	bl	8000a58 <HAL_InitTick>
 8002112:	0003      	movs	r3, r0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b004      	add	sp, #16
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40022000 	.word	0x40022000
 8002120:	00001388 	.word	0x00001388
 8002124:	40021000 	.word	0x40021000
 8002128:	fffff0ff 	.word	0xfffff0ff
 800212c:	ffff8fff 	.word	0xffff8fff
 8002130:	08002cf8 	.word	0x08002cf8
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2238      	movs	r2, #56	; 0x38
 8002148:	4013      	ands	r3, r2
 800214a:	d10f      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0adb      	lsrs	r3, r3, #11
 8002152:	2207      	movs	r2, #7
 8002154:	4013      	ands	r3, r2
 8002156:	2201      	movs	r2, #1
 8002158:	409a      	lsls	r2, r3
 800215a:	0013      	movs	r3, r2
 800215c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	4835      	ldr	r0, [pc, #212]	; (8002238 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002162:	f7fd ffcd 	bl	8000100 <__udivsi3>
 8002166:	0003      	movs	r3, r0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	e05d      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2238      	movs	r2, #56	; 0x38
 8002172:	4013      	ands	r3, r2
 8002174:	2b08      	cmp	r3, #8
 8002176:	d102      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002178:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_GetSysClockFreq+0x100>)
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e054      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2238      	movs	r2, #56	; 0x38
 8002184:	4013      	ands	r3, r2
 8002186:	2b10      	cmp	r3, #16
 8002188:	d138      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2203      	movs	r2, #3
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	2207      	movs	r2, #7
 800219c:	4013      	ands	r3, r2
 800219e:	3301      	adds	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d10d      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	4824      	ldr	r0, [pc, #144]	; (800223c <HAL_RCC_GetSysClockFreq+0x100>)
 80021ac:	f7fd ffa8 	bl	8000100 <__udivsi3>
 80021b0:	0003      	movs	r3, r0
 80021b2:	0019      	movs	r1, r3
 80021b4:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	227f      	movs	r2, #127	; 0x7f
 80021bc:	4013      	ands	r3, r2
 80021be:	434b      	muls	r3, r1
 80021c0:	617b      	str	r3, [r7, #20]
        break;
 80021c2:	e00d      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	481c      	ldr	r0, [pc, #112]	; (8002238 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021c8:	f7fd ff9a 	bl	8000100 <__udivsi3>
 80021cc:	0003      	movs	r3, r0
 80021ce:	0019      	movs	r1, r3
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	227f      	movs	r2, #127	; 0x7f
 80021d8:	4013      	ands	r3, r2
 80021da:	434b      	muls	r3, r1
 80021dc:	617b      	str	r3, [r7, #20]
        break;
 80021de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0f5b      	lsrs	r3, r3, #29
 80021e6:	2207      	movs	r2, #7
 80021e8:	4013      	ands	r3, r2
 80021ea:	3301      	adds	r3, #1
 80021ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f7fd ff85 	bl	8000100 <__udivsi3>
 80021f6:	0003      	movs	r3, r0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	e015      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2238      	movs	r2, #56	; 0x38
 8002202:	4013      	ands	r3, r2
 8002204:	2b20      	cmp	r3, #32
 8002206:	d103      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2238      	movs	r2, #56	; 0x38
 8002216:	4013      	ands	r3, r2
 8002218:	2b18      	cmp	r3, #24
 800221a:	d103      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800221c:	23fa      	movs	r3, #250	; 0xfa
 800221e:	01db      	lsls	r3, r3, #7
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e001      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002228:	693b      	ldr	r3, [r7, #16]
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b006      	add	sp, #24
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	40021000 	.word	0x40021000
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200

08002240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002248:	2313      	movs	r3, #19
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002250:	2312      	movs	r3, #18
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	029b      	lsls	r3, r3, #10
 8002260:	4013      	ands	r3, r2
 8002262:	d100      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002264:	e0a3      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2011      	movs	r0, #17
 8002268:	183b      	adds	r3, r7, r0
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b7f      	ldr	r3, [pc, #508]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	055b      	lsls	r3, r3, #21
 8002276:	4013      	ands	r3, r2
 8002278:	d110      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b7c      	ldr	r3, [pc, #496]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800227c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0549      	lsls	r1, r1, #21
 8002284:	430a      	orrs	r2, r1
 8002286:	63da      	str	r2, [r3, #60]	; 0x3c
 8002288:	4b78      	ldr	r3, [pc, #480]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800228a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	055b      	lsls	r3, r3, #21
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002296:	183b      	adds	r3, r7, r0
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229c:	4b74      	ldr	r3, [pc, #464]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b73      	ldr	r3, [pc, #460]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	0049      	lsls	r1, r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022aa:	f7fe fc31 	bl	8000b10 <HAL_GetTick>
 80022ae:	0003      	movs	r3, r0
 80022b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022b2:	e00b      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7fe fc2c 	bl	8000b10 <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d904      	bls.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022c2:	2313      	movs	r3, #19
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2203      	movs	r2, #3
 80022c8:	701a      	strb	r2, [r3, #0]
        break;
 80022ca:	e005      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4013      	ands	r3, r2
 80022d6:	d0ed      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80022d8:	2313      	movs	r3, #19
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d154      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022e2:	4b62      	ldr	r3, [pc, #392]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d019      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d014      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022fe:	4b5b      	ldr	r3, [pc, #364]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002304:	4013      	ands	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002308:	4b58      	ldr	r3, [pc, #352]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800230a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800230c:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0249      	lsls	r1, r1, #9
 8002312:	430a      	orrs	r2, r1
 8002314:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002316:	4b55      	ldr	r3, [pc, #340]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002318:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800231a:	4b54      	ldr	r3, [pc, #336]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800231c:	4956      	ldr	r1, [pc, #344]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800231e:	400a      	ands	r2, r1
 8002320:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002322:	4b52      	ldr	r3, [pc, #328]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2201      	movs	r2, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d016      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fbee 	bl	8000b10 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002338:	e00c      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fbe9 	bl	8000b10 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a4d      	ldr	r2, [pc, #308]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d904      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800234a:	2313      	movs	r3, #19
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2203      	movs	r2, #3
 8002350:	701a      	strb	r2, [r3, #0]
            break;
 8002352:	e004      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002354:	4b45      	ldr	r3, [pc, #276]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d0ed      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800235e:	2313      	movs	r3, #19
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002368:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	4a41      	ldr	r2, [pc, #260]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002378:	430a      	orrs	r2, r1
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c
 800237c:	e00c      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800237e:	2312      	movs	r3, #18
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2213      	movs	r2, #19
 8002384:	18ba      	adds	r2, r7, r2
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e005      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800238c:	2312      	movs	r3, #18
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2213      	movs	r2, #19
 8002392:	18ba      	adds	r2, r7, r2
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002398:	2311      	movs	r3, #17
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a6:	4b31      	ldr	r3, [pc, #196]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023a8:	4935      	ldr	r1, [pc, #212]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	2203      	movs	r2, #3
 80023be:	4393      	bics	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2220      	movs	r2, #32
 80023d2:	4013      	ands	r3, r2
 80023d4:	d009      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4b21      	ldr	r3, [pc, #132]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	01db      	lsls	r3, r3, #7
 80023f2:	4013      	ands	r3, r2
 80023f4:	d015      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	0899      	lsrs	r1, r3, #2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002404:	430a      	orrs	r2, r1
 8002406:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	05db      	lsls	r3, r3, #23
 8002410:	429a      	cmp	r2, r3
 8002412:	d106      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	0249      	lsls	r1, r1, #9
 800241e:	430a      	orrs	r2, r1
 8002420:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	4013      	ands	r3, r2
 800242c:	d016      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	4a15      	ldr	r2, [pc, #84]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800243e:	430a      	orrs	r2, r1
 8002440:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	01db      	lsls	r3, r3, #7
 800244a:	429a      	cmp	r2, r3
 800244c:	d106      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	0249      	lsls	r1, r1, #9
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800245c:	2312      	movs	r3, #18
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	781b      	ldrb	r3, [r3, #0]
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b006      	add	sp, #24
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
 8002474:	fffffcff 	.word	0xfffffcff
 8002478:	fffeffff 	.word	0xfffeffff
 800247c:	00001388 	.word	0x00001388
 8002480:	efffffff 	.word	0xefffffff
 8002484:	ffffcfff 	.word	0xffffcfff
 8002488:	ffff3fff 	.word	0xffff3fff

0800248c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0a8      	b.n	80025f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	2382      	movs	r3, #130	; 0x82
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d009      	beq.n	80024c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
 80024b8:	e005      	b.n	80024c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	225d      	movs	r2, #93	; 0x5d
 80024d0:	5c9b      	ldrb	r3, [r3, r2]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	225c      	movs	r2, #92	; 0x5c
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7fe f94e 	bl	8000784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	225d      	movs	r2, #93	; 0x5d
 80024ec:	2102      	movs	r1, #2
 80024ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	438a      	bics	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	23e0      	movs	r3, #224	; 0xe0
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	429a      	cmp	r2, r3
 800250a:	d902      	bls.n	8002512 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e002      	b.n	8002518 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	23f0      	movs	r3, #240	; 0xf0
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	429a      	cmp	r2, r3
 8002522:	d008      	beq.n	8002536 <HAL_SPI_Init+0xaa>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	23e0      	movs	r3, #224	; 0xe0
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	429a      	cmp	r2, r3
 800252e:	d002      	beq.n	8002536 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	2382      	movs	r3, #130	; 0x82
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	2384      	movs	r3, #132	; 0x84
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	400b      	ands	r3, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2102      	movs	r1, #2
 8002552:	400b      	ands	r3, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2101      	movs	r1, #1
 800255c:	400b      	ands	r3, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6999      	ldr	r1, [r3, #24]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	400b      	ands	r3, r1
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2138      	movs	r1, #56	; 0x38
 8002572:	400b      	ands	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	400b      	ands	r3, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	0011      	movs	r1, r2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	2204      	movs	r2, #4
 800259c:	401a      	ands	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2110      	movs	r1, #16
 80025a4:	400b      	ands	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	2108      	movs	r1, #8
 80025ae:	400b      	ands	r3, r1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68d9      	ldr	r1, [r3, #12]
 80025b6:	23f0      	movs	r3, #240	; 0xf0
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	400b      	ands	r3, r1
 80025bc:	431a      	orrs	r2, r3
 80025be:	0011      	movs	r1, r2
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	015b      	lsls	r3, r3, #5
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4907      	ldr	r1, [pc, #28]	; (80025f8 <HAL_SPI_Init+0x16c>)
 80025dc:	400a      	ands	r2, r1
 80025de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	225d      	movs	r2, #93	; 0x5d
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b004      	add	sp, #16
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	fffff7ff 	.word	0xfffff7ff

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e04a      	b.n	80026a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	223d      	movs	r2, #61	; 0x3d
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d107      	bne.n	800262a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	223c      	movs	r2, #60	; 0x3c
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f7fe f991 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	223d      	movs	r2, #61	; 0x3d
 800262e:	2102      	movs	r1, #2
 8002630:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	0019      	movs	r1, r3
 800263c:	0010      	movs	r0, r2
 800263e:	f000 f939 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2248      	movs	r2, #72	; 0x48
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	223e      	movs	r2, #62	; 0x3e
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	223f      	movs	r2, #63	; 0x3f
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2240      	movs	r2, #64	; 0x40
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2241      	movs	r2, #65	; 0x41
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2242      	movs	r2, #66	; 0x42
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2243      	movs	r2, #67	; 0x43
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2244      	movs	r2, #68	; 0x44
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2245      	movs	r2, #69	; 0x45
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2246      	movs	r2, #70	; 0x46
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2247      	movs	r2, #71	; 0x47
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223d      	movs	r2, #61	; 0x3d
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e04a      	b.n	8002754 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	223d      	movs	r2, #61	; 0x3d
 80026c2:	5c9b      	ldrb	r3, [r3, r2]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	223c      	movs	r2, #60	; 0x3c
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f841 	bl	800275c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223d      	movs	r2, #61	; 0x3d
 80026de:	2102      	movs	r1, #2
 80026e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	0019      	movs	r1, r3
 80026ec:	0010      	movs	r0, r2
 80026ee:	f000 f8e1 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2248      	movs	r2, #72	; 0x48
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	223e      	movs	r2, #62	; 0x3e
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2241      	movs	r2, #65	; 0x41
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2242      	movs	r2, #66	; 0x42
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2243      	movs	r2, #67	; 0x43
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2244      	movs	r2, #68	; 0x44
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2245      	movs	r2, #69	; 0x45
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2246      	movs	r2, #70	; 0x46
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2247      	movs	r2, #71	; 0x47
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	223d      	movs	r2, #61	; 0x3d
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2317      	movs	r3, #23
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	223c      	movs	r2, #60	; 0x3c
 8002784:	5c9b      	ldrb	r3, [r3, r2]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_TIM_IC_ConfigChannel+0x22>
 800278a:	2302      	movs	r3, #2
 800278c:	e08c      	b.n	80028a8 <HAL_TIM_IC_ConfigChannel+0x13c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	223c      	movs	r2, #60	; 0x3c
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11b      	bne.n	80027d4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f000 f8ee 	bl	800298c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	210c      	movs	r1, #12
 80027bc:	438a      	bics	r2, r1
 80027be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6999      	ldr	r1, [r3, #24]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	619a      	str	r2, [r3, #24]
 80027d2:	e062      	b.n	800289a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d11c      	bne.n	8002814 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6819      	ldr	r1, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f000 f921 	bl	8002a30 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	492d      	ldr	r1, [pc, #180]	; (80028b0 <HAL_TIM_IC_ConfigChannel+0x144>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6999      	ldr	r1, [r3, #24]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	021a      	lsls	r2, r3, #8
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	e042      	b.n	800289a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b08      	cmp	r3, #8
 8002818:	d11b      	bne.n	8002852 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f000 f943 	bl	8002ab4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	210c      	movs	r1, #12
 800283a:	438a      	bics	r2, r1
 800283c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
 8002850:	e023      	b.n	800289a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d11c      	bne.n	8002892 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f000 f964 	bl	8002b34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	490e      	ldr	r1, [pc, #56]	; (80028b0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002878:	400a      	ands	r2, r1
 800287a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69d9      	ldr	r1, [r3, #28]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	021a      	lsls	r2, r3, #8
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	61da      	str	r2, [r3, #28]
 8002890:	e003      	b.n	800289a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002892:	2317      	movs	r3, #23
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	223c      	movs	r2, #60	; 0x3c
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

  return status;
 80028a2:	2317      	movs	r3, #23
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b006      	add	sp, #24
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	fffff3ff 	.word	0xfffff3ff

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x20>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <TIM_Base_SetConfig+0xc4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2270      	movs	r2, #112	; 0x70
 80028d8:	4393      	bics	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00f      	beq.n	800290e <TIM_Base_SetConfig+0x5a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a21      	ldr	r2, [pc, #132]	; (8002978 <TIM_Base_SetConfig+0xc4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <TIM_Base_SetConfig+0x5a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a20      	ldr	r2, [pc, #128]	; (800297c <TIM_Base_SetConfig+0xc8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <TIM_Base_SetConfig+0x5a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <TIM_Base_SetConfig+0xcc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_Base_SetConfig+0x5a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <TIM_Base_SetConfig+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d108      	bne.n	8002920 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <TIM_Base_SetConfig+0xd4>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	4393      	bics	r3, r2
 8002926:	001a      	movs	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0xaa>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <TIM_Base_SetConfig+0xcc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0xaa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <TIM_Base_SetConfig+0xd0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d103      	bne.n	8002966 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	615a      	str	r2, [r3, #20]
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400
 800297c:	40002000 	.word	0x40002000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800
 8002988:	fffffcff 	.word	0xfffffcff

0800298c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	2201      	movs	r2, #1
 80029a0:	4393      	bics	r3, r2
 80029a2:	001a      	movs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <TIM_TI1_SetConfig+0x9c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_TI1_SetConfig+0x38>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <TIM_TI1_SetConfig+0xa0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <TIM_TI1_SetConfig+0x3c>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <TIM_TI1_SetConfig+0x3e>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2203      	movs	r2, #3
 80029d2:	4393      	bics	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e003      	b.n	80029e8 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2201      	movs	r2, #1
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	22f0      	movs	r2, #240	; 0xf0
 80029ec:	4393      	bics	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	4013      	ands	r3, r2
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	220a      	movs	r2, #10
 8002a02:	4393      	bics	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	220a      	movs	r2, #10
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b006      	add	sp, #24
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400

08002a30 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2210      	movs	r2, #16
 8002a44:	4393      	bics	r3, r2
 8002a46:	001a      	movs	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4a14      	ldr	r2, [pc, #80]	; (8002aac <TIM_TI2_SetConfig+0x7c>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <TIM_TI2_SetConfig+0x80>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	031b      	lsls	r3, r3, #12
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	22a0      	movs	r2, #160	; 0xa0
 8002a84:	4393      	bics	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	22a0      	movs	r2, #160	; 0xa0
 8002a8e:	4013      	ands	r3, r2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b006      	add	sp, #24
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	fffffcff 	.word	0xfffffcff
 8002ab0:	ffff0fff 	.word	0xffff0fff

08002ab4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <TIM_TI3_SetConfig+0x78>)
 8002ac8:	401a      	ands	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2203      	movs	r2, #3
 8002ade:	4393      	bics	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	22f0      	movs	r2, #240	; 0xf0
 8002aee:	4393      	bics	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	22ff      	movs	r2, #255	; 0xff
 8002af8:	4013      	ands	r3, r2
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <TIM_TI3_SetConfig+0x7c>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	021a      	lsls	r2, r3, #8
 8002b0c:	23a0      	movs	r3, #160	; 0xa0
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4013      	ands	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b006      	add	sp, #24
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	fffffeff 	.word	0xfffffeff
 8002b30:	fffff5ff 	.word	0xfffff5ff

08002b34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <TIM_TI4_SetConfig+0x7c>)
 8002b48:	401a      	ands	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <TIM_TI4_SetConfig+0x80>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <TIM_TI4_SetConfig+0x84>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	031b      	lsls	r3, r3, #12
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	0c1b      	lsrs	r3, r3, #16
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <TIM_TI4_SetConfig+0x88>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	031a      	lsls	r2, r3, #12
 8002b8e:	23a0      	movs	r3, #160	; 0xa0
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	4013      	ands	r3, r2
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b006      	add	sp, #24
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	ffffefff 	.word	0xffffefff
 8002bb4:	fffffcff 	.word	0xfffffcff
 8002bb8:	ffff0fff 	.word	0xffff0fff
 8002bbc:	ffff5fff 	.word	0xffff5fff

08002bc0 <HAL_TIMEx_TISelection>:
  *  (**) Value not defined in all devices. \n
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	2317      	movs	r3, #23
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	223c      	movs	r2, #60	; 0x3c
 8002bd8:	5c9b      	ldrb	r3, [r3, r2]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIMEx_TISelection+0x22>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e040      	b.n	8002c64 <HAL_TIMEx_TISelection+0xa4>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	223c      	movs	r2, #60	; 0x3c
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d021      	beq.n	8002c34 <HAL_TIMEx_TISelection+0x74>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d82a      	bhi.n	8002c4c <HAL_TIMEx_TISelection+0x8c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_TIMEx_TISelection+0x44>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00c      	beq.n	8002c1c <HAL_TIMEx_TISelection+0x5c>
 8002c02:	e023      	b.n	8002c4c <HAL_TIMEx_TISelection+0x8c>
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8002c1a:	e01c      	b.n	8002c56 <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HAL_TIMEx_TISelection+0xac>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8002c32:	e010      	b.n	8002c56 <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <HAL_TIMEx_TISelection+0xb0>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8002c4a:	e004      	b.n	8002c56 <HAL_TIMEx_TISelection+0x96>
    default:
      status = HAL_ERROR;
 8002c4c:	2317      	movs	r3, #23
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
      break;
 8002c54:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	223c      	movs	r2, #60	; 0x3c
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]

  return status;
 8002c5e:	2317      	movs	r3, #23
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	781b      	ldrb	r3, [r3, #0]
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	fffff0ff 	.word	0xfffff0ff
 8002c70:	fff0ffff 	.word	0xfff0ffff

08002c74 <__libc_init_array>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	2600      	movs	r6, #0
 8002c78:	4d0c      	ldr	r5, [pc, #48]	; (8002cac <__libc_init_array+0x38>)
 8002c7a:	4c0d      	ldr	r4, [pc, #52]	; (8002cb0 <__libc_init_array+0x3c>)
 8002c7c:	1b64      	subs	r4, r4, r5
 8002c7e:	10a4      	asrs	r4, r4, #2
 8002c80:	42a6      	cmp	r6, r4
 8002c82:	d109      	bne.n	8002c98 <__libc_init_array+0x24>
 8002c84:	2600      	movs	r6, #0
 8002c86:	f000 f82b 	bl	8002ce0 <_init>
 8002c8a:	4d0a      	ldr	r5, [pc, #40]	; (8002cb4 <__libc_init_array+0x40>)
 8002c8c:	4c0a      	ldr	r4, [pc, #40]	; (8002cb8 <__libc_init_array+0x44>)
 8002c8e:	1b64      	subs	r4, r4, r5
 8002c90:	10a4      	asrs	r4, r4, #2
 8002c92:	42a6      	cmp	r6, r4
 8002c94:	d105      	bne.n	8002ca2 <__libc_init_array+0x2e>
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	00b3      	lsls	r3, r6, #2
 8002c9a:	58eb      	ldr	r3, [r5, r3]
 8002c9c:	4798      	blx	r3
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7ee      	b.n	8002c80 <__libc_init_array+0xc>
 8002ca2:	00b3      	lsls	r3, r6, #2
 8002ca4:	58eb      	ldr	r3, [r5, r3]
 8002ca6:	4798      	blx	r3
 8002ca8:	3601      	adds	r6, #1
 8002caa:	e7f2      	b.n	8002c92 <__libc_init_array+0x1e>
 8002cac:	08002d38 	.word	0x08002d38
 8002cb0:	08002d38 	.word	0x08002d38
 8002cb4:	08002d38 	.word	0x08002d38
 8002cb8:	08002d3c 	.word	0x08002d3c

08002cbc <memcpy>:
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	b510      	push	{r4, lr}
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d100      	bne.n	8002cc6 <memcpy+0xa>
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	5ccc      	ldrb	r4, [r1, r3]
 8002cc8:	54c4      	strb	r4, [r0, r3]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	e7f8      	b.n	8002cc0 <memcpy+0x4>

08002cce <memset>:
 8002cce:	0003      	movs	r3, r0
 8002cd0:	1882      	adds	r2, r0, r2
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d100      	bne.n	8002cd8 <memset+0xa>
 8002cd6:	4770      	bx	lr
 8002cd8:	7019      	strb	r1, [r3, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	e7f9      	b.n	8002cd2 <memset+0x4>
	...

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
