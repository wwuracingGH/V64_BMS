
v64_BMS_Segment_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e5c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f54  08003f54  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003f54  08003f54  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f54  08003f54  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000018  08003f74  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08003f74  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5f0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207d  00000000  00000000  0002e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  000306b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f64  00000000  00000000  00032288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffd9  00000000  00000000  000471ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4ba  00000000  00000000  000571c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e367f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000e36d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003efc 	.word	0x08003efc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	08003efc 	.word	0x08003efc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f89f 	bl	8000364 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f82b 	bl	800028c <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f891 	bl	8000364 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f887 	bl	8000364 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f837 	bl	80002d8 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f82d 	bl	80002d8 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__eqsf2>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	0042      	lsls	r2, r0, #1
 8000290:	0245      	lsls	r5, r0, #9
 8000292:	024e      	lsls	r6, r1, #9
 8000294:	004c      	lsls	r4, r1, #1
 8000296:	0fc3      	lsrs	r3, r0, #31
 8000298:	0a6d      	lsrs	r5, r5, #9
 800029a:	2001      	movs	r0, #1
 800029c:	0e12      	lsrs	r2, r2, #24
 800029e:	0a76      	lsrs	r6, r6, #9
 80002a0:	0e24      	lsrs	r4, r4, #24
 80002a2:	0fc9      	lsrs	r1, r1, #31
 80002a4:	2aff      	cmp	r2, #255	; 0xff
 80002a6:	d006      	beq.n	80002b6 <__eqsf2+0x2a>
 80002a8:	2cff      	cmp	r4, #255	; 0xff
 80002aa:	d003      	beq.n	80002b4 <__eqsf2+0x28>
 80002ac:	42a2      	cmp	r2, r4
 80002ae:	d101      	bne.n	80002b4 <__eqsf2+0x28>
 80002b0:	42b5      	cmp	r5, r6
 80002b2:	d006      	beq.n	80002c2 <__eqsf2+0x36>
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	d1fc      	bne.n	80002b4 <__eqsf2+0x28>
 80002ba:	2cff      	cmp	r4, #255	; 0xff
 80002bc:	d1fa      	bne.n	80002b4 <__eqsf2+0x28>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d1f8      	bne.n	80002b4 <__eqsf2+0x28>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d006      	beq.n	80002d4 <__eqsf2+0x48>
 80002c6:	2001      	movs	r0, #1
 80002c8:	2a00      	cmp	r2, #0
 80002ca:	d1f3      	bne.n	80002b4 <__eqsf2+0x28>
 80002cc:	0028      	movs	r0, r5
 80002ce:	1e43      	subs	r3, r0, #1
 80002d0:	4198      	sbcs	r0, r3
 80002d2:	e7ef      	b.n	80002b4 <__eqsf2+0x28>
 80002d4:	2000      	movs	r0, #0
 80002d6:	e7ed      	b.n	80002b4 <__eqsf2+0x28>

080002d8 <__gesf2>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	0042      	lsls	r2, r0, #1
 80002dc:	0245      	lsls	r5, r0, #9
 80002de:	024e      	lsls	r6, r1, #9
 80002e0:	004c      	lsls	r4, r1, #1
 80002e2:	0fc3      	lsrs	r3, r0, #31
 80002e4:	0a6d      	lsrs	r5, r5, #9
 80002e6:	0e12      	lsrs	r2, r2, #24
 80002e8:	0a76      	lsrs	r6, r6, #9
 80002ea:	0e24      	lsrs	r4, r4, #24
 80002ec:	0fc8      	lsrs	r0, r1, #31
 80002ee:	2aff      	cmp	r2, #255	; 0xff
 80002f0:	d01b      	beq.n	800032a <__gesf2+0x52>
 80002f2:	2cff      	cmp	r4, #255	; 0xff
 80002f4:	d00e      	beq.n	8000314 <__gesf2+0x3c>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d11b      	bne.n	8000332 <__gesf2+0x5a>
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	d101      	bne.n	8000302 <__gesf2+0x2a>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d01c      	beq.n	800033c <__gesf2+0x64>
 8000302:	2d00      	cmp	r5, #0
 8000304:	d00c      	beq.n	8000320 <__gesf2+0x48>
 8000306:	4283      	cmp	r3, r0
 8000308:	d01c      	beq.n	8000344 <__gesf2+0x6c>
 800030a:	2102      	movs	r1, #2
 800030c:	1e58      	subs	r0, r3, #1
 800030e:	4008      	ands	r0, r1
 8000310:	3801      	subs	r0, #1
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	2e00      	cmp	r6, #0
 8000316:	d122      	bne.n	800035e <__gesf2+0x86>
 8000318:	2a00      	cmp	r2, #0
 800031a:	d1f4      	bne.n	8000306 <__gesf2+0x2e>
 800031c:	2d00      	cmp	r5, #0
 800031e:	d1f2      	bne.n	8000306 <__gesf2+0x2e>
 8000320:	2800      	cmp	r0, #0
 8000322:	d1f6      	bne.n	8000312 <__gesf2+0x3a>
 8000324:	2001      	movs	r0, #1
 8000326:	4240      	negs	r0, r0
 8000328:	e7f3      	b.n	8000312 <__gesf2+0x3a>
 800032a:	2d00      	cmp	r5, #0
 800032c:	d117      	bne.n	800035e <__gesf2+0x86>
 800032e:	2cff      	cmp	r4, #255	; 0xff
 8000330:	d0f0      	beq.n	8000314 <__gesf2+0x3c>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d1e7      	bne.n	8000306 <__gesf2+0x2e>
 8000336:	2e00      	cmp	r6, #0
 8000338:	d1e5      	bne.n	8000306 <__gesf2+0x2e>
 800033a:	e7e6      	b.n	800030a <__gesf2+0x32>
 800033c:	2000      	movs	r0, #0
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e7      	beq.n	8000312 <__gesf2+0x3a>
 8000342:	e7e2      	b.n	800030a <__gesf2+0x32>
 8000344:	42a2      	cmp	r2, r4
 8000346:	dc05      	bgt.n	8000354 <__gesf2+0x7c>
 8000348:	dbea      	blt.n	8000320 <__gesf2+0x48>
 800034a:	42b5      	cmp	r5, r6
 800034c:	d802      	bhi.n	8000354 <__gesf2+0x7c>
 800034e:	d3e7      	bcc.n	8000320 <__gesf2+0x48>
 8000350:	2000      	movs	r0, #0
 8000352:	e7de      	b.n	8000312 <__gesf2+0x3a>
 8000354:	4243      	negs	r3, r0
 8000356:	4158      	adcs	r0, r3
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	3801      	subs	r0, #1
 800035c:	e7d9      	b.n	8000312 <__gesf2+0x3a>
 800035e:	2002      	movs	r0, #2
 8000360:	4240      	negs	r0, r0
 8000362:	e7d6      	b.n	8000312 <__gesf2+0x3a>

08000364 <__lesf2>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	0042      	lsls	r2, r0, #1
 8000368:	0245      	lsls	r5, r0, #9
 800036a:	024e      	lsls	r6, r1, #9
 800036c:	004c      	lsls	r4, r1, #1
 800036e:	0fc3      	lsrs	r3, r0, #31
 8000370:	0a6d      	lsrs	r5, r5, #9
 8000372:	0e12      	lsrs	r2, r2, #24
 8000374:	0a76      	lsrs	r6, r6, #9
 8000376:	0e24      	lsrs	r4, r4, #24
 8000378:	0fc8      	lsrs	r0, r1, #31
 800037a:	2aff      	cmp	r2, #255	; 0xff
 800037c:	d00b      	beq.n	8000396 <__lesf2+0x32>
 800037e:	2cff      	cmp	r4, #255	; 0xff
 8000380:	d00d      	beq.n	800039e <__lesf2+0x3a>
 8000382:	2a00      	cmp	r2, #0
 8000384:	d11f      	bne.n	80003c6 <__lesf2+0x62>
 8000386:	2c00      	cmp	r4, #0
 8000388:	d116      	bne.n	80003b8 <__lesf2+0x54>
 800038a:	2e00      	cmp	r6, #0
 800038c:	d114      	bne.n	80003b8 <__lesf2+0x54>
 800038e:	2000      	movs	r0, #0
 8000390:	2d00      	cmp	r5, #0
 8000392:	d010      	beq.n	80003b6 <__lesf2+0x52>
 8000394:	e009      	b.n	80003aa <__lesf2+0x46>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d10c      	bne.n	80003b4 <__lesf2+0x50>
 800039a:	2cff      	cmp	r4, #255	; 0xff
 800039c:	d113      	bne.n	80003c6 <__lesf2+0x62>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d108      	bne.n	80003b4 <__lesf2+0x50>
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d008      	beq.n	80003b8 <__lesf2+0x54>
 80003a6:	4283      	cmp	r3, r0
 80003a8:	d012      	beq.n	80003d0 <__lesf2+0x6c>
 80003aa:	2102      	movs	r1, #2
 80003ac:	1e58      	subs	r0, r3, #1
 80003ae:	4008      	ands	r0, r1
 80003b0:	3801      	subs	r0, #1
 80003b2:	e000      	b.n	80003b6 <__lesf2+0x52>
 80003b4:	2002      	movs	r0, #2
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d1f4      	bne.n	80003a6 <__lesf2+0x42>
 80003bc:	2800      	cmp	r0, #0
 80003be:	d1fa      	bne.n	80003b6 <__lesf2+0x52>
 80003c0:	2001      	movs	r0, #1
 80003c2:	4240      	negs	r0, r0
 80003c4:	e7f7      	b.n	80003b6 <__lesf2+0x52>
 80003c6:	2c00      	cmp	r4, #0
 80003c8:	d1ed      	bne.n	80003a6 <__lesf2+0x42>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d1eb      	bne.n	80003a6 <__lesf2+0x42>
 80003ce:	e7ec      	b.n	80003aa <__lesf2+0x46>
 80003d0:	42a2      	cmp	r2, r4
 80003d2:	dc05      	bgt.n	80003e0 <__lesf2+0x7c>
 80003d4:	dbf2      	blt.n	80003bc <__lesf2+0x58>
 80003d6:	42b5      	cmp	r5, r6
 80003d8:	d802      	bhi.n	80003e0 <__lesf2+0x7c>
 80003da:	d3ef      	bcc.n	80003bc <__lesf2+0x58>
 80003dc:	2000      	movs	r0, #0
 80003de:	e7ea      	b.n	80003b6 <__lesf2+0x52>
 80003e0:	4243      	negs	r3, r0
 80003e2:	4158      	adcs	r0, r3
 80003e4:	0040      	lsls	r0, r0, #1
 80003e6:	3801      	subs	r0, #1
 80003e8:	e7e5      	b.n	80003b6 <__lesf2+0x52>
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_ui2f>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	1e05      	subs	r5, r0, #0
 80003f0:	d00e      	beq.n	8000410 <__aeabi_ui2f+0x24>
 80003f2:	f000 f83d 	bl	8000470 <__clzsi2>
 80003f6:	239e      	movs	r3, #158	; 0x9e
 80003f8:	0004      	movs	r4, r0
 80003fa:	1a1b      	subs	r3, r3, r0
 80003fc:	2b96      	cmp	r3, #150	; 0x96
 80003fe:	dc0c      	bgt.n	800041a <__aeabi_ui2f+0x2e>
 8000400:	2808      	cmp	r0, #8
 8000402:	dd01      	ble.n	8000408 <__aeabi_ui2f+0x1c>
 8000404:	3c08      	subs	r4, #8
 8000406:	40a5      	lsls	r5, r4
 8000408:	026d      	lsls	r5, r5, #9
 800040a:	0a6d      	lsrs	r5, r5, #9
 800040c:	b2d8      	uxtb	r0, r3
 800040e:	e001      	b.n	8000414 <__aeabi_ui2f+0x28>
 8000410:	2000      	movs	r0, #0
 8000412:	2500      	movs	r5, #0
 8000414:	05c0      	lsls	r0, r0, #23
 8000416:	4328      	orrs	r0, r5
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	2b99      	cmp	r3, #153	; 0x99
 800041c:	dd09      	ble.n	8000432 <__aeabi_ui2f+0x46>
 800041e:	0002      	movs	r2, r0
 8000420:	0029      	movs	r1, r5
 8000422:	321b      	adds	r2, #27
 8000424:	4091      	lsls	r1, r2
 8000426:	1e4a      	subs	r2, r1, #1
 8000428:	4191      	sbcs	r1, r2
 800042a:	2205      	movs	r2, #5
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	40d5      	lsrs	r5, r2
 8000430:	430d      	orrs	r5, r1
 8000432:	2c05      	cmp	r4, #5
 8000434:	dc12      	bgt.n	800045c <__aeabi_ui2f+0x70>
 8000436:	0029      	movs	r1, r5
 8000438:	4e0c      	ldr	r6, [pc, #48]	; (800046c <__aeabi_ui2f+0x80>)
 800043a:	4031      	ands	r1, r6
 800043c:	076a      	lsls	r2, r5, #29
 800043e:	d009      	beq.n	8000454 <__aeabi_ui2f+0x68>
 8000440:	200f      	movs	r0, #15
 8000442:	4028      	ands	r0, r5
 8000444:	2804      	cmp	r0, #4
 8000446:	d005      	beq.n	8000454 <__aeabi_ui2f+0x68>
 8000448:	3104      	adds	r1, #4
 800044a:	014a      	lsls	r2, r1, #5
 800044c:	d502      	bpl.n	8000454 <__aeabi_ui2f+0x68>
 800044e:	239f      	movs	r3, #159	; 0x9f
 8000450:	4031      	ands	r1, r6
 8000452:	1b1b      	subs	r3, r3, r4
 8000454:	0189      	lsls	r1, r1, #6
 8000456:	0a4d      	lsrs	r5, r1, #9
 8000458:	b2d8      	uxtb	r0, r3
 800045a:	e7db      	b.n	8000414 <__aeabi_ui2f+0x28>
 800045c:	1f62      	subs	r2, r4, #5
 800045e:	4095      	lsls	r5, r2
 8000460:	0029      	movs	r1, r5
 8000462:	4e02      	ldr	r6, [pc, #8]	; (800046c <__aeabi_ui2f+0x80>)
 8000464:	4031      	ands	r1, r6
 8000466:	076a      	lsls	r2, r5, #29
 8000468:	d0f4      	beq.n	8000454 <__aeabi_ui2f+0x68>
 800046a:	e7e9      	b.n	8000440 <__aeabi_ui2f+0x54>
 800046c:	fbffffff 	.word	0xfbffffff

08000470 <__clzsi2>:
 8000470:	211c      	movs	r1, #28
 8000472:	2301      	movs	r3, #1
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	4298      	cmp	r0, r3
 8000478:	d301      	bcc.n	800047e <__clzsi2+0xe>
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	3910      	subs	r1, #16
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	4298      	cmp	r0, r3
 8000482:	d301      	bcc.n	8000488 <__clzsi2+0x18>
 8000484:	0a00      	lsrs	r0, r0, #8
 8000486:	3908      	subs	r1, #8
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0x22>
 800048e:	0900      	lsrs	r0, r0, #4
 8000490:	3904      	subs	r1, #4
 8000492:	a202      	add	r2, pc, #8	; (adr r2, 800049c <__clzsi2+0x2c>)
 8000494:	5c10      	ldrb	r0, [r2, r0]
 8000496:	1840      	adds	r0, r0, r1
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	02020304 	.word	0x02020304
 80004a0:	01010101 	.word	0x01010101
	...

080004ac <delay_us>:
/*
 * Private function definitions
 */


void delay_us(uint16_t us) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	0002      	movs	r2, r0
 80004b4:	1dbb      	adds	r3, r7, #6
 80004b6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(maxtim,0);
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <delay_us+0x34>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(maxtim) < us);
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <delay_us+0x34>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004cc:	1dbb      	adds	r3, r7, #6
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d3f7      	bcc.n	80004c4 <delay_us+0x18>
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	2000003c 	.word	0x2000003c

080004e4 <MaxInit>:

void MaxInit(SPI_HandleTypeDef *hspi, ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	maxspi = hspi;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MaxInit+0x40>)
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	601a      	str	r2, [r3, #0]
	maxadc = hadc;
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MaxInit+0x44>)
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	601a      	str	r2, [r3, #0]
	maxtim = htim;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MaxInit+0x48>)
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
	*balanceLower = 0;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MaxInit+0x4c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
	*balanceUpper = 0;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <MaxInit+0x50>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
	*config = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MaxInit+0x54>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000034 	.word	0x20000034
 8000528:	20000038 	.word	0x20000038
 800052c:	2000003c 	.word	0x2000003c
 8000530:	20000000 	.word	0x20000000
 8000534:	20000004 	.word	0x20000004
 8000538:	20000008 	.word	0x20000008

0800053c <selectCell>:

// Takes 4-bit integer and returns 4-bit big endian selection
uint8_t selectCell(uint8_t cellNum) {
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	0002      	movs	r2, r0
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	701a      	strb	r2, [r3, #0]
	uint8_t selection = 0;
 8000548:	260f      	movs	r6, #15
 800054a:	19bb      	adds	r3, r7, r6
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
	uint8_t bit0 = ((cellNum>>3) &0x01);
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	08db      	lsrs	r3, r3, #3
 8000556:	b2da      	uxtb	r2, r3
 8000558:	230e      	movs	r3, #14
 800055a:	18fb      	adds	r3, r7, r3
 800055c:	2101      	movs	r1, #1
 800055e:	400a      	ands	r2, r1
 8000560:	701a      	strb	r2, [r3, #0]
	uint8_t bit1 = ((cellNum>>2) &0x01);
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	089b      	lsrs	r3, r3, #2
 8000568:	b2da      	uxtb	r2, r3
 800056a:	200d      	movs	r0, #13
 800056c:	183b      	adds	r3, r7, r0
 800056e:	2101      	movs	r1, #1
 8000570:	400a      	ands	r2, r1
 8000572:	701a      	strb	r2, [r3, #0]
	bit1 <<=1;
 8000574:	183a      	adds	r2, r7, r0
 8000576:	183b      	adds	r3, r7, r0
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	18db      	adds	r3, r3, r3
 800057c:	7013      	strb	r3, [r2, #0]
	uint8_t bit2 = ((cellNum>>1) &0x01);
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	085b      	lsrs	r3, r3, #1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	240c      	movs	r4, #12
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2101      	movs	r1, #1
 800058c:	400a      	ands	r2, r1
 800058e:	701a      	strb	r2, [r3, #0]
	bit2 <<=2;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	193a      	adds	r2, r7, r4
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	0092      	lsls	r2, r2, #2
 8000598:	701a      	strb	r2, [r3, #0]
	uint8_t bit3 = ((cellNum) & 0x01);
 800059a:	250b      	movs	r5, #11
 800059c:	197b      	adds	r3, r7, r5
 800059e:	1dfa      	adds	r2, r7, #7
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	2101      	movs	r1, #1
 80005a4:	400a      	ands	r2, r1
 80005a6:	701a      	strb	r2, [r3, #0]
	bit3 <<=3;
 80005a8:	0029      	movs	r1, r5
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	187a      	adds	r2, r7, r1
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	00d2      	lsls	r2, r2, #3
 80005b2:	701a      	strb	r2, [r3, #0]

	selection = bit3 | bit2 | bit1 | bit0;
 80005b4:	187a      	adds	r2, r7, r1
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4313      	orrs	r3, r2
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	183b      	adds	r3, r7, r0
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b2d9      	uxtb	r1, r3
 80005c8:	19bb      	adds	r3, r7, r6
 80005ca:	220e      	movs	r2, #14
 80005cc:	18ba      	adds	r2, r7, r2
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	701a      	strb	r2, [r3, #0]
	return selection;
 80005d4:	19bb      	adds	r3, r7, r6
 80005d6:	781b      	ldrb	r3, [r3, #0]

}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	b005      	add	sp, #20
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005e0 <MaxSampleCharges>:
	*config = 0x01;
	HAL_SPI_Transmit(maxspi, u1_buffer_in, BYTE_COUNT, SPI_TIMEOUT);

}

void MaxSampleCharges() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
	//Empty transmission buffer and start sample phase
	*balanceLower = 0;
 80005e6:	4b65      	ldr	r3, [pc, #404]	; (800077c <MaxSampleCharges+0x19c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	*balanceUpper = 0;
 80005ee:	4b64      	ldr	r3, [pc, #400]	; (8000780 <MaxSampleCharges+0x1a0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	*config = 0;
 80005f6:	4b63      	ldr	r3, [pc, #396]	; (8000784 <MaxSampleCharges+0x1a4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	4861      	ldr	r0, [pc, #388]	; (8000788 <MaxSampleCharges+0x1a8>)
 8000604:	2200      	movs	r2, #0
 8000606:	0019      	movs	r1, r3
 8000608:	f001 feac 	bl	8002364 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(maxspi, u1_buffer_in, status_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 800060c:	4b5f      	ldr	r3, [pc, #380]	; (800078c <MaxSampleCharges+0x1ac>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	4a5f      	ldr	r2, [pc, #380]	; (8000790 <MaxSampleCharges+0x1b0>)
 8000612:	4960      	ldr	r1, [pc, #384]	; (8000794 <MaxSampleCharges+0x1b4>)
 8000614:	23fa      	movs	r3, #250	; 0xfa
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2303      	movs	r3, #3
 800061c:	f002 fd78 	bl	8003110 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	4858      	ldr	r0, [pc, #352]	; (8000788 <MaxSampleCharges+0x1a8>)
 8000626:	2201      	movs	r2, #1
 8000628:	0019      	movs	r1, r3
 800062a:	f001 fe9b 	bl	8002364 <HAL_GPIO_WritePin>

	//wait for sample phase to complete, at least 40 ms
	HAL_Delay(T_SAMPLE);
 800062e:	2028      	movs	r0, #40	; 0x28
 8000630:	f000 fd22 	bl	8001078 <HAL_Delay>

	//start hold phase
	*config = SMPLB_HIGH;
 8000634:	4b53      	ldr	r3, [pc, #332]	; (8000784 <MaxSampleCharges+0x1a4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2204      	movs	r2, #4
 800063a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	021b      	lsls	r3, r3, #8
 8000640:	4851      	ldr	r0, [pc, #324]	; (8000788 <MaxSampleCharges+0x1a8>)
 8000642:	2200      	movs	r2, #0
 8000644:	0019      	movs	r1, r3
 8000646:	f001 fe8d 	bl	8002364 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(maxspi, u1_buffer_in, status_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 800064a:	4b50      	ldr	r3, [pc, #320]	; (800078c <MaxSampleCharges+0x1ac>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	4a50      	ldr	r2, [pc, #320]	; (8000790 <MaxSampleCharges+0x1b0>)
 8000650:	4950      	ldr	r1, [pc, #320]	; (8000794 <MaxSampleCharges+0x1b4>)
 8000652:	23fa      	movs	r3, #250	; 0xfa
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2303      	movs	r3, #3
 800065a:	f002 fd59 	bl	8003110 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	4849      	ldr	r0, [pc, #292]	; (8000788 <MaxSampleCharges+0x1a8>)
 8000664:	2201      	movs	r2, #1
 8000666:	0019      	movs	r1, r3
 8000668:	f001 fe7c 	bl	8002364 <HAL_GPIO_WritePin>

	//wait for sample cap voltages to shift to ground reference, at least 50.5 us
	delay_us(T_HOLD + T_LS_DELAY);
 800066c:	201a      	movs	r0, #26
 800066e:	f7ff ff1d 	bl	80004ac <delay_us>

	//Measure voltage of every set of cells
	for (int i = 0; i < NUM_CELLS; i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	e079      	b.n	800076c <MaxSampleCharges+0x18c>

		// Reset config register to only ECS and SAMPLB
		*config = ECS_HIGH | SMPLB_HIGH;
 8000678:	4b42      	ldr	r3, [pc, #264]	; (8000784 <MaxSampleCharges+0x1a4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2284      	movs	r2, #132	; 0x84
 800067e:	701a      	strb	r2, [r3, #0]

		// Select desired cell
		*config |= (selectCell(i)<<3);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff ff59 	bl	800053c <selectCell>
 800068a:	0003      	movs	r3, r0
 800068c:	00d9      	lsls	r1, r3, #3
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <MaxSampleCharges+0x1a4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b25a      	sxtb	r2, r3
 8000696:	b24b      	sxtb	r3, r1
 8000698:	4313      	orrs	r3, r2
 800069a:	b25a      	sxtb	r2, r3
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <MaxSampleCharges+0x1a4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	701a      	strb	r2, [r3, #0]

		//tell MAX14920 to measure voltage of cell i
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	4837      	ldr	r0, [pc, #220]	; (8000788 <MaxSampleCharges+0x1a8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	0019      	movs	r1, r3
 80006ae:	f001 fe59 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(maxspi, u1_buffer_in, status_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 80006b2:	4b36      	ldr	r3, [pc, #216]	; (800078c <MaxSampleCharges+0x1ac>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <MaxSampleCharges+0x1b0>)
 80006b8:	4936      	ldr	r1, [pc, #216]	; (8000794 <MaxSampleCharges+0x1b4>)
 80006ba:	23fa      	movs	r3, #250	; 0xfa
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2303      	movs	r3, #3
 80006c2:	f002 fd25 	bl	8003110 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	482f      	ldr	r0, [pc, #188]	; (8000788 <MaxSampleCharges+0x1a8>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	0019      	movs	r1, r3
 80006d0:	f001 fe48 	bl	8002364 <HAL_GPIO_WritePin>

		*/
		//Time delay to allow voltage measurement to settle.
		//According to MAX14920 datasheet, we should have a delay of over 5us.
		//Reading from ADC takes a few microseconds anyways.
		delay_us(T_SET);
 80006d4:	2005      	movs	r0, #5
 80006d6:	f7ff fee9 	bl	80004ac <delay_us>

		//read voltage of cell i from ADC
		HAL_ADC_Start(maxadc);
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MaxSampleCharges+0x1b8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f800 	bl	80016e4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(maxadc, ADC_TIMEOUT);
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MaxSampleCharges+0x1b8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2132      	movs	r1, #50	; 0x32
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f884 	bl	80017f8 <HAL_ADC_PollForConversion>
		cell_voltages[i] = HAL_ADC_GetValue(maxadc)/4096;
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MaxSampleCharges+0x1b8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 f913 	bl	8001920 <HAL_ADC_GetValue>
 80006fa:	0003      	movs	r3, r0
 80006fc:	0b1b      	lsrs	r3, r3, #12
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff fe74 	bl	80003ec <__aeabi_ui2f>
 8000704:	1c01      	adds	r1, r0, #0
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <MaxSampleCharges+0x1bc>)
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	50d1      	str	r1, [r2, r3]
		HAL_ADC_Stop(maxadc);
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MaxSampleCharges+0x1b8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	f001 f834 	bl	8001780 <HAL_ADC_Stop>
		if (cell_voltages[i] > cell_voltages[highest_cell]) {
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <MaxSampleCharges+0x1bc>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	0092      	lsls	r2, r2, #2
 800071e:	58d0      	ldr	r0, [r2, r3]
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MaxSampleCharges+0x1c0>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	001a      	movs	r2, r3
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MaxSampleCharges+0x1bc>)
 8000728:	0092      	lsls	r2, r2, #2
 800072a:	58d3      	ldr	r3, [r2, r3]
 800072c:	1c19      	adds	r1, r3, #0
 800072e:	f7ff fd99 	bl	8000264 <__aeabi_fcmpgt>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d004      	beq.n	8000740 <MaxSampleCharges+0x160>
			highest_cell = i;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MaxSampleCharges+0x1c0>)
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	e012      	b.n	8000766 <MaxSampleCharges+0x186>
		} else if (cell_voltages[i] < cell_voltages[lowest_cell]) {
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MaxSampleCharges+0x1bc>)
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	58d0      	ldr	r0, [r2, r3]
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MaxSampleCharges+0x1c4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	001a      	movs	r2, r3
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MaxSampleCharges+0x1bc>)
 8000750:	0092      	lsls	r2, r2, #2
 8000752:	58d3      	ldr	r3, [r2, r3]
 8000754:	1c19      	adds	r1, r3, #0
 8000756:	f7ff fd71 	bl	800023c <__aeabi_fcmplt>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d003      	beq.n	8000766 <MaxSampleCharges+0x186>
			lowest_cell = i;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MaxSampleCharges+0x1c4>)
 8000764:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_CELLS; i++) {
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3301      	adds	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b07      	cmp	r3, #7
 8000770:	dd82      	ble.n	8000678 <MaxSampleCharges+0x98>
		}
	}
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004
 8000784:	20000008 	.word	0x20000008
 8000788:	50000800 	.word	0x50000800
 800078c:	20000034 	.word	0x20000034
 8000790:	20000044 	.word	0x20000044
 8000794:	20000040 	.word	0x20000040
 8000798:	20000038 	.word	0x20000038
 800079c:	20000048 	.word	0x20000048
 80007a0:	20000069 	.word	0x20000069
 80007a4:	20000068 	.word	0x20000068

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fbde 	bl	8000f6c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f81e 	bl	80007f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f99e 	bl	8000af4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007b8:	f000 f862 	bl	8000880 <MX_ADC1_Init>
  MX_TIM14_Init();
 80007bc:	f000 f944 	bl	8000a48 <MX_TIM14_Init>
  MX_SPI1_Init();
 80007c0:	f000 f8ca 	bl	8000958 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007c4:	f000 f906 	bl	80009d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MaxInit(&hspi1,&hadc1,&htim14);	// Pass peripheral pointers to MAX module
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <main+0x3c>)
 80007ca:	4907      	ldr	r1, [pc, #28]	; (80007e8 <main+0x40>)
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <main+0x44>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fe88 	bl	80004e4 <MaxInit>
  HAL_TIM_Base_Start(&htim14);	// Start hardware timer
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <main+0x3c>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f003 f83a 	bl	8003850 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {

	  MaxSampleCharges();
 80007dc:	f7ff ff00 	bl	80005e0 <MaxSampleCharges>
 80007e0:	e7fc      	b.n	80007dc <main+0x34>
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	20000198 	.word	0x20000198
 80007e8:	2000006c 	.word	0x2000006c
 80007ec:	200000d0 	.word	0x200000d0

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b093      	sub	sp, #76	; 0x4c
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	2414      	movs	r4, #20
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	2334      	movs	r3, #52	; 0x34
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f003 fb73 	bl	8003eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	0018      	movs	r0, r3
 800080a:	2310      	movs	r3, #16
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f003 fb6c 	bl	8003eec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fdc1 	bl	80023a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2202      	movs	r2, #2
 8000822:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2240      	movs	r2, #64	; 0x40
 8000836:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	193b      	adds	r3, r7, r4
 8000840:	0018      	movs	r0, r3
 8000842:	f001 fded 	bl	8002420 <HAL_RCC_OscConfig>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800084a:	f000 f9bf 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2207      	movs	r2, #7
 8000852:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f002 f8e8 	bl	8002a40 <HAL_RCC_ClockConfig>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000874:	f000 f9aa 	bl	8000bcc <Error_Handler>
  }
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b013      	add	sp, #76	; 0x4c
 800087e:	bd90      	pop	{r4, r7, pc}

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	0018      	movs	r0, r3
 800088a:	230c      	movs	r3, #12
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f003 fb2c 	bl	8003eec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_ADC1_Init+0xcc>)
 8000896:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <MX_ADC1_Init+0xd0>)
 8000898:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <MX_ADC1_Init+0xcc>)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	05d2      	lsls	r2, r2, #23
 80008a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_ADC1_Init+0xcc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <MX_ADC1_Init+0xcc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <MX_ADC1_Init+0xcc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <MX_ADC1_Init+0xcc>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <MX_ADC1_Init+0xcc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_ADC1_Init+0xcc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_ADC1_Init+0xcc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_ADC1_Init+0xcc>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_ADC1_Init+0xcc>)
 80008d4:	2220      	movs	r2, #32
 80008d6:	2100      	movs	r1, #0
 80008d8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_ADC1_Init+0xcc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_ADC1_Init+0xcc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_ADC1_Init+0xcc>)
 80008e8:	222c      	movs	r2, #44	; 0x2c
 80008ea:	2100      	movs	r1, #0
 80008ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC1_Init+0xcc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_ADC1_Init+0xcc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_ADC1_Init+0xcc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_ADC1_Init+0xcc>)
 8000902:	223c      	movs	r2, #60	; 0x3c
 8000904:	2100      	movs	r1, #0
 8000906:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_ADC1_Init+0xcc>)
 800090a:	2200      	movs	r2, #0
 800090c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC1_Init+0xcc>)
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fd3f 	bl	8001394 <HAL_ADC_Init>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800091a:	f000 f957 	bl	8000bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <MX_ADC1_Init+0xd4>)
 8000922:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	1d3a      	adds	r2, r7, #4
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_ADC1_Init+0xcc>)
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fffe 	bl	8001938 <HAL_ADC_ConfigChannel>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000940:	f000 f944 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b004      	add	sp, #16
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000006c 	.word	0x2000006c
 8000950:	40012400 	.word	0x40012400
 8000954:	1c000080 	.word	0x1c000080

08000958 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_SPI1_Init+0x74>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <MX_SPI1_Init+0x78>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_SPI1_Init+0x74>)
 8000964:	2282      	movs	r2, #130	; 0x82
 8000966:	0052      	lsls	r2, r2, #1
 8000968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_SPI1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_SPI1_Init+0x74>)
 8000972:	22e0      	movs	r2, #224	; 0xe0
 8000974:	00d2      	lsls	r2, r2, #3
 8000976:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_SPI1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_SPI1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_SPI1_Init+0x74>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_SPI1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_SPI1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_SPI1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_SPI1_Init+0x74>)
 80009a6:	2207      	movs	r2, #7
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_SPI1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_SPI1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_SPI1_Init+0x74>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 faf1 	bl	8002fa0 <HAL_SPI_Init>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 f903 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000d0 	.word	0x200000d0
 80009d0:	40013000 	.word	0x40013000

080009d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_SPI2_Init+0x6c>)
 80009da:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <MX_SPI2_Init+0x70>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_SPI2_Init+0x6c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_SPI2_Init+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_SPI2_Init+0x6c>)
 80009ec:	22e0      	movs	r2, #224	; 0xe0
 80009ee:	00d2      	lsls	r2, r2, #3
 80009f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_SPI2_Init+0x6c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_SPI2_Init+0x6c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_SPI2_Init+0x6c>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	0092      	lsls	r2, r2, #2
 8000a04:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_SPI2_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_SPI2_Init+0x6c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_SPI2_Init+0x6c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_SPI2_Init+0x6c>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_SPI2_Init+0x6c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_SPI2_Init+0x6c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <MX_SPI2_Init+0x6c>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f002 fab7 	bl	8002fa0 <HAL_SPI_Init>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000a36:	f000 f8c9 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000134 	.word	0x20000134
 8000a44:	40003800 	.word	0x40003800

08000a48 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a4e:	003b      	movs	r3, r7
 8000a50:	0018      	movs	r0, r3
 8000a52:	2310      	movs	r3, #16
 8000a54:	001a      	movs	r2, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	f003 fa48 	bl	8003eec <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000a5e:	4a23      	ldr	r2, [pc, #140]	; (8000aec <MX_TIM14_Init+0xa4>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000a64:	2210      	movs	r2, #16
 8000a66:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000a70:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <MX_TIM14_Init+0xa8>)
 8000a72:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fe8c 	bl	80037a0 <HAL_TIM_Base_Init>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a8c:	f000 f89e 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 ff22 	bl	80038dc <HAL_TIM_IC_Init>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f000 f896 	bl	8000bcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aac:	003b      	movs	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ab8:	0039      	movs	r1, r7
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f002 ff6c 	bl	800399c <HAL_TIM_IC_ConfigChannel>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000ac8:	f000 f880 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim14, TIM_TIM14_TI1_MCO, TIM_CHANNEL_1) != HAL_OK)
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_TIM14_Init+0xa0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f003 f98c 	bl	8003df0 <HAL_TIMEx_TISelection>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM14_Init+0x98>
  {
    Error_Handler();
 8000adc:	f000 f876 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b004      	add	sp, #16
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000198 	.word	0x20000198
 8000aec:	40002000 	.word	0x40002000
 8000af0:	0000ffff 	.word	0x0000ffff

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	240c      	movs	r4, #12
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	0018      	movs	r0, r3
 8000b00:	2314      	movs	r3, #20
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f003 f9f1 	bl	8003eec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b10:	2102      	movs	r1, #2
 8000b12:	430a      	orrs	r2, r1
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b28:	2104      	movs	r1, #4
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	2204      	movs	r2, #4
 8000b34:	4013      	ands	r3, r2
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	481c      	ldr	r0, [pc, #112]	; (8000bc8 <MX_GPIO_Init+0xd4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	f001 fc02 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	2200      	movs	r2, #0
 8000b66:	212e      	movs	r1, #46	; 0x2e
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 fbfb 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	0212      	lsls	r2, r2, #8
 8000b74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <MX_GPIO_Init+0xd4>)
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	0010      	movs	r0, r2
 8000b90:	f001 fa84 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000b94:	0021      	movs	r1, r4
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	222e      	movs	r2, #46	; 0x2e
 8000b9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	187a      	adds	r2, r7, r1
 8000bb0:	23a0      	movs	r3, #160	; 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f001 fa70 	bl	800209c <HAL_GPIO_Init>

}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b009      	add	sp, #36	; 0x24
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000800 	.word	0x50000800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x44>)
 8000be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_MspInit+0x44>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	430a      	orrs	r2, r1
 8000be8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x44>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0549      	lsls	r1, r1, #21
 8000c00:	430a      	orrs	r2, r1
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_MspInit+0x44>)
 8000c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	055b      	lsls	r3, r3, #21
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b091      	sub	sp, #68	; 0x44
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	232c      	movs	r3, #44	; 0x2c
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2314      	movs	r3, #20
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f003 f95a 	bl	8003eec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	2414      	movs	r4, #20
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2318      	movs	r3, #24
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f003 f952 	bl	8003eec <memset>
  if(hadc->Instance==ADC1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <HAL_ADC_MspInit+0xb0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d139      	bne.n	8000cc6 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	01d2      	lsls	r2, r2, #7
 8000c58:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 f876 	bl	8002d54 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c6c:	f7ff ffae 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_ADC_MspInit+0xb4>)
 8000c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_ADC_MspInit+0xb4>)
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	0349      	lsls	r1, r1, #13
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_ADC_MspInit+0xb4>)
 8000c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	035b      	lsls	r3, r3, #13
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_ADC_MspInit+0xb4>)
 8000c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_ADC_MspInit+0xb4>)
 8000c92:	2101      	movs	r1, #1
 8000c94:	430a      	orrs	r2, r1
 8000c96:	635a      	str	r2, [r3, #52]	; 0x34
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_ADC_MspInit+0xb4>)
 8000c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8000ca4:	212c      	movs	r1, #44	; 0x2c
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	22c1      	movs	r2, #193	; 0xc1
 8000caa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	187a      	adds	r2, r7, r1
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 f9eb 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b011      	add	sp, #68	; 0x44
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40012400 	.word	0x40012400
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b08f      	sub	sp, #60	; 0x3c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	2424      	movs	r4, #36	; 0x24
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2314      	movs	r3, #20
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f003 f8fe 	bl	8003eec <memset>
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a66      	ldr	r2, [pc, #408]	; (8000e90 <HAL_SPI_MspInit+0x1b8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d153      	bne.n	8000da2 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfe:	4b65      	ldr	r3, [pc, #404]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0149      	lsls	r1, r1, #5
 8000d04:	430a      	orrs	r2, r1
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
 8000d08:	4b62      	ldr	r3, [pc, #392]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	015b      	lsls	r3, r3, #5
 8000d10:	4013      	ands	r3, r2
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
 8000d22:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d26:	2201      	movs	r2, #1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b59      	ldr	r3, [pc, #356]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d32:	4b58      	ldr	r3, [pc, #352]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000d34:	2102      	movs	r1, #2
 8000d36:	430a      	orrs	r2, r1
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3a:	4b56      	ldr	r3, [pc, #344]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	2202      	movs	r2, #2
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	22c0      	movs	r2, #192	; 0xc0
 8000d4a:	0152      	lsls	r2, r2, #5
 8000d4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	2202      	movs	r2, #2
 8000d52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	193a      	adds	r2, r7, r4
 8000d68:	23a0      	movs	r3, #160	; 0xa0
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 f994 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d74:	0021      	movs	r1, r4
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2208      	movs	r2, #8
 8000d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2202      	movs	r2, #2
 8000d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <HAL_SPI_MspInit+0x1c0>)
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0010      	movs	r0, r2
 8000d9c:	f001 f97e 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000da0:	e071      	b.n	8000e86 <HAL_SPI_MspInit+0x1ae>
  else if(hspi->Instance==SPI2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <HAL_SPI_MspInit+0x1c4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d16c      	bne.n	8000e86 <HAL_SPI_MspInit+0x1ae>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dac:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000db0:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	01c9      	lsls	r1, r1, #7
 8000db6:	430a      	orrs	r2, r1
 8000db8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	01db      	lsls	r3, r3, #7
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dcc:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000dce:	2102      	movs	r1, #2
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd8:	2202      	movs	r2, #2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <HAL_SPI_MspInit+0x1bc>)
 8000dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df0:	2201      	movs	r2, #1
 8000df2:	4013      	ands	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_2;
 8000df8:	2124      	movs	r1, #36	; 0x24
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2282      	movs	r2, #130	; 0x82
 8000dfe:	0052      	lsls	r2, r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	000c      	movs	r4, r1
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2202      	movs	r2, #2
 8000e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2201      	movs	r2, #1
 8000e1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_SPI_MspInit+0x1c0>)
 8000e20:	0019      	movs	r1, r3
 8000e22:	0010      	movs	r0, r2
 8000e24:	f001 f93a 	bl	800209c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e28:	0021      	movs	r1, r4
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0092      	lsls	r2, r2, #2
 8000e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	000c      	movs	r4, r1
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2202      	movs	r2, #2
 8000e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2205      	movs	r2, #5
 8000e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <HAL_SPI_MspInit+0x1c0>)
 8000e50:	0019      	movs	r1, r3
 8000e52:	0010      	movs	r0, r2
 8000e54:	f001 f922 	bl	800209c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e58:	0021      	movs	r1, r4
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2202      	movs	r2, #2
 8000e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2201      	movs	r2, #1
 8000e76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	187a      	adds	r2, r7, r1
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 f90b 	bl	800209c <HAL_GPIO_Init>
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b00f      	add	sp, #60	; 0x3c
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40013000 	.word	0x40013000
 8000e94:	40021000 	.word	0x40021000
 8000e98:	50000400 	.word	0x50000400
 8000e9c:	40003800 	.word	0x40003800

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_TIM_Base_MspInit+0x38>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10d      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_Base_MspInit+0x3c>)
 8000eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_TIM_Base_MspInit+0x3c>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0209      	lsls	r1, r1, #8
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_TIM_Base_MspInit+0x3c>)
 8000ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b004      	add	sp, #16
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40002000 	.word	0x40002000
 8000edc:	40021000 	.word	0x40021000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f89c 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f1c:	f7ff fff7 	bl	8000f0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	; (8000f64 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f46:	f002 ffad 	bl	8003ea4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f4a:	f7ff fc2d 	bl	80007a8 <main>

08000f4e <LoopForever>:

LoopForever:
  b LoopForever
 8000f4e:	e7fe      	b.n	8000f4e <LoopForever>
  ldr   r0, =_estack
 8000f50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f5c:	08003f5c 	.word	0x08003f5c
  ldr r2, =_sbss
 8000f60:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f64:	200001e8 	.word	0x200001e8

08000f68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC1_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x3c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Init+0x3c>)
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	0049      	lsls	r1, r1, #1
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f810 	bl	8000fac <HAL_InitTick>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e001      	b.n	8000f9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fe1e 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40022000 	.word	0x40022000

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_InitTick+0x88>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d02b      	beq.n	800101c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_InitTick+0x8c>)
 8000fc6:	681c      	ldr	r4, [r3, #0]
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_InitTick+0x88>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	0019      	movs	r1, r3
 8000fce:	23fa      	movs	r3, #250	; 0xfa
 8000fd0:	0098      	lsls	r0, r3, #2
 8000fd2:	f7ff f895 	bl	8000100 <__udivsi3>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	0019      	movs	r1, r3
 8000fda:	0020      	movs	r0, r4
 8000fdc:	f7ff f890 	bl	8000100 <__udivsi3>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 f84d 	bl	8002082 <HAL_SYSTICK_Config>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d112      	bne.n	8001012 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d80a      	bhi.n	8001008 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	425b      	negs	r3, r3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f001 f82c 	bl	8002058 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_InitTick+0x90>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e00d      	b.n	8001024 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e008      	b.n	8001024 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001012:	230f      	movs	r3, #15
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e003      	b.n	8001024 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800101c:	230f      	movs	r3, #15
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001024:	230f      	movs	r3, #15
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	781b      	ldrb	r3, [r3, #0]
}
 800102a:	0018      	movs	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	b005      	add	sp, #20
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000014 	.word	0x20000014
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000010 	.word	0x20000010

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	001a      	movs	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	18d2      	adds	r2, r2, r3
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000014 	.word	0x20000014
 8001060:	200001e4 	.word	0x200001e4

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	200001e4 	.word	0x200001e4

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff fff0 	bl	8001064 <HAL_GetTick>
 8001084:	0003      	movs	r3, r0
 8001086:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	001a      	movs	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	189b      	adds	r3, r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	f7ff ffe0 	bl	8001064 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	20000014 	.word	0x20000014

080010c0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80010d0:	401a      	ands	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	fe3fffff 	.word	0xfe3fffff

080010e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	23e0      	movs	r3, #224	; 0xe0
 80010f6:	045b      	lsls	r3, r3, #17
 80010f8:	4013      	ands	r3, r2
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}

08001102 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	2104      	movs	r1, #4
 8001116:	400a      	ands	r2, r1
 8001118:	2107      	movs	r1, #7
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	43d2      	mvns	r2, r2
 8001120:	401a      	ands	r2, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2104      	movs	r1, #4
 8001126:	400b      	ands	r3, r1
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4099      	lsls	r1, r3
 800112c:	000b      	movs	r3, r1
 800112e:	431a      	orrs	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}

0800113c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	2104      	movs	r1, #4
 800114e:	400a      	ands	r2, r1
 8001150:	2107      	movs	r1, #7
 8001152:	4091      	lsls	r1, r2
 8001154:	000a      	movs	r2, r1
 8001156:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2104      	movs	r1, #4
 800115c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800115e:	40da      	lsrs	r2, r3
 8001160:	0013      	movs	r3, r2
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}

0800116a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	23c0      	movs	r3, #192	; 0xc0
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4013      	ands	r3, r2
 800117c:	d101      	bne.n	8001182 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001182:	2300      	movs	r3, #0
}
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	211f      	movs	r1, #31
 80011a0:	400a      	ands	r2, r1
 80011a2:	210f      	movs	r1, #15
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	43d2      	mvns	r2, r2
 80011aa:	401a      	ands	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	0e9b      	lsrs	r3, r3, #26
 80011b0:	210f      	movs	r1, #15
 80011b2:	4019      	ands	r1, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	201f      	movs	r0, #31
 80011b8:	4003      	ands	r3, r0
 80011ba:	4099      	lsls	r1, r3
 80011bc:	000b      	movs	r3, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b004      	add	sp, #16
 80011ca:	bd80      	pop	{r7, pc}

080011cc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	035b      	lsls	r3, r3, #13
 80011de:	0b5b      	lsrs	r3, r3, #13
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}

080011ee <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	0352      	lsls	r2, r2, #13
 8001200:	0b52      	lsrs	r2, r2, #13
 8001202:	43d2      	mvns	r2, r2
 8001204:	401a      	ands	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	0212      	lsls	r2, r2, #8
 8001228:	43d2      	mvns	r2, r2
 800122a:	401a      	ands	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	400b      	ands	r3, r1
 8001234:	4904      	ldr	r1, [pc, #16]	; (8001248 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001236:	400b      	ands	r3, r1
 8001238:	431a      	orrs	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	07ffff00 	.word	0x07ffff00

0800124c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a05      	ldr	r2, [pc, #20]	; (8001270 <LL_ADC_EnableInternalRegulator+0x24>)
 800125a:	4013      	ands	r3, r2
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	0552      	lsls	r2, r2, #21
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	6fffffe8 	.word	0x6fffffe8

08001274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	055b      	lsls	r3, r3, #21
 8001284:	401a      	ands	r2, r3
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	055b      	lsls	r3, r3, #21
 800128a:	429a      	cmp	r2, r3
 800128c:	d101      	bne.n	8001292 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001292:	2300      	movs	r3, #0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}

0800129c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <LL_ADC_Enable+0x20>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	2201      	movs	r2, #1
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	7fffffe8 	.word	0x7fffffe8

080012c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <LL_ADC_Disable+0x20>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	2202      	movs	r2, #2
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	7fffffe8 	.word	0x7fffffe8

080012e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <LL_ADC_IsEnabled+0x18>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <LL_ADC_IsEnabled+0x1a>
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}

08001306 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	2b02      	cmp	r3, #2
 8001318:	d101      	bne.n	800131e <LL_ADC_IsDisableOngoing+0x18>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_IsDisableOngoing+0x1a>
 800131e:	2300      	movs	r3, #0
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}

08001328 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <LL_ADC_REG_StartConversion+0x20>)
 8001336:	4013      	ands	r3, r2
 8001338:	2204      	movs	r2, #4
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}
 8001348:	7fffffe8 	.word	0x7fffffe8

0800134c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <LL_ADC_REG_StopConversion+0x20>)
 800135a:	4013      	ands	r3, r2
 800135c:	2210      	movs	r2, #16
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}
 800136c:	7fffffe8 	.word	0x7fffffe8

08001370 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2204      	movs	r2, #4
 800137e:	4013      	ands	r3, r2
 8001380:	2b04      	cmp	r3, #4
 8001382:	d101      	bne.n	8001388 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001388:	2300      	movs	r3, #0
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139c:	231f      	movs	r3, #31
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e17f      	b.n	80016ba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10a      	bne.n	80013d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff fc2b 	bl	8000c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2254      	movs	r2, #84	; 0x54
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ff49 	bl	8001274 <LL_ADC_IsInternalRegulatorEnabled>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d115      	bne.n	8001412 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7ff ff2e 	bl	800124c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013f0:	4bb4      	ldr	r3, [pc, #720]	; (80016c4 <HAL_ADC_Init+0x330>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	49b4      	ldr	r1, [pc, #720]	; (80016c8 <HAL_ADC_Init+0x334>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7fe fe82 	bl	8000100 <__udivsi3>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3301      	adds	r3, #1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001404:	e002      	b.n	800140c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3b01      	subs	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f9      	bne.n	8001406 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	f7ff ff2c 	bl	8001274 <LL_ADC_IsInternalRegulatorEnabled>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d10f      	bne.n	8001440 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	2210      	movs	r2, #16
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	2201      	movs	r2, #1
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001438:	231f      	movs	r3, #31
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff ff93 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 800144a:	0003      	movs	r3, r0
 800144c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	2210      	movs	r2, #16
 8001454:	4013      	ands	r3, r2
 8001456:	d000      	beq.n	800145a <HAL_ADC_Init+0xc6>
 8001458:	e122      	b.n	80016a0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d000      	beq.n	8001462 <HAL_ADC_Init+0xce>
 8001460:	e11e      	b.n	80016a0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	4a99      	ldr	r2, [pc, #612]	; (80016cc <HAL_ADC_Init+0x338>)
 8001468:	4013      	ands	r3, r2
 800146a:	2202      	movs	r2, #2
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff ff34 	bl	80012e4 <LL_ADC_IsEnabled>
 800147c:	1e03      	subs	r3, r0, #0
 800147e:	d000      	beq.n	8001482 <HAL_ADC_Init+0xee>
 8001480:	e0ad      	b.n	80015de <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800148c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7e5b      	ldrb	r3, [r3, #25]
 8001492:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001494:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7e9b      	ldrb	r3, [r3, #26]
 800149a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800149c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <HAL_ADC_Init+0x118>
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	015b      	lsls	r3, r3, #5
 80014aa:	e000      	b.n	80014ae <HAL_ADC_Init+0x11a>
 80014ac:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014ae:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014b4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da04      	bge.n	80014c8 <HAL_ADC_Init+0x134>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	e001      	b.n	80014cc <HAL_ADC_Init+0x138>
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80014cc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	212c      	movs	r1, #44	; 0x2c
 80014d2:	5c5b      	ldrb	r3, [r3, r1]
 80014d4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014d6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	5c9b      	ldrb	r3, [r3, r2]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d115      	bne.n	8001514 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e9b      	ldrb	r3, [r3, #26]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d105      	bne.n	80014fc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	0252      	lsls	r2, r2, #9
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	e00b      	b.n	8001514 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	2220      	movs	r2, #32
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	2201      	movs	r2, #1
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00a      	beq.n	8001532 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001520:	23e0      	movs	r3, #224	; 0xe0
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800152a:	4313      	orrs	r3, r2
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4a65      	ldr	r2, [pc, #404]	; (80016d0 <HAL_ADC_Init+0x33c>)
 800153a:	4013      	ands	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	430a      	orrs	r2, r1
 8001546:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	0f9b      	lsrs	r3, r3, #30
 800154e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001554:	4313      	orrs	r3, r2
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4313      	orrs	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	223c      	movs	r2, #60	; 0x3c
 8001560:	5c9b      	ldrb	r3, [r3, r2]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d111      	bne.n	800158a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	0f9b      	lsrs	r3, r3, #30
 800156c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001572:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001578:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800157e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	2201      	movs	r2, #1
 8001586:	4313      	orrs	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a50      	ldr	r2, [pc, #320]	; (80016d4 <HAL_ADC_Init+0x340>)
 8001592:	4013      	ands	r3, r2
 8001594:	0019      	movs	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	430a      	orrs	r2, r1
 800159e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	23c0      	movs	r3, #192	; 0xc0
 80015a6:	061b      	lsls	r3, r3, #24
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d018      	beq.n	80015de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d012      	beq.n	80015de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	061b      	lsls	r3, r3, #24
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d00c      	beq.n	80015de <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80015c4:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <HAL_ADC_Init+0x344>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a44      	ldr	r2, [pc, #272]	; (80016dc <HAL_ADC_Init+0x348>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	0019      	movs	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	23f0      	movs	r3, #240	; 0xf0
 80015d4:	039b      	lsls	r3, r3, #14
 80015d6:	401a      	ands	r2, r3
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_ADC_Init+0x344>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	001a      	movs	r2, r3
 80015e8:	2100      	movs	r1, #0
 80015ea:	f7ff fd8a 	bl	8001102 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	493a      	ldr	r1, [pc, #232]	; (80016e0 <HAL_ADC_Init+0x34c>)
 80015f8:	001a      	movs	r2, r3
 80015fa:	f7ff fd82 	bl	8001102 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2110      	movs	r1, #16
 8001612:	4249      	negs	r1, r1
 8001614:	430a      	orrs	r2, r1
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
 8001618:	e018      	b.n	800164c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	039b      	lsls	r3, r3, #14
 8001622:	429a      	cmp	r2, r3
 8001624:	d112      	bne.n	800164c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	3b01      	subs	r3, #1
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	221c      	movs	r2, #28
 8001636:	4013      	ands	r3, r2
 8001638:	2210      	movs	r2, #16
 800163a:	4252      	negs	r2, r2
 800163c:	409a      	lsls	r2, r3
 800163e:	0011      	movs	r1, r2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2100      	movs	r1, #0
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff fd72 	bl	800113c <LL_ADC_GetSamplingTimeCommonChannels>
 8001658:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800165e:	429a      	cmp	r2, r3
 8001660:	d10b      	bne.n	800167a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	2203      	movs	r2, #3
 800166e:	4393      	bics	r3, r2
 8001670:	2201      	movs	r2, #1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001678:	e01c      	b.n	80016b4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	2212      	movs	r2, #18
 8001680:	4393      	bics	r3, r2
 8001682:	2210      	movs	r2, #16
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168e:	2201      	movs	r2, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001696:	231f      	movs	r3, #31
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800169e:	e009      	b.n	80016b4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	2210      	movs	r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016ac:	231f      	movs	r3, #31
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016b4:	231f      	movs	r3, #31
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	781b      	ldrb	r3, [r3, #0]
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b008      	add	sp, #32
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	2000000c 	.word	0x2000000c
 80016c8:	00030d40 	.word	0x00030d40
 80016cc:	fffffefd 	.word	0xfffffefd
 80016d0:	fffe0201 	.word	0xfffe0201
 80016d4:	1ffffc02 	.word	0x1ffffc02
 80016d8:	40012708 	.word	0x40012708
 80016dc:	ffc3ffff 	.word	0xffc3ffff
 80016e0:	07ffff04 	.word	0x07ffff04

080016e4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff fe3d 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d135      	bne.n	8001766 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2254      	movs	r2, #84	; 0x54
 80016fe:	5c9b      	ldrb	r3, [r3, r2]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_ADC_Start+0x24>
 8001704:	2302      	movs	r3, #2
 8001706:	e035      	b.n	8001774 <HAL_ADC_Start+0x90>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2254      	movs	r2, #84	; 0x54
 800170c:	2101      	movs	r1, #1
 800170e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001710:	250f      	movs	r5, #15
 8001712:	197c      	adds	r4, r7, r5
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	0018      	movs	r0, r3
 8001718:	f000 fb28 	bl	8001d6c <ADC_Enable>
 800171c:	0003      	movs	r3, r0
 800171e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001720:	197b      	adds	r3, r7, r5
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d119      	bne.n	800175c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a13      	ldr	r2, [pc, #76]	; (800177c <HAL_ADC_Start+0x98>)
 800172e:	4013      	ands	r3, r2
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	0052      	lsls	r2, r2, #1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	221c      	movs	r2, #28
 8001746:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2254      	movs	r2, #84	; 0x54
 800174c:	2100      	movs	r1, #0
 800174e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fde7 	bl	8001328 <LL_ADC_REG_StartConversion>
 800175a:	e008      	b.n	800176e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2254      	movs	r2, #84	; 0x54
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]
 8001764:	e003      	b.n	800176e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001766:	230f      	movs	r3, #15
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	2202      	movs	r2, #2
 800176c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800176e:	230f      	movs	r3, #15
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	781b      	ldrb	r3, [r3, #0]
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b004      	add	sp, #16
 800177a:	bdb0      	pop	{r4, r5, r7, pc}
 800177c:	fffff0fe 	.word	0xfffff0fe

08001780 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2254      	movs	r2, #84	; 0x54
 800178c:	5c9b      	ldrb	r3, [r3, r2]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Stop+0x16>
 8001792:	2302      	movs	r3, #2
 8001794:	e029      	b.n	80017ea <HAL_ADC_Stop+0x6a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2254      	movs	r2, #84	; 0x54
 800179a:	2101      	movs	r1, #1
 800179c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800179e:	250f      	movs	r5, #15
 80017a0:	197c      	adds	r4, r7, r5
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 fa9f 	bl	8001ce8 <ADC_ConversionStop>
 80017aa:	0003      	movs	r3, r0
 80017ac:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017ae:	197b      	adds	r3, r7, r5
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d112      	bne.n	80017dc <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80017b6:	197c      	adds	r4, r7, r5
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 fb5c 	bl	8001e78 <ADC_Disable>
 80017c0:	0003      	movs	r3, r0
 80017c2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_ADC_Stop+0x74>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	2201      	movs	r2, #1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2254      	movs	r2, #84	; 0x54
 80017e0:	2100      	movs	r1, #0
 80017e2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80017e4:	230f      	movs	r3, #15
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	781b      	ldrb	r3, [r3, #0]
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b004      	add	sp, #16
 80017f0:	bdb0      	pop	{r4, r5, r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	fffffefe 	.word	0xfffffefe

080017f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d102      	bne.n	8001810 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800180a:	2308      	movs	r3, #8
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e00f      	b.n	8001830 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	d007      	beq.n	800182c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	2220      	movs	r2, #32
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e072      	b.n	8001912 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800182c:	2304      	movs	r3, #4
 800182e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001830:	f7ff fc18 	bl	8001064 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001838:	e01f      	b.n	800187a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	d01c      	beq.n	800187a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001840:	f7ff fc10 	bl	8001064 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d302      	bcc.n	8001856 <HAL_ADC_PollForConversion+0x5e>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d111      	bne.n	800187a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	d10b      	bne.n	800187a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	2204      	movs	r2, #4
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2254      	movs	r2, #84	; 0x54
 8001872:	2100      	movs	r1, #0
 8001874:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e04b      	b.n	8001912 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	d0d9      	beq.n	800183a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff fc66 	bl	800116a <LL_ADC_REG_IsTriggerSourceSWStart>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d02e      	beq.n	8001900 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7e9b      	ldrb	r3, [r3, #26]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d12a      	bne.n	8001900 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2208      	movs	r2, #8
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d123      	bne.n	8001900 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fd57 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d110      	bne.n	80018e8 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	210c      	movs	r1, #12
 80018d2:	438a      	bics	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_ADC_PollForConversion+0x124>)
 80018dc:	4013      	ands	r3, r2
 80018de:	2201      	movs	r2, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	659a      	str	r2, [r3, #88]	; 0x58
 80018e6:	e00b      	b.n	8001900 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	2220      	movs	r2, #32
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f8:	2201      	movs	r2, #1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e1b      	ldrb	r3, [r3, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d103      	bne.n	8001910 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	220c      	movs	r2, #12
 800190e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	fffffefe 	.word	0xfffffefe

08001920 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001942:	2317      	movs	r3, #23
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2254      	movs	r2, #84	; 0x54
 8001952:	5c9b      	ldrb	r3, [r3, r2]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x24>
 8001958:	2302      	movs	r3, #2
 800195a:	e1c0      	b.n	8001cde <HAL_ADC_ConfigChannel+0x3a6>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2254      	movs	r2, #84	; 0x54
 8001960:	2101      	movs	r1, #1
 8001962:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff fd01 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d000      	beq.n	8001974 <HAL_ADC_ConfigChannel+0x3c>
 8001972:	e1a3      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d100      	bne.n	800197e <HAL_ADC_ConfigChannel+0x46>
 800197c:	e143      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	429a      	cmp	r2, r3
 8001988:	d004      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800198e:	4ac1      	ldr	r2, [pc, #772]	; (8001c94 <HAL_ADC_ConfigChannel+0x35c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d108      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0019      	movs	r1, r3
 800199e:	0010      	movs	r0, r2
 80019a0:	f7ff fc14 	bl	80011cc <LL_ADC_REG_SetSequencerChAdd>
 80019a4:	e0c9      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	211f      	movs	r1, #31
 80019b0:	400b      	ands	r3, r1
 80019b2:	210f      	movs	r1, #15
 80019b4:	4099      	lsls	r1, r3
 80019b6:	000b      	movs	r3, r1
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	035b      	lsls	r3, r3, #13
 80019c4:	0b5b      	lsrs	r3, r3, #13
 80019c6:	d105      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x9c>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0e9b      	lsrs	r3, r3, #26
 80019ce:	221f      	movs	r2, #31
 80019d0:	4013      	ands	r3, r2
 80019d2:	e098      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	d000      	beq.n	80019e0 <HAL_ADC_ConfigChannel+0xa8>
 80019de:	e091      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1cc>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d000      	beq.n	80019ec <HAL_ADC_ConfigChannel+0xb4>
 80019ea:	e089      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x1c8>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2204      	movs	r2, #4
 80019f2:	4013      	ands	r3, r2
 80019f4:	d000      	beq.n	80019f8 <HAL_ADC_ConfigChannel+0xc0>
 80019f6:	e081      	b.n	8001afc <HAL_ADC_ConfigChannel+0x1c4>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2208      	movs	r2, #8
 80019fe:	4013      	ands	r3, r2
 8001a00:	d000      	beq.n	8001a04 <HAL_ADC_ConfigChannel+0xcc>
 8001a02:	e079      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x1c0>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2210      	movs	r2, #16
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d000      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0xd8>
 8001a0e:	e071      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x1bc>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2220      	movs	r2, #32
 8001a16:	4013      	ands	r3, r2
 8001a18:	d000      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0xe4>
 8001a1a:	e069      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1b8>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	4013      	ands	r3, r2
 8001a24:	d000      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0xf0>
 8001a26:	e061      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1b4>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d000      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0xfc>
 8001a32:	e059      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x1b0>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d151      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1ac>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d149      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1a8>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4013      	ands	r3, r2
 8001a56:	d141      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1a4>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	d139      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1a0>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	015b      	lsls	r3, r3, #5
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d131      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x19c>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	019b      	lsls	r3, r3, #6
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d129      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x198>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	01db      	lsls	r3, r3, #7
 8001a84:	4013      	ands	r3, r2
 8001a86:	d121      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x194>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	4013      	ands	r3, r2
 8001a92:	d119      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x190>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d111      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x18c>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	029b      	lsls	r3, r3, #10
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x188>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	02db      	lsls	r3, r3, #11
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d001      	beq.n	8001abc <HAL_ADC_ConfigChannel+0x184>
 8001ab8:	2312      	movs	r3, #18
 8001aba:	e024      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001abc:	2300      	movs	r3, #0
 8001abe:	e022      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ac0:	2311      	movs	r3, #17
 8001ac2:	e020      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	e01e      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ac8:	230f      	movs	r3, #15
 8001aca:	e01c      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001acc:	230e      	movs	r3, #14
 8001ace:	e01a      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ad0:	230d      	movs	r3, #13
 8001ad2:	e018      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	e016      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ad8:	230b      	movs	r3, #11
 8001ada:	e014      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001adc:	230a      	movs	r3, #10
 8001ade:	e012      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ae0:	2309      	movs	r3, #9
 8001ae2:	e010      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	e00e      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ae8:	2307      	movs	r3, #7
 8001aea:	e00c      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001aec:	2306      	movs	r3, #6
 8001aee:	e00a      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001af0:	2305      	movs	r3, #5
 8001af2:	e008      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001af4:	2304      	movs	r3, #4
 8001af6:	e006      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001af8:	2303      	movs	r3, #3
 8001afa:	e004      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e002      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1ce>
 8001b04:	2300      	movs	r3, #0
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	6852      	ldr	r2, [r2, #4]
 8001b0a:	201f      	movs	r0, #31
 8001b0c:	4002      	ands	r2, r0
 8001b0e:	4093      	lsls	r3, r2
 8001b10:	000a      	movs	r2, r1
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d808      	bhi.n	8001b3a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	001a      	movs	r2, r3
 8001b36:	f7ff fb29 	bl	800118c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	001a      	movs	r2, r3
 8001b48:	f7ff fb64 	bl	8001214 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db00      	blt.n	8001b56 <HAL_ADC_ConfigChannel+0x21e>
 8001b54:	e0bc      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_ADC_ConfigChannel+0x360>)
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff fac5 	bl	80010e8 <LL_ADC_GetCommonPathInternalCh>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a4d      	ldr	r2, [pc, #308]	; (8001c9c <HAL_ADC_ConfigChannel+0x364>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d122      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b74:	d11d      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	0412      	lsls	r2, r2, #16
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	4a46      	ldr	r2, [pc, #280]	; (8001c98 <HAL_ADC_ConfigChannel+0x360>)
 8001b80:	0019      	movs	r1, r3
 8001b82:	0010      	movs	r0, r2
 8001b84:	f7ff fa9c 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b88:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <HAL_ADC_ConfigChannel+0x368>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4945      	ldr	r1, [pc, #276]	; (8001ca4 <HAL_ADC_ConfigChannel+0x36c>)
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7fe fab6 	bl	8000100 <__udivsi3>
 8001b94:	0003      	movs	r3, r0
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	0013      	movs	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	189b      	adds	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ba2:	e002      	b.n	8001baa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f9      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bb0:	e08e      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a3c      	ldr	r2, [pc, #240]	; (8001ca8 <HAL_ADC_ConfigChannel+0x370>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d10e      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	045b      	lsls	r3, r3, #17
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d109      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	0452      	lsls	r2, r2, #17
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_ADC_ConfigChannel+0x360>)
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	f7ff fa74 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
 8001bd8:	e07a      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a33      	ldr	r2, [pc, #204]	; (8001cac <HAL_ADC_ConfigChannel+0x374>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d000      	beq.n	8001be6 <HAL_ADC_ConfigChannel+0x2ae>
 8001be4:	e074      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	03db      	lsls	r3, r3, #15
 8001bec:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001bee:	d000      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0x2ba>
 8001bf0:	e06e      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	03d2      	lsls	r2, r2, #15
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <HAL_ADC_ConfigChannel+0x360>)
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	0010      	movs	r0, r2
 8001c00:	f7ff fa5e 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
 8001c04:	e064      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_ADC_ConfigChannel+0x35c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d107      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f7ff fae1 	bl	80011ee <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da4d      	bge.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_ADC_ConfigChannel+0x360>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff fa56 	bl	80010e8 <LL_ADC_GetCommonPathInternalCh>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <HAL_ADC_ConfigChannel+0x364>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d108      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_ADC_ConfigChannel+0x378>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_ADC_ConfigChannel+0x360>)
 8001c52:	0019      	movs	r1, r3
 8001c54:	0010      	movs	r0, r2
 8001c56:	f7ff fa33 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
 8001c5a:	e039      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_ADC_ConfigChannel+0x370>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d108      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_ADC_ConfigChannel+0x37c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_ADC_ConfigChannel+0x360>)
 8001c6e:	0019      	movs	r1, r3
 8001c70:	0010      	movs	r0, r2
 8001c72:	f7ff fa25 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
 8001c76:	e02b      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_ADC_ConfigChannel+0x374>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d126      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <HAL_ADC_ConfigChannel+0x380>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_ADC_ConfigChannel+0x360>)
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	0010      	movs	r0, r2
 8001c8e:	f7ff fa17 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
 8001c92:	e01d      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x398>
 8001c94:	80000004 	.word	0x80000004
 8001c98:	40012708 	.word	0x40012708
 8001c9c:	b0001000 	.word	0xb0001000
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	00030d40 	.word	0x00030d40
 8001ca8:	b8004000 	.word	0xb8004000
 8001cac:	b4002000 	.word	0xb4002000
 8001cb0:	ff7fffff 	.word	0xff7fffff
 8001cb4:	feffffff 	.word	0xfeffffff
 8001cb8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cc8:	2317      	movs	r3, #23
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2254      	movs	r2, #84	; 0x54
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001cd8:	2317      	movs	r3, #23
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781b      	ldrb	r3, [r3, #0]
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b006      	add	sp, #24
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)

08001ce8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fb3b 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 8001cfa:	1e03      	subs	r3, r0, #0
 8001cfc:	d031      	beq.n	8001d62 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff faff 	bl	8001306 <LL_ADC_IsDisableOngoing>
 8001d08:	1e03      	subs	r3, r0, #0
 8001d0a:	d104      	bne.n	8001d16 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff fb1b 	bl	800134c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d16:	f7ff f9a5 	bl	8001064 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d1e:	e01a      	b.n	8001d56 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d20:	f7ff f9a0 	bl	8001064 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d913      	bls.n	8001d56 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2204      	movs	r2, #4
 8001d36:	4013      	ands	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	2210      	movs	r2, #16
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e006      	b.n	8001d64 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1de      	bne.n	8001d20 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b004      	add	sp, #16
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff fab1 	bl	80012e4 <LL_ADC_IsEnabled>
 8001d82:	1e03      	subs	r3, r0, #0
 8001d84:	d000      	beq.n	8001d88 <ADC_Enable+0x1c>
 8001d86:	e069      	b.n	8001e5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4a36      	ldr	r2, [pc, #216]	; (8001e68 <ADC_Enable+0xfc>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	2210      	movs	r2, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2201      	movs	r2, #1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e056      	b.n	8001e5e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fa71 	bl	800129c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <ADC_Enable+0x100>)
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff f993 	bl	80010e8 <LL_ADC_GetCommonPathInternalCh>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d00f      	beq.n	8001dec <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <ADC_Enable+0x104>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4928      	ldr	r1, [pc, #160]	; (8001e74 <ADC_Enable+0x108>)
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7fe f994 	bl	8000100 <__udivsi3>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001ddc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dde:	e002      	b.n	8001de6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7e5b      	ldrb	r3, [r3, #25]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d033      	beq.n	8001e5c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001df4:	f7ff f936 	bl	8001064 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dfc:	e027      	b.n	8001e4e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7ff fa6e 	bl	80012e4 <LL_ADC_IsEnabled>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d104      	bne.n	8001e16 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff fa43 	bl	800129c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e16:	f7ff f925 	bl	8001064 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d914      	bls.n	8001e4e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d00d      	beq.n	8001e4e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	2210      	movs	r2, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2201      	movs	r2, #1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e007      	b.n	8001e5e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d1d0      	bne.n	8001dfe <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b004      	add	sp, #16
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	80000017 	.word	0x80000017
 8001e6c:	40012708 	.word	0x40012708
 8001e70:	2000000c 	.word	0x2000000c
 8001e74:	00030d40 	.word	0x00030d40

08001e78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff fa3e 	bl	8001306 <LL_ADC_IsDisableOngoing>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0018      	movs	r0, r3
 8001e94:	f7ff fa26 	bl	80012e4 <LL_ADC_IsEnabled>
 8001e98:	1e03      	subs	r3, r0, #0
 8001e9a:	d046      	beq.n	8001f2a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d143      	bne.n	8001f2a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2205      	movs	r2, #5
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d10d      	bne.n	8001ecc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fa03 	bl	80012c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ec2:	f7ff f8cf 	bl	8001064 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001eca:	e028      	b.n	8001f1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2201      	movs	r2, #1
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e021      	b.n	8001f2c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ee8:	f7ff f8bc 	bl	8001064 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d913      	bls.n	8001f1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	2210      	movs	r2, #16
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2201      	movs	r2, #1
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e006      	b.n	8001f2c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d1de      	bne.n	8001ee8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b004      	add	sp, #16
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	1dfb      	adds	r3, r7, #7
 8001f40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b7f      	cmp	r3, #127	; 0x7f
 8001f48:	d828      	bhi.n	8001f9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <__NVIC_SetPriority+0xd4>)
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	33c0      	adds	r3, #192	; 0xc0
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	589b      	ldr	r3, [r3, r2]
 8001f5a:	1dfa      	adds	r2, r7, #7
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	0011      	movs	r1, r2
 8001f60:	2203      	movs	r2, #3
 8001f62:	400a      	ands	r2, r1
 8001f64:	00d2      	lsls	r2, r2, #3
 8001f66:	21ff      	movs	r1, #255	; 0xff
 8001f68:	4091      	lsls	r1, r2
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	43d2      	mvns	r2, r2
 8001f6e:	401a      	ands	r2, r3
 8001f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	22ff      	movs	r2, #255	; 0xff
 8001f78:	401a      	ands	r2, r3
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	2303      	movs	r3, #3
 8001f82:	4003      	ands	r3, r0
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f88:	481f      	ldr	r0, [pc, #124]	; (8002008 <__NVIC_SetPriority+0xd4>)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	430a      	orrs	r2, r1
 8001f94:	33c0      	adds	r3, #192	; 0xc0
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f9a:	e031      	b.n	8002000 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f9c:	4a1b      	ldr	r2, [pc, #108]	; (800200c <__NVIC_SetPriority+0xd8>)
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	3b08      	subs	r3, #8
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3306      	adds	r3, #6
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	18d3      	adds	r3, r2, r3
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	1dfa      	adds	r2, r7, #7
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	0011      	movs	r1, r2
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	00d2      	lsls	r2, r2, #3
 8001fc2:	21ff      	movs	r1, #255	; 0xff
 8001fc4:	4091      	lsls	r1, r2
 8001fc6:	000a      	movs	r2, r1
 8001fc8:	43d2      	mvns	r2, r2
 8001fca:	401a      	ands	r2, r3
 8001fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	0018      	movs	r0, r3
 8001fdc:	2303      	movs	r3, #3
 8001fde:	4003      	ands	r3, r0
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <__NVIC_SetPriority+0xd8>)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	001c      	movs	r4, r3
 8001fec:	230f      	movs	r3, #15
 8001fee:	4023      	ands	r3, r4
 8001ff0:	3b08      	subs	r3, #8
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	18c3      	adds	r3, r0, r3
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	601a      	str	r2, [r3, #0]
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b003      	add	sp, #12
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	045b      	lsls	r3, r3, #17
 8002020:	429a      	cmp	r2, r3
 8002022:	d301      	bcc.n	8002028 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002024:	2301      	movs	r3, #1
 8002026:	e010      	b.n	800204a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <SysTick_Config+0x44>)
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	3a01      	subs	r2, #1
 800202e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002030:	2301      	movs	r3, #1
 8002032:	425b      	negs	r3, r3
 8002034:	2103      	movs	r1, #3
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff ff7c 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x44>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x44>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b002      	add	sp, #8
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	210f      	movs	r1, #15
 8002064:	187b      	adds	r3, r7, r1
 8002066:	1c02      	adds	r2, r0, #0
 8002068:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	187b      	adds	r3, r7, r1
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	0011      	movs	r1, r2
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff ff5d 	bl	8001f34 <__NVIC_SetPriority>
}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ffbf 	bl	8002010 <SysTick_Config>
 8002092:	0003      	movs	r3, r0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	e147      	b.n	800233c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4091      	lsls	r1, r2
 80020b6:	000a      	movs	r2, r1
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d100      	bne.n	80020c4 <HAL_GPIO_Init+0x28>
 80020c2:	e138      	b.n	8002336 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d005      	beq.n	80020dc <HAL_GPIO_Init+0x40>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d130      	bne.n	800213e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	409a      	lsls	r2, r3
 80020ea:	0013      	movs	r3, r2
 80020ec:	43da      	mvns	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	409a      	lsls	r2, r3
 80020fe:	0013      	movs	r3, r2
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002112:	2201      	movs	r2, #1
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	2201      	movs	r2, #1
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	4013      	ands	r3, r2
 8002146:	2b03      	cmp	r3, #3
 8002148:	d017      	beq.n	800217a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	409a      	lsls	r2, r3
 8002158:	0013      	movs	r3, r2
 800215a:	43da      	mvns	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	4013      	ands	r3, r2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d123      	bne.n	80021ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	58d3      	ldr	r3, [r2, r3]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2207      	movs	r2, #7
 8002198:	4013      	ands	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	43da      	mvns	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2107      	movs	r1, #7
 80021b2:	400b      	ands	r3, r1
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	409a      	lsls	r2, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	6939      	ldr	r1, [r7, #16]
 80021cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	43da      	mvns	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2203      	movs	r2, #3
 80021ec:	401a      	ands	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	23c0      	movs	r3, #192	; 0xc0
 8002208:	029b      	lsls	r3, r3, #10
 800220a:	4013      	ands	r3, r2
 800220c:	d100      	bne.n	8002210 <HAL_GPIO_Init+0x174>
 800220e:	e092      	b.n	8002336 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3318      	adds	r3, #24
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	589b      	ldr	r3, [r3, r2]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2203      	movs	r2, #3
 8002222:	4013      	ands	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	220f      	movs	r2, #15
 8002228:	409a      	lsls	r2, r3
 800222a:	0013      	movs	r3, r2
 800222c:	43da      	mvns	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	23a0      	movs	r3, #160	; 0xa0
 8002238:	05db      	lsls	r3, r3, #23
 800223a:	429a      	cmp	r2, r3
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x1ca>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a45      	ldr	r2, [pc, #276]	; (8002358 <HAL_GPIO_Init+0x2bc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x1c6>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a44      	ldr	r2, [pc, #272]	; (800235c <HAL_GPIO_Init+0x2c0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x1c2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_GPIO_Init+0x2c4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x1be>
 8002256:	2303      	movs	r3, #3
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x1cc>
 800225a:	2305      	movs	r3, #5
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x1cc>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x1cc>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x1cc>
 8002266:	2300      	movs	r3, #0
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	2103      	movs	r1, #3
 800226c:	400a      	ands	r2, r1
 800226e:	00d2      	lsls	r2, r2, #3
 8002270:	4093      	lsls	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002278:	4936      	ldr	r1, [pc, #216]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3318      	adds	r3, #24
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43da      	mvns	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	035b      	lsls	r3, r3, #13
 800229e:	4013      	ands	r3, r2
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	039b      	lsls	r3, r3, #14
 80022c8:	4013      	ands	r3, r2
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022d4:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022da:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 80022dc:	2384      	movs	r3, #132	; 0x84
 80022de:	58d3      	ldr	r3, [r2, r3]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	029b      	lsls	r3, r3, #10
 80022f4:	4013      	ands	r3, r2
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002300:	4914      	ldr	r1, [pc, #80]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 8002302:	2284      	movs	r2, #132	; 0x84
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	58d3      	ldr	r3, [r2, r3]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43da      	mvns	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	025b      	lsls	r3, r3, #9
 8002322:	4013      	ands	r3, r2
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800232e:	4909      	ldr	r1, [pc, #36]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	40da      	lsrs	r2, r3
 8002344:	1e13      	subs	r3, r2, #0
 8002346:	d000      	beq.n	800234a <HAL_GPIO_Init+0x2ae>
 8002348:	e6b0      	b.n	80020ac <HAL_GPIO_Init+0x10>
  }
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b006      	add	sp, #24
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021800 	.word	0x40021800
 8002358:	50000400 	.word	0x50000400
 800235c:	50000800 	.word	0x50000800
 8002360:	50000c00 	.word	0x50000c00

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	0008      	movs	r0, r1
 800236e:	0011      	movs	r1, r2
 8002370:	1cbb      	adds	r3, r7, #2
 8002372:	1c02      	adds	r2, r0, #0
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	1c7b      	adds	r3, r7, #1
 8002378:	1c0a      	adds	r2, r1, #0
 800237a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237c:	1c7b      	adds	r3, r7, #1
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002384:	1cbb      	adds	r3, r7, #2
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800238e:	1cbb      	adds	r3, r7, #2
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d11f      	bne.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	0013      	movs	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	189b      	adds	r3, r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4912      	ldr	r1, [pc, #72]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7fd fe94 	bl	8000100 <__udivsi3>
 80023d8:	0003      	movs	r3, r0
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023de:	e008      	b.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e001      	b.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e009      	b.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	401a      	ands	r2, r3
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	429a      	cmp	r2, r3
 8002402:	d0ed      	beq.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b004      	add	sp, #16
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40007000 	.word	0x40007000
 8002414:	fffff9ff 	.word	0xfffff9ff
 8002418:	2000000c 	.word	0x2000000c
 800241c:	000f4240 	.word	0x000f4240

08002420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e2f3      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2201      	movs	r2, #1
 8002438:	4013      	ands	r3, r2
 800243a:	d100      	bne.n	800243e <HAL_RCC_OscConfig+0x1e>
 800243c:	e07c      	b.n	8002538 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	4bc3      	ldr	r3, [pc, #780]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2238      	movs	r2, #56	; 0x38
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	4bc0      	ldr	r3, [pc, #768]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2203      	movs	r2, #3
 800244e:	4013      	ands	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b10      	cmp	r3, #16
 8002456:	d102      	bne.n	800245e <HAL_RCC_OscConfig+0x3e>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d002      	beq.n	8002464 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d10b      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	4bb9      	ldr	r3, [pc, #740]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	4013      	ands	r3, r2
 800246e:	d062      	beq.n	8002536 <HAL_RCC_OscConfig+0x116>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d15e      	bne.n	8002536 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e2ce      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	025b      	lsls	r3, r3, #9
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x78>
 8002488:	4bb0      	ldr	r3, [pc, #704]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4baf      	ldr	r3, [pc, #700]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	0249      	lsls	r1, r1, #9
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e020      	b.n	80024da <HAL_RCC_OscConfig+0xba>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	23a0      	movs	r3, #160	; 0xa0
 800249e:	02db      	lsls	r3, r3, #11
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d10e      	bne.n	80024c2 <HAL_RCC_OscConfig+0xa2>
 80024a4:	4ba9      	ldr	r3, [pc, #676]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4ba8      	ldr	r3, [pc, #672]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	02c9      	lsls	r1, r1, #11
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	4ba6      	ldr	r3, [pc, #664]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4ba5      	ldr	r3, [pc, #660]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0249      	lsls	r1, r1, #9
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e00b      	b.n	80024da <HAL_RCC_OscConfig+0xba>
 80024c2:	4ba2      	ldr	r3, [pc, #648]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4ba1      	ldr	r3, [pc, #644]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80024c8:	49a1      	ldr	r1, [pc, #644]	; (8002750 <HAL_RCC_OscConfig+0x330>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	4b9f      	ldr	r3, [pc, #636]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4b9e      	ldr	r3, [pc, #632]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80024d4:	499f      	ldr	r1, [pc, #636]	; (8002754 <HAL_RCC_OscConfig+0x334>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d014      	beq.n	800250c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fdbf 	bl	8001064 <HAL_GetTick>
 80024e6:	0003      	movs	r3, r0
 80024e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7fe fdba 	bl	8001064 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e28d      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fe:	4b93      	ldr	r3, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	029b      	lsls	r3, r3, #10
 8002506:	4013      	ands	r3, r2
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0xcc>
 800250a:	e015      	b.n	8002538 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe fdaa 	bl	8001064 <HAL_GetTick>
 8002510:	0003      	movs	r3, r0
 8002512:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002516:	f7fe fda5 	bl	8001064 <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b64      	cmp	r3, #100	; 0x64
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e278      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002528:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	029b      	lsls	r3, r3, #10
 8002530:	4013      	ands	r3, r2
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0xf6>
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002536:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d100      	bne.n	8002544 <HAL_RCC_OscConfig+0x124>
 8002542:	e099      	b.n	8002678 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2238      	movs	r2, #56	; 0x38
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800254e:	4b7f      	ldr	r3, [pc, #508]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2203      	movs	r2, #3
 8002554:	4013      	ands	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b10      	cmp	r3, #16
 800255c:	d102      	bne.n	8002564 <HAL_RCC_OscConfig+0x144>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d002      	beq.n	800256a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d135      	bne.n	80025d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256a:	4b78      	ldr	r3, [pc, #480]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4013      	ands	r3, r2
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x162>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e24b      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b72      	ldr	r3, [pc, #456]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a74      	ldr	r2, [pc, #464]	; (8002758 <HAL_RCC_OscConfig+0x338>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	021a      	lsls	r2, r3, #8
 8002592:	4b6e      	ldr	r3, [pc, #440]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d112      	bne.n	80025c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800259e:	4b6b      	ldr	r3, [pc, #428]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6e      	ldr	r2, [pc, #440]	; (800275c <HAL_RCC_OscConfig+0x33c>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025b2:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0adb      	lsrs	r3, r3, #11
 80025b8:	2207      	movs	r2, #7
 80025ba:	4013      	ands	r3, r2
 80025bc:	4a68      	ldr	r2, [pc, #416]	; (8002760 <HAL_RCC_OscConfig+0x340>)
 80025be:	40da      	lsrs	r2, r3
 80025c0:	4b68      	ldr	r3, [pc, #416]	; (8002764 <HAL_RCC_OscConfig+0x344>)
 80025c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025c4:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCC_OscConfig+0x348>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7fe fcef 	bl	8000fac <HAL_InitTick>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d051      	beq.n	8002676 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e221      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d030      	beq.n	8002640 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025de:	4b5b      	ldr	r3, [pc, #364]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5e      	ldr	r2, [pc, #376]	; (800275c <HAL_RCC_OscConfig+0x33c>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025f2:	4b56      	ldr	r3, [pc, #344]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b55      	ldr	r3, [pc, #340]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0049      	lsls	r1, r1, #1
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fd30 	bl	8001064 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe fd2b 	bl	8001064 <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1fe      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4013      	ands	r3, r2
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b48      	ldr	r3, [pc, #288]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a4a      	ldr	r2, [pc, #296]	; (8002758 <HAL_RCC_OscConfig+0x338>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	4b44      	ldr	r3, [pc, #272]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e01b      	b.n	8002678 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002640:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002646:	4949      	ldr	r1, [pc, #292]	; (800276c <HAL_RCC_OscConfig+0x34c>)
 8002648:	400a      	ands	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fd0a 	bl	8001064 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7fe fd05 	bl	8001064 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1d8      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4013      	ands	r3, r2
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x236>
 8002674:	e000      	b.n	8002678 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002676:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2208      	movs	r2, #8
 800267e:	4013      	ands	r3, r2
 8002680:	d047      	beq.n	8002712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002682:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2238      	movs	r2, #56	; 0x38
 8002688:	4013      	ands	r3, r2
 800268a:	2b18      	cmp	r3, #24
 800268c:	d10a      	bne.n	80026a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	2202      	movs	r2, #2
 8002694:	4013      	ands	r3, r2
 8002696:	d03c      	beq.n	8002712 <HAL_RCC_OscConfig+0x2f2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d138      	bne.n	8002712 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e1ba      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d019      	beq.n	80026e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80026ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026b0:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	430a      	orrs	r2, r1
 80026b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fcd4 	bl	8001064 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c2:	f7fe fccf 	bl	8001064 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1a2      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	2202      	movs	r2, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d0f1      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2a2>
 80026de:	e018      	b.n	8002712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80026e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe fcba 	bl	8001064 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fcb5 	bl	8001064 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e188      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d1f1      	bne.n	80026f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	d100      	bne.n	800271e <HAL_RCC_OscConfig+0x2fe>
 800271c:	e0c6      	b.n	80028ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	231f      	movs	r3, #31
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2238      	movs	r2, #56	; 0x38
 800272c:	4013      	ands	r3, r2
 800272e:	2b20      	cmp	r3, #32
 8002730:	d11e      	bne.n	8002770 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x32c>)
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	2202      	movs	r2, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d100      	bne.n	800273e <HAL_RCC_OscConfig+0x31e>
 800273c:	e0b6      	b.n	80028ac <HAL_RCC_OscConfig+0x48c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d000      	beq.n	8002748 <HAL_RCC_OscConfig+0x328>
 8002746:	e0b1      	b.n	80028ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e166      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
 800274c:	40021000 	.word	0x40021000
 8002750:	fffeffff 	.word	0xfffeffff
 8002754:	fffbffff 	.word	0xfffbffff
 8002758:	ffff80ff 	.word	0xffff80ff
 800275c:	ffffc7ff 	.word	0xffffc7ff
 8002760:	00f42400 	.word	0x00f42400
 8002764:	2000000c 	.word	0x2000000c
 8002768:	20000010 	.word	0x20000010
 800276c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002770:	4bac      	ldr	r3, [pc, #688]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	055b      	lsls	r3, r3, #21
 8002778:	4013      	ands	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_RCC_OscConfig+0x360>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x362>
 8002780:	2300      	movs	r3, #0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d011      	beq.n	80027aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4ba7      	ldr	r3, [pc, #668]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800278a:	4ba6      	ldr	r3, [pc, #664]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	0549      	lsls	r1, r1, #21
 8002790:	430a      	orrs	r2, r1
 8002792:	63da      	str	r2, [r3, #60]	; 0x3c
 8002794:	4ba3      	ldr	r3, [pc, #652]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	055b      	lsls	r3, r3, #21
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027a2:	231f      	movs	r3, #31
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027aa:	4b9f      	ldr	r3, [pc, #636]	; (8002a28 <HAL_RCC_OscConfig+0x608>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	d11a      	bne.n	80027ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b6:	4b9c      	ldr	r3, [pc, #624]	; (8002a28 <HAL_RCC_OscConfig+0x608>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b9b      	ldr	r3, [pc, #620]	; (8002a28 <HAL_RCC_OscConfig+0x608>)
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0049      	lsls	r1, r1, #1
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80027c4:	f7fe fc4e 	bl	8001064 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fc49 	bl	8001064 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e11c      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e0:	4b91      	ldr	r3, [pc, #580]	; (8002a28 <HAL_RCC_OscConfig+0x608>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4013      	ands	r3, r2
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x3e2>
 80027f4:	4b8b      	ldr	r3, [pc, #556]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80027f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027f8:	4b8a      	ldr	r3, [pc, #552]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	430a      	orrs	r2, r1
 80027fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002800:	e01c      	b.n	800283c <HAL_RCC_OscConfig+0x41c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b05      	cmp	r3, #5
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x404>
 800280a:	4b86      	ldr	r3, [pc, #536]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800280c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002810:	2104      	movs	r1, #4
 8002812:	430a      	orrs	r2, r1
 8002814:	65da      	str	r2, [r3, #92]	; 0x5c
 8002816:	4b83      	ldr	r3, [pc, #524]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002818:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	65da      	str	r2, [r3, #92]	; 0x5c
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0x41c>
 8002824:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002826:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800282a:	2101      	movs	r1, #1
 800282c:	438a      	bics	r2, r1
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002830:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002834:	4b7b      	ldr	r3, [pc, #492]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002836:	2104      	movs	r1, #4
 8002838:	438a      	bics	r2, r1
 800283a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d014      	beq.n	800286e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fc0e 	bl	8001064 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284c:	e009      	b.n	8002862 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fc09 	bl	8001064 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4a74      	ldr	r2, [pc, #464]	; (8002a2c <HAL_RCC_OscConfig+0x60c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e0db      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002862:	4b70      	ldr	r3, [pc, #448]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2202      	movs	r2, #2
 8002868:	4013      	ands	r3, r2
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x42e>
 800286c:	e013      	b.n	8002896 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fe fbf9 	bl	8001064 <HAL_GetTick>
 8002872:	0003      	movs	r3, r0
 8002874:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002876:	e009      	b.n	800288c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe fbf4 	bl	8001064 <HAL_GetTick>
 800287c:	0002      	movs	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <HAL_RCC_OscConfig+0x60c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0c6      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800288c:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	2202      	movs	r2, #2
 8002892:	4013      	ands	r3, r2
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002896:	231f      	movs	r3, #31
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028a0:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80028a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a4:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80028a6:	4962      	ldr	r1, [pc, #392]	; (8002a30 <HAL_RCC_OscConfig+0x610>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d100      	bne.n	80028b6 <HAL_RCC_OscConfig+0x496>
 80028b4:	e0b0      	b.n	8002a18 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2238      	movs	r2, #56	; 0x38
 80028bc:	4013      	ands	r3, r2
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d100      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4a4>
 80028c2:	e078      	b.n	80029b6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d153      	bne.n	8002974 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b55      	ldr	r3, [pc, #340]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80028d2:	4958      	ldr	r1, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x614>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fbc4 	bl	8001064 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fbbf 	bl	8001064 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e092      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	049b      	lsls	r3, r3, #18
 80028fc:	4013      	ands	r3, r2
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a4c      	ldr	r2, [pc, #304]	; (8002a38 <HAL_RCC_OscConfig+0x618>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1a      	ldr	r2, [r3, #32]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	431a      	orrs	r2, r3
 8002928:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800292a:	430a      	orrs	r2, r1
 800292c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0449      	lsls	r1, r1, #17
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800293c:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	0549      	lsls	r1, r1, #21
 8002946:	430a      	orrs	r2, r1
 8002948:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fb8b 	bl	8001064 <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fb86 	bl	8001064 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e059      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	049b      	lsls	r3, r3, #18
 800296e:	4013      	ands	r3, r2
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x534>
 8002972:	e051      	b.n	8002a18 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800297a:	492e      	ldr	r1, [pc, #184]	; (8002a34 <HAL_RCC_OscConfig+0x614>)
 800297c:	400a      	ands	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fb70 	bl	8001064 <HAL_GetTick>
 8002984:	0003      	movs	r3, r0
 8002986:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe fb6b 	bl	8001064 <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e03e      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	049b      	lsls	r3, r3, #18
 80029a4:	4013      	ands	r3, r2
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80029a8:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80029ae:	4923      	ldr	r1, [pc, #140]	; (8002a3c <HAL_RCC_OscConfig+0x61c>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	e030      	b.n	8002a18 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e02b      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_RCC_OscConfig+0x604>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2203      	movs	r2, #3
 80029cc:	401a      	ands	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d11e      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2270      	movs	r2, #112	; 0x70
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d117      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	23fe      	movs	r3, #254	; 0xfe
 80029e8:	01db      	lsls	r3, r3, #7
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10e      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	23f8      	movs	r3, #248	; 0xf8
 80029fa:	039b      	lsls	r3, r3, #14
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	0f5b      	lsrs	r3, r3, #29
 8002a0a:	075a      	lsls	r2, r3, #29
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b008      	add	sp, #32
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	00001388 	.word	0x00001388
 8002a30:	efffffff 	.word	0xefffffff
 8002a34:	feffffff 	.word	0xfeffffff
 8002a38:	1fc1808c 	.word	0x1fc1808c
 8002a3c:	effefffc 	.word	0xeffefffc

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0e9      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2207      	movs	r2, #7
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d91e      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2207      	movs	r2, #7
 8002a68:	4393      	bics	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a74:	f7fe faf6 	bl	8001064 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a7c:	e009      	b.n	8002a92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7e:	f7fe faf1 	bl	8001064 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_RCC_ClockConfig+0x1f4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0ca      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a92:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2207      	movs	r2, #7
 8002a98:	4013      	ands	r3, r2
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d006      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ab4:	4b60      	ldr	r3, [pc, #384]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002aba:	21e0      	movs	r1, #224	; 0xe0
 8002abc:	01c9      	lsls	r1, r1, #7
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4a5d      	ldr	r2, [pc, #372]	; (8002c3c <HAL_RCC_ClockConfig+0x1fc>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	d057      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	4013      	ands	r3, r2
 8002af2:	d12b      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e097      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b00:	4b4d      	ldr	r3, [pc, #308]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	049b      	lsls	r3, r3, #18
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d11f      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e08b      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4013      	ands	r3, r2
 8002b22:	d113      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e07f      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d108      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e074      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e06d      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b4c:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2207      	movs	r2, #7
 8002b52:	4393      	bics	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b60:	f7fe fa80 	bl	8001064 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6a:	f7fe fa7b 	bl	8001064 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <HAL_RCC_ClockConfig+0x1f4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e054      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2238      	movs	r2, #56	; 0x38
 8002b84:	401a      	ands	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1ec      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2207      	movs	r2, #7
 8002b96:	4013      	ands	r3, r2
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d21e      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fa58 	bl	8001064 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bb8:	e009      	b.n	8002bce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bba:	f7fe fa53 	bl	8001064 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e02c      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1ee      	bne.n	8002bba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2204      	movs	r2, #4
 8002be2:	4013      	ands	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <HAL_RCC_ClockConfig+0x200>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bfa:	f000 f829 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002bfe:	0001      	movs	r1, r0
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCC_ClockConfig+0x204>)
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	58d3      	ldr	r3, [r2, r3]
 8002c10:	221f      	movs	r2, #31
 8002c12:	4013      	ands	r3, r2
 8002c14:	000a      	movs	r2, r1
 8002c16:	40da      	lsrs	r2, r3
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x208>)
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x20c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7fe f9c3 	bl	8000fac <HAL_InitTick>
 8002c26:	0003      	movs	r3, r0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b004      	add	sp, #16
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40022000 	.word	0x40022000
 8002c34:	00001388 	.word	0x00001388
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	fffff0ff 	.word	0xfffff0ff
 8002c40:	ffff8fff 	.word	0xffff8fff
 8002c44:	08003f14 	.word	0x08003f14
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	20000010 	.word	0x20000010

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c56:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2238      	movs	r2, #56	; 0x38
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d10f      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c60:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0adb      	lsrs	r3, r3, #11
 8002c66:	2207      	movs	r2, #7
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	0013      	movs	r3, r2
 8002c70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c72:	6839      	ldr	r1, [r7, #0]
 8002c74:	4835      	ldr	r0, [pc, #212]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c76:	f7fd fa43 	bl	8000100 <__udivsi3>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e05d      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c80:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2238      	movs	r2, #56	; 0x38
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c8c:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e054      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2238      	movs	r2, #56	; 0x38
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b10      	cmp	r3, #16
 8002c9c:	d138      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	2207      	movs	r2, #7
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4824      	ldr	r0, [pc, #144]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cc0:	f7fd fa1e 	bl	8000100 <__udivsi3>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	227f      	movs	r2, #127	; 0x7f
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	434b      	muls	r3, r1
 8002cd4:	617b      	str	r3, [r7, #20]
        break;
 8002cd6:	e00d      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	481c      	ldr	r0, [pc, #112]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cdc:	f7fd fa10 	bl	8000100 <__udivsi3>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	227f      	movs	r2, #127	; 0x7f
 8002cec:	4013      	ands	r3, r2
 8002cee:	434b      	muls	r3, r1
 8002cf0:	617b      	str	r3, [r7, #20]
        break;
 8002cf2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0f5b      	lsrs	r3, r3, #29
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	3301      	adds	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	6978      	ldr	r0, [r7, #20]
 8002d06:	f7fd f9fb 	bl	8000100 <__udivsi3>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	e015      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2238      	movs	r2, #56	; 0x38
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d103      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2238      	movs	r2, #56	; 0x38
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b18      	cmp	r3, #24
 8002d2e:	d103      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d30:	23fa      	movs	r3, #250	; 0xfa
 8002d32:	01db      	lsls	r3, r3, #7
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	e001      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d3c:	693b      	ldr	r3, [r7, #16]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b006      	add	sp, #24
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	007a1200 	.word	0x007a1200

08002d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d5c:	2313      	movs	r3, #19
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d64:	2312      	movs	r3, #18
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	4013      	ands	r3, r2
 8002d76:	d100      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d78:	e0a3      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2011      	movs	r0, #17
 8002d7c:	183b      	adds	r3, r7, r0
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d82:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	055b      	lsls	r3, r3, #21
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d110      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d92:	4b7b      	ldr	r3, [pc, #492]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	0549      	lsls	r1, r1, #21
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d9c:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	055b      	lsls	r3, r3, #21
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	183b      	adds	r3, r7, r0
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db0:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b73      	ldr	r3, [pc, #460]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	0049      	lsls	r1, r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dbe:	f7fe f951 	bl	8001064 <HAL_GetTick>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc8:	f7fe f94c 	bl	8001064 <HAL_GetTick>
 8002dcc:	0002      	movs	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d904      	bls.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002dd6:	2313      	movs	r3, #19
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2203      	movs	r2, #3
 8002ddc:	701a      	strb	r2, [r3, #0]
        break;
 8002dde:	e005      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4013      	ands	r3, r2
 8002dea:	d0ed      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002dec:	2313      	movs	r3, #19
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d154      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002df6:	4b62      	ldr	r3, [pc, #392]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002df8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dfa:	23c0      	movs	r3, #192	; 0xc0
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d019      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d014      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e12:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	4a5c      	ldr	r2, [pc, #368]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e1c:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e20:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	0249      	lsls	r1, r1, #9
 8002e26:	430a      	orrs	r2, r1
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2a:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e2e:	4b54      	ldr	r3, [pc, #336]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e30:	4956      	ldr	r1, [pc, #344]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e36:	4b52      	ldr	r3, [pc, #328]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4013      	ands	r3, r2
 8002e42:	d016      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f90e 	bl	8001064 <HAL_GetTick>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4c:	e00c      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe f909 	bl	8001064 <HAL_GetTick>
 8002e52:	0002      	movs	r2, r0
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	4a4d      	ldr	r2, [pc, #308]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d904      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e5e:	2313      	movs	r3, #19
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	2203      	movs	r2, #3
 8002e64:	701a      	strb	r2, [r3, #0]
            break;
 8002e66:	e004      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e68:	4b45      	ldr	r3, [pc, #276]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d0ed      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e72:	2313      	movs	r3, #19
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7c:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	4a41      	ldr	r2, [pc, #260]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e90:	e00c      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e92:	2312      	movs	r3, #18
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2213      	movs	r2, #19
 8002e98:	18ba      	adds	r2, r7, r2
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e005      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	2312      	movs	r3, #18
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2213      	movs	r2, #19
 8002ea6:	18ba      	adds	r2, r7, r2
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eac:	2311      	movs	r3, #17
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb6:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ebc:	4935      	ldr	r1, [pc, #212]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ecc:	4b2c      	ldr	r3, [pc, #176]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4393      	bics	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002edc:	430a      	orrs	r2, r1
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	01db      	lsls	r3, r3, #7
 8002f06:	4013      	ands	r3, r2
 8002f08:	d015      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	0899      	lsrs	r1, r3, #2
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	05db      	lsls	r3, r3, #23
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	0249      	lsls	r1, r1, #9
 8002f32:	430a      	orrs	r2, r1
 8002f34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d016      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f52:	430a      	orrs	r2, r1
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	01db      	lsls	r3, r3, #7
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d106      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	0249      	lsls	r1, r1, #9
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f70:	2312      	movs	r3, #18
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	781b      	ldrb	r3, [r3, #0]
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b006      	add	sp, #24
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40007000 	.word	0x40007000
 8002f88:	fffffcff 	.word	0xfffffcff
 8002f8c:	fffeffff 	.word	0xfffeffff
 8002f90:	00001388 	.word	0x00001388
 8002f94:	efffffff 	.word	0xefffffff
 8002f98:	ffffcfff 	.word	0xffffcfff
 8002f9c:	ffff3fff 	.word	0xffff3fff

08002fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0a8      	b.n	8003104 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	2382      	movs	r3, #130	; 0x82
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d009      	beq.n	8002fda <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
 8002fcc:	e005      	b.n	8002fda <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	225d      	movs	r2, #93	; 0x5d
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d107      	bne.n	8002ffc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	225c      	movs	r2, #92	; 0x5c
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7fd fe6e 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	225d      	movs	r2, #93	; 0x5d
 8003000:	2102      	movs	r1, #2
 8003002:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2140      	movs	r1, #64	; 0x40
 8003010:	438a      	bics	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	23e0      	movs	r3, #224	; 0xe0
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	429a      	cmp	r2, r3
 800301e:	d902      	bls.n	8003026 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e002      	b.n	800302c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	015b      	lsls	r3, r3, #5
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	23f0      	movs	r3, #240	; 0xf0
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	429a      	cmp	r2, r3
 8003036:	d008      	beq.n	800304a <HAL_SPI_Init+0xaa>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	23e0      	movs	r3, #224	; 0xe0
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	429a      	cmp	r2, r3
 8003042:	d002      	beq.n	800304a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	2382      	movs	r3, #130	; 0x82
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	401a      	ands	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6899      	ldr	r1, [r3, #8]
 8003058:	2384      	movs	r3, #132	; 0x84
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	400b      	ands	r3, r1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2102      	movs	r1, #2
 8003066:	400b      	ands	r3, r1
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2101      	movs	r1, #1
 8003070:	400b      	ands	r3, r1
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6999      	ldr	r1, [r3, #24]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	400b      	ands	r3, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	2138      	movs	r1, #56	; 0x38
 8003086:	400b      	ands	r3, r1
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	400b      	ands	r3, r1
 8003092:	431a      	orrs	r2, r3
 8003094:	0011      	movs	r1, r2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	401a      	ands	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	2204      	movs	r2, #4
 80030b0:	401a      	ands	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2110      	movs	r1, #16
 80030b8:	400b      	ands	r3, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	2108      	movs	r1, #8
 80030c2:	400b      	ands	r3, r1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68d9      	ldr	r1, [r3, #12]
 80030ca:	23f0      	movs	r3, #240	; 0xf0
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	400b      	ands	r3, r1
 80030d0:	431a      	orrs	r2, r3
 80030d2:	0011      	movs	r1, r2
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	015b      	lsls	r3, r3, #5
 80030da:	401a      	ands	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4907      	ldr	r1, [pc, #28]	; (800310c <HAL_SPI_Init+0x16c>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	225d      	movs	r2, #93	; 0x5d
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b004      	add	sp, #16
 800310a:	bd80      	pop	{r7, pc}
 800310c:	fffff7ff 	.word	0xfffff7ff

08003110 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	001a      	movs	r2, r3
 800311e:	1cbb      	adds	r3, r7, #2
 8003120:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003122:	2301      	movs	r3, #1
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003126:	2323      	movs	r3, #35	; 0x23
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	225c      	movs	r2, #92	; 0x5c
 8003132:	5c9b      	ldrb	r3, [r3, r2]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_SPI_TransmitReceive+0x2c>
 8003138:	2302      	movs	r3, #2
 800313a:	e1b5      	b.n	80034a8 <HAL_SPI_TransmitReceive+0x398>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	225c      	movs	r2, #92	; 0x5c
 8003140:	2101      	movs	r1, #1
 8003142:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003144:	f7fd ff8e 	bl	8001064 <HAL_GetTick>
 8003148:	0003      	movs	r3, r0
 800314a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800314c:	201b      	movs	r0, #27
 800314e:	183b      	adds	r3, r7, r0
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	215d      	movs	r1, #93	; 0x5d
 8003154:	5c52      	ldrb	r2, [r2, r1]
 8003156:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800315e:	2312      	movs	r3, #18
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	1cba      	adds	r2, r7, #2
 8003164:	8812      	ldrh	r2, [r2, #0]
 8003166:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003168:	183b      	adds	r3, r7, r0
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d011      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x84>
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	2382      	movs	r3, #130	; 0x82
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	429a      	cmp	r2, r3
 8003178:	d107      	bne.n	800318a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_SPI_TransmitReceive+0x7a>
 8003182:	183b      	adds	r3, r7, r0
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b04      	cmp	r3, #4
 8003188:	d004      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800318a:	2323      	movs	r3, #35	; 0x23
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	2202      	movs	r2, #2
 8003190:	701a      	strb	r2, [r3, #0]
    goto error;
 8003192:	e17e      	b.n	8003492 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x98>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x98>
 80031a0:	1cbb      	adds	r3, r7, #2
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80031a8:	2323      	movs	r3, #35	; 0x23
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80031b0:	e16f      	b.n	8003492 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	225d      	movs	r2, #93	; 0x5d
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d003      	beq.n	80031c6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	225d      	movs	r2, #93	; 0x5d
 80031c2:	2105      	movs	r1, #5
 80031c4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1cba      	adds	r2, r7, #2
 80031d6:	2146      	movs	r1, #70	; 0x46
 80031d8:	8812      	ldrh	r2, [r2, #0]
 80031da:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1cba      	adds	r2, r7, #2
 80031e0:	2144      	movs	r1, #68	; 0x44
 80031e2:	8812      	ldrh	r2, [r2, #0]
 80031e4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1cba      	adds	r2, r7, #2
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1cba      	adds	r2, r7, #2
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	23e0      	movs	r3, #224	; 0xe0
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	49a4      	ldr	r1, [pc, #656]	; (80034b0 <HAL_SPI_TransmitReceive+0x3a0>)
 8003220:	400a      	ands	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	e008      	b.n	8003238 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	0149      	lsls	r1, r1, #5
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2240      	movs	r2, #64	; 0x40
 8003240:	4013      	ands	r3, r2
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d007      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	23e0      	movs	r3, #224	; 0xe0
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	429a      	cmp	r2, r3
 8003260:	d800      	bhi.n	8003264 <HAL_SPI_TransmitReceive+0x154>
 8003262:	e07f      	b.n	8003364 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x168>
 800326c:	2312      	movs	r3, #18
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d000      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x168>
 8003276:	e069      	b.n	800334c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329c:	e056      	b.n	800334c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2202      	movs	r2, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d11b      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x1d4>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x1d4>
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d113      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	1c9a      	adds	r2, r3, #2
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2201      	movs	r2, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d11c      	bne.n	800332c <HAL_SPI_TransmitReceive+0x21c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2246      	movs	r2, #70	; 0x46
 80032f6:	5a9b      	ldrh	r3, [r3, r2]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	b292      	uxth	r2, r2
 800330a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2246      	movs	r2, #70	; 0x46
 800331a:	5a9b      	ldrh	r3, [r3, r2]
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b299      	uxth	r1, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2246      	movs	r2, #70	; 0x46
 8003326:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003328:	2301      	movs	r3, #1
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800332c:	f7fd fe9a 	bl	8001064 <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003338:	429a      	cmp	r2, r3
 800333a:	d807      	bhi.n	800334c <HAL_SPI_TransmitReceive+0x23c>
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	3301      	adds	r3, #1
 8003340:	d004      	beq.n	800334c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003342:	2323      	movs	r3, #35	; 0x23
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2203      	movs	r2, #3
 8003348:	701a      	strb	r2, [r3, #0]
        goto error;
 800334a:	e0a2      	b.n	8003492 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1a3      	bne.n	800329e <HAL_SPI_TransmitReceive+0x18e>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2246      	movs	r2, #70	; 0x46
 800335a:	5a9b      	ldrh	r3, [r3, r2]
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d19d      	bne.n	800329e <HAL_SPI_TransmitReceive+0x18e>
 8003362:	e085      	b.n	8003470 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x268>
 800336c:	2312      	movs	r3, #18
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d000      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x268>
 8003376:	e070      	b.n	800345a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339e:	e05c      	b.n	800345a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2202      	movs	r2, #2
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d11c      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x2d8>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d017      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x2d8>
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d114      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d11e      	bne.n	8003434 <HAL_SPI_TransmitReceive+0x324>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2246      	movs	r2, #70	; 0x46
 80033fa:	5a9b      	ldrh	r3, [r3, r2]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	001a      	movs	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	7812      	ldrb	r2, [r2, #0]
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2246      	movs	r2, #70	; 0x46
 8003422:	5a9b      	ldrh	r3, [r3, r2]
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b299      	uxth	r1, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2246      	movs	r2, #70	; 0x46
 800342e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003430:	2301      	movs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003434:	f7fd fe16 	bl	8001064 <HAL_GetTick>
 8003438:	0002      	movs	r2, r0
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003440:	429a      	cmp	r2, r3
 8003442:	d802      	bhi.n	800344a <HAL_SPI_TransmitReceive+0x33a>
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	3301      	adds	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x340>
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003450:	2323      	movs	r3, #35	; 0x23
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	2203      	movs	r2, #3
 8003456:	701a      	strb	r2, [r3, #0]
        goto error;
 8003458:	e01b      	b.n	8003492 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d19d      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x290>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2246      	movs	r2, #70	; 0x46
 8003468:	5a9b      	ldrh	r3, [r3, r2]
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d197      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	0018      	movs	r0, r3
 8003478:	f000 f94c 	bl	8003714 <SPI_EndRxTxTransaction>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d007      	beq.n	8003490 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003480:	2323      	movs	r3, #35	; 0x23
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	661a      	str	r2, [r3, #96]	; 0x60
 800348e:	e000      	b.n	8003492 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003490:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	225d      	movs	r2, #93	; 0x5d
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	225c      	movs	r2, #92	; 0x5c
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80034a2:	2323      	movs	r3, #35	; 0x23
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	781b      	ldrb	r3, [r3, #0]
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b00a      	add	sp, #40	; 0x28
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	ffffefff 	.word	0xffffefff

080034b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034c4:	f7fd fdce 	bl	8001064 <HAL_GetTick>
 80034c8:	0002      	movs	r2, r0
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	18d3      	adds	r3, r2, r3
 80034d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034d4:	f7fd fdc6 	bl	8001064 <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034dc:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	015b      	lsls	r3, r3, #5
 80034e2:	0d1b      	lsrs	r3, r3, #20
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	4353      	muls	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ea:	e058      	b.n	800359e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	d055      	beq.n	800359e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034f2:	f7fd fdb7 	bl	8001064 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d902      	bls.n	8003508 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d142      	bne.n	800358e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	21e0      	movs	r1, #224	; 0xe0
 8003514:	438a      	bics	r2, r1
 8003516:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	2382      	movs	r3, #130	; 0x82
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	429a      	cmp	r2, r3
 8003522:	d113      	bne.n	800354c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	429a      	cmp	r2, r3
 800352e:	d005      	beq.n	800353c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	429a      	cmp	r2, r3
 800353a:	d107      	bne.n	800354c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2140      	movs	r1, #64	; 0x40
 8003548:	438a      	bics	r2, r1
 800354a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	019b      	lsls	r3, r3, #6
 8003554:	429a      	cmp	r2, r3
 8003556:	d110      	bne.n	800357a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	491a      	ldr	r1, [pc, #104]	; (80035cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003564:	400a      	ands	r2, r1
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	0189      	lsls	r1, r1, #6
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	225d      	movs	r2, #93	; 0x5d
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	225c      	movs	r2, #92	; 0x5c
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e017      	b.n	80035be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3b01      	subs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	425a      	negs	r2, r3
 80035ae:	4153      	adcs	r3, r2
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	001a      	movs	r2, r3
 80035b4:	1dfb      	adds	r3, r7, #7
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d197      	bne.n	80034ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b008      	add	sp, #32
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	ffffdfff 	.word	0xffffdfff

080035d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035de:	2317      	movs	r3, #23
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035e6:	f7fd fd3d 	bl	8001064 <HAL_GetTick>
 80035ea:	0002      	movs	r2, r0
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	18d3      	adds	r3, r2, r3
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035f6:	f7fd fd35 	bl	8001064 <HAL_GetTick>
 80035fa:	0003      	movs	r3, r0
 80035fc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003606:	4b41      	ldr	r3, [pc, #260]	; (800370c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	0013      	movs	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	189b      	adds	r3, r3, r2
 8003610:	00da      	lsls	r2, r3, #3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	0d1b      	lsrs	r3, r3, #20
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	4353      	muls	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800361c:	e068      	b.n	80036f0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	23c0      	movs	r3, #192	; 0xc0
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	429a      	cmp	r2, r3
 8003626:	d10a      	bne.n	800363e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d107      	bne.n	800363e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	2117      	movs	r1, #23
 8003636:	187b      	adds	r3, r7, r1
 8003638:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800363a:	187b      	adds	r3, r7, r1
 800363c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	d055      	beq.n	80036f0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003644:	f7fd fd0e 	bl	8001064 <HAL_GetTick>
 8003648:	0002      	movs	r2, r0
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	429a      	cmp	r2, r3
 8003652:	d902      	bls.n	800365a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	d142      	bne.n	80036e0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	21e0      	movs	r1, #224	; 0xe0
 8003666:	438a      	bics	r2, r1
 8003668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	2382      	movs	r3, #130	; 0x82
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	429a      	cmp	r2, r3
 8003674:	d113      	bne.n	800369e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	429a      	cmp	r2, r3
 8003680:	d005      	beq.n	800368e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	429a      	cmp	r2, r3
 800368c:	d107      	bne.n	800369e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2140      	movs	r1, #64	; 0x40
 800369a:	438a      	bics	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d110      	bne.n	80036cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4916      	ldr	r1, [pc, #88]	; (8003710 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80036b6:	400a      	ands	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	0189      	lsls	r1, r1, #6
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	225d      	movs	r2, #93	; 0x5d
 80036d0:	2101      	movs	r1, #1
 80036d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	225c      	movs	r2, #92	; 0x5c
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e010      	b.n	8003702 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d18e      	bne.n	800361e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b00a      	add	sp, #40	; 0x28
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	2000000c 	.word	0x2000000c
 8003710:	ffffdfff 	.word	0xffffdfff

08003714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	23c0      	movs	r3, #192	; 0xc0
 8003724:	0159      	lsls	r1, r3, #5
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	0013      	movs	r3, r2
 800372e:	2200      	movs	r2, #0
 8003730:	f7ff ff4e 	bl	80035d0 <SPI_WaitFifoStateUntilTimeout>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d007      	beq.n	8003748 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	2220      	movs	r2, #32
 800373e:	431a      	orrs	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e027      	b.n	8003798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	0013      	movs	r3, r2
 8003752:	2200      	movs	r2, #0
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	f7ff fead 	bl	80034b4 <SPI_WaitFlagStateUntilTimeout>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d007      	beq.n	800376e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	2220      	movs	r2, #32
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e014      	b.n	8003798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	23c0      	movs	r3, #192	; 0xc0
 8003772:	00d9      	lsls	r1, r3, #3
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	0013      	movs	r3, r2
 800377c:	2200      	movs	r2, #0
 800377e:	f7ff ff27 	bl	80035d0 <SPI_WaitFifoStateUntilTimeout>
 8003782:	1e03      	subs	r3, r0, #0
 8003784:	d007      	beq.n	8003796 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378a:	2220      	movs	r2, #32
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e000      	b.n	8003798 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b004      	add	sp, #16
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e04a      	b.n	8003848 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	223d      	movs	r2, #61	; 0x3d
 80037b6:	5c9b      	ldrb	r3, [r3, r2]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223c      	movs	r2, #60	; 0x3c
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fd fb69 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	223d      	movs	r2, #61	; 0x3d
 80037d2:	2102      	movs	r1, #2
 80037d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	0019      	movs	r1, r3
 80037e0:	0010      	movs	r0, r2
 80037e2:	f000 f97f 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2248      	movs	r2, #72	; 0x48
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223e      	movs	r2, #62	; 0x3e
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	223f      	movs	r2, #63	; 0x3f
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2241      	movs	r2, #65	; 0x41
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2242      	movs	r2, #66	; 0x42
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2243      	movs	r2, #67	; 0x43
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2244      	movs	r2, #68	; 0x44
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2245      	movs	r2, #69	; 0x45
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2246      	movs	r2, #70	; 0x46
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2247      	movs	r2, #71	; 0x47
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223d      	movs	r2, #61	; 0x3d
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	223d      	movs	r2, #61	; 0x3d
 800385c:	5c9b      	ldrb	r3, [r3, r2]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e02f      	b.n	80038c8 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	223d      	movs	r2, #61	; 0x3d
 800386c:	2102      	movs	r1, #2
 800386e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <HAL_TIM_Base_Start+0x80>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_TIM_Base_Start+0x34>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <HAL_TIM_Base_Start+0x84>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d116      	bne.n	80038b2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_TIM_Base_Start+0x88>)
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b06      	cmp	r3, #6
 8003894:	d016      	beq.n	80038c4 <HAL_TIM_Base_Start+0x74>
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	025b      	lsls	r3, r3, #9
 800389c:	429a      	cmp	r2, r3
 800389e:	d011      	beq.n	80038c4 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2101      	movs	r1, #1
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b0:	e008      	b.n	80038c4 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2101      	movs	r1, #1
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e000      	b.n	80038c6 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b004      	add	sp, #16
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40000400 	.word	0x40000400
 80038d8:	00010007 	.word	0x00010007

080038dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e04a      	b.n	8003984 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	223d      	movs	r2, #61	; 0x3d
 80038f2:	5c9b      	ldrb	r3, [r3, r2]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d107      	bne.n	800390a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	223c      	movs	r2, #60	; 0x3c
 80038fe:	2100      	movs	r1, #0
 8003900:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f000 f841 	bl	800398c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	223d      	movs	r2, #61	; 0x3d
 800390e:	2102      	movs	r1, #2
 8003910:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3304      	adds	r3, #4
 800391a:	0019      	movs	r1, r3
 800391c:	0010      	movs	r0, r2
 800391e:	f000 f8e1 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2248      	movs	r2, #72	; 0x48
 8003926:	2101      	movs	r1, #1
 8003928:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	223e      	movs	r2, #62	; 0x3e
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	223f      	movs	r2, #63	; 0x3f
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2240      	movs	r2, #64	; 0x40
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2241      	movs	r2, #65	; 0x41
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2242      	movs	r2, #66	; 0x42
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2243      	movs	r2, #67	; 0x43
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2244      	movs	r2, #68	; 0x44
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2245      	movs	r2, #69	; 0x45
 8003966:	2101      	movs	r1, #1
 8003968:	5499      	strb	r1, [r3, r2]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2246      	movs	r2, #70	; 0x46
 800396e:	2101      	movs	r1, #1
 8003970:	5499      	strb	r1, [r3, r2]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2247      	movs	r2, #71	; 0x47
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	223d      	movs	r2, #61	; 0x3d
 800397e:	2101      	movs	r1, #1
 8003980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2317      	movs	r3, #23
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	223c      	movs	r2, #60	; 0x3c
 80039b4:	5c9b      	ldrb	r3, [r3, r2]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_TIM_IC_ConfigChannel+0x22>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e08c      	b.n	8003ad8 <HAL_TIM_IC_ConfigChannel+0x13c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	223c      	movs	r2, #60	; 0x3c
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11b      	bne.n	8003a04 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f000 f8ee 	bl	8003bbc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	210c      	movs	r1, #12
 80039ec:	438a      	bics	r2, r1
 80039ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	619a      	str	r2, [r3, #24]
 8003a02:	e062      	b.n	8003aca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d11c      	bne.n	8003a44 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f000 f921 	bl	8003c60 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	492d      	ldr	r1, [pc, #180]	; (8003ae0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6999      	ldr	r1, [r3, #24]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	619a      	str	r2, [r3, #24]
 8003a42:	e042      	b.n	8003aca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d11b      	bne.n	8003a82 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f000 f943 	bl	8003ce4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	210c      	movs	r1, #12
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	61da      	str	r2, [r3, #28]
 8003a80:	e023      	b.n	8003aca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b0c      	cmp	r3, #12
 8003a86:	d11c      	bne.n	8003ac2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f000 f964 	bl	8003d64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	490e      	ldr	r1, [pc, #56]	; (8003ae0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69d9      	ldr	r1, [r3, #28]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	61da      	str	r2, [r3, #28]
 8003ac0:	e003      	b.n	8003aca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003ac2:	2317      	movs	r3, #23
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	223c      	movs	r2, #60	; 0x3c
 8003ace:	2100      	movs	r1, #0
 8003ad0:	5499      	strb	r1, [r3, r2]

  return status;
 8003ad2:	2317      	movs	r3, #23
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	781b      	ldrb	r3, [r3, #0]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b006      	add	sp, #24
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	fffff3ff 	.word	0xfffff3ff

08003ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a2b      	ldr	r2, [pc, #172]	; (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0x20>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <TIM_Base_SetConfig+0xc4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d108      	bne.n	8003b16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2270      	movs	r2, #112	; 0x70
 8003b08:	4393      	bics	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0x5a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <TIM_Base_SetConfig+0xc4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0x5a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <TIM_Base_SetConfig+0xc8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0x5a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <TIM_Base_SetConfig+0xcc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0x5a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <TIM_Base_SetConfig+0xd0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <TIM_Base_SetConfig+0xd4>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	4393      	bics	r3, r2
 8003b56:	001a      	movs	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0xaa>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a0b      	ldr	r2, [pc, #44]	; (8003bb0 <TIM_Base_SetConfig+0xcc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0xaa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <TIM_Base_SetConfig+0xd0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d103      	bne.n	8003b96 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	615a      	str	r2, [r3, #20]
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b004      	add	sp, #16
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40002000 	.word	0x40002000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	fffffcff 	.word	0xfffffcff

08003bbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4393      	bics	r3, r2
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <TIM_TI1_SetConfig+0x9c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_TI1_SetConfig+0x38>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <TIM_TI1_SetConfig+0xa0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <TIM_TI1_SetConfig+0x3c>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <TIM_TI1_SetConfig+0x3e>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4393      	bics	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e003      	b.n	8003c18 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2201      	movs	r2, #1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	22f0      	movs	r2, #240	; 0xf0
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	4013      	ands	r3, r2
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	220a      	movs	r2, #10
 8003c32:	4393      	bics	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	220a      	movs	r2, #10
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b006      	add	sp, #24
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40000400 	.word	0x40000400

08003c60 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	2210      	movs	r2, #16
 8003c74:	4393      	bics	r3, r2
 8003c76:	001a      	movs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <TIM_TI2_SetConfig+0x7c>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <TIM_TI2_SetConfig+0x80>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	22a0      	movs	r2, #160	; 0xa0
 8003cb4:	4393      	bics	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	22a0      	movs	r2, #160	; 0xa0
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b006      	add	sp, #24
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	fffffcff 	.word	0xfffffcff
 8003ce0:	ffff0fff 	.word	0xffff0fff

08003ce4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <TIM_TI3_SetConfig+0x78>)
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	4393      	bics	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	22f0      	movs	r2, #240	; 0xf0
 8003d1e:	4393      	bics	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	22ff      	movs	r2, #255	; 0xff
 8003d28:	4013      	ands	r3, r2
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <TIM_TI3_SetConfig+0x7c>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	23a0      	movs	r3, #160	; 0xa0
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	4013      	ands	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b006      	add	sp, #24
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	fffffeff 	.word	0xfffffeff
 8003d60:	fffff5ff 	.word	0xfffff5ff

08003d64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <TIM_TI4_SetConfig+0x7c>)
 8003d78:	401a      	ands	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <TIM_TI4_SetConfig+0x80>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <TIM_TI4_SetConfig+0x84>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	031b      	lsls	r3, r3, #12
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <TIM_TI4_SetConfig+0x88>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	031a      	lsls	r2, r3, #12
 8003dbe:	23a0      	movs	r3, #160	; 0xa0
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b006      	add	sp, #24
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	ffffefff 	.word	0xffffefff
 8003de4:	fffffcff 	.word	0xfffffcff
 8003de8:	ffff0fff 	.word	0xffff0fff
 8003dec:	ffff5fff 	.word	0xffff5fff

08003df0 <HAL_TIMEx_TISelection>:
  *  (**) Value not defined in all devices. \n
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2317      	movs	r3, #23
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	223c      	movs	r2, #60	; 0x3c
 8003e08:	5c9b      	ldrb	r3, [r3, r2]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_TIMEx_TISelection+0x22>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e040      	b.n	8003e94 <HAL_TIMEx_TISelection+0xa4>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	223c      	movs	r2, #60	; 0x3c
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d021      	beq.n	8003e64 <HAL_TIMEx_TISelection+0x74>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d82a      	bhi.n	8003e7c <HAL_TIMEx_TISelection+0x8c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_TIMEx_TISelection+0x44>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d00c      	beq.n	8003e4c <HAL_TIMEx_TISelection+0x5c>
 8003e32:	e023      	b.n	8003e7c <HAL_TIMEx_TISelection+0x8c>
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	0019      	movs	r1, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8003e4a:	e01c      	b.n	8003e86 <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <HAL_TIMEx_TISelection+0xac>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	0019      	movs	r1, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8003e62:	e010      	b.n	8003e86 <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ea0 <HAL_TIMEx_TISelection+0xb0>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8003e7a:	e004      	b.n	8003e86 <HAL_TIMEx_TISelection+0x96>
    default:
      status = HAL_ERROR;
 8003e7c:	2317      	movs	r3, #23
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
      break;
 8003e84:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	223c      	movs	r2, #60	; 0x3c
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5499      	strb	r1, [r3, r2]

  return status;
 8003e8e:	2317      	movs	r3, #23
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	781b      	ldrb	r3, [r3, #0]
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b006      	add	sp, #24
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	fffff0ff 	.word	0xfffff0ff
 8003ea0:	fff0ffff 	.word	0xfff0ffff

08003ea4 <__libc_init_array>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	4d0c      	ldr	r5, [pc, #48]	; (8003edc <__libc_init_array+0x38>)
 8003eaa:	4c0d      	ldr	r4, [pc, #52]	; (8003ee0 <__libc_init_array+0x3c>)
 8003eac:	1b64      	subs	r4, r4, r5
 8003eae:	10a4      	asrs	r4, r4, #2
 8003eb0:	42a6      	cmp	r6, r4
 8003eb2:	d109      	bne.n	8003ec8 <__libc_init_array+0x24>
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	f000 f821 	bl	8003efc <_init>
 8003eba:	4d0a      	ldr	r5, [pc, #40]	; (8003ee4 <__libc_init_array+0x40>)
 8003ebc:	4c0a      	ldr	r4, [pc, #40]	; (8003ee8 <__libc_init_array+0x44>)
 8003ebe:	1b64      	subs	r4, r4, r5
 8003ec0:	10a4      	asrs	r4, r4, #2
 8003ec2:	42a6      	cmp	r6, r4
 8003ec4:	d105      	bne.n	8003ed2 <__libc_init_array+0x2e>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	00b3      	lsls	r3, r6, #2
 8003eca:	58eb      	ldr	r3, [r5, r3]
 8003ecc:	4798      	blx	r3
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__libc_init_array+0xc>
 8003ed2:	00b3      	lsls	r3, r6, #2
 8003ed4:	58eb      	ldr	r3, [r5, r3]
 8003ed6:	4798      	blx	r3
 8003ed8:	3601      	adds	r6, #1
 8003eda:	e7f2      	b.n	8003ec2 <__libc_init_array+0x1e>
 8003edc:	08003f54 	.word	0x08003f54
 8003ee0:	08003f54 	.word	0x08003f54
 8003ee4:	08003f54 	.word	0x08003f54
 8003ee8:	08003f58 	.word	0x08003f58

08003eec <memset>:
 8003eec:	0003      	movs	r3, r0
 8003eee:	1882      	adds	r2, r0, r2
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d100      	bne.n	8003ef6 <memset+0xa>
 8003ef4:	4770      	bx	lr
 8003ef6:	7019      	strb	r1, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	e7f9      	b.n	8003ef0 <memset+0x4>

08003efc <_init>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr

08003f08 <_fini>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr
