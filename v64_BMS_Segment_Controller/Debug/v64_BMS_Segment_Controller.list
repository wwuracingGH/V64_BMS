
v64_BMS_Segment_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e8c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003f84  08003f84  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f84  08003f84  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000018  08003fa4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08003fa4  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e657  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002083  00000000  00000000  0002e697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00030720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00031598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f5b  00000000  00000000  00032318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100a0  00000000  00000000  00047273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4ae  00000000  00000000  00057313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e37c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  000e3814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003f2c 	.word	0x08003f2c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	08003f2c 	.word	0x08003f2c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f89f 	bl	8000364 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f82b 	bl	800028c <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f891 	bl	8000364 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f887 	bl	8000364 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f837 	bl	80002d8 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f82d 	bl	80002d8 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__eqsf2>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	0042      	lsls	r2, r0, #1
 8000290:	0245      	lsls	r5, r0, #9
 8000292:	024e      	lsls	r6, r1, #9
 8000294:	004c      	lsls	r4, r1, #1
 8000296:	0fc3      	lsrs	r3, r0, #31
 8000298:	0a6d      	lsrs	r5, r5, #9
 800029a:	2001      	movs	r0, #1
 800029c:	0e12      	lsrs	r2, r2, #24
 800029e:	0a76      	lsrs	r6, r6, #9
 80002a0:	0e24      	lsrs	r4, r4, #24
 80002a2:	0fc9      	lsrs	r1, r1, #31
 80002a4:	2aff      	cmp	r2, #255	; 0xff
 80002a6:	d006      	beq.n	80002b6 <__eqsf2+0x2a>
 80002a8:	2cff      	cmp	r4, #255	; 0xff
 80002aa:	d003      	beq.n	80002b4 <__eqsf2+0x28>
 80002ac:	42a2      	cmp	r2, r4
 80002ae:	d101      	bne.n	80002b4 <__eqsf2+0x28>
 80002b0:	42b5      	cmp	r5, r6
 80002b2:	d006      	beq.n	80002c2 <__eqsf2+0x36>
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	d1fc      	bne.n	80002b4 <__eqsf2+0x28>
 80002ba:	2cff      	cmp	r4, #255	; 0xff
 80002bc:	d1fa      	bne.n	80002b4 <__eqsf2+0x28>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d1f8      	bne.n	80002b4 <__eqsf2+0x28>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d006      	beq.n	80002d4 <__eqsf2+0x48>
 80002c6:	2001      	movs	r0, #1
 80002c8:	2a00      	cmp	r2, #0
 80002ca:	d1f3      	bne.n	80002b4 <__eqsf2+0x28>
 80002cc:	0028      	movs	r0, r5
 80002ce:	1e43      	subs	r3, r0, #1
 80002d0:	4198      	sbcs	r0, r3
 80002d2:	e7ef      	b.n	80002b4 <__eqsf2+0x28>
 80002d4:	2000      	movs	r0, #0
 80002d6:	e7ed      	b.n	80002b4 <__eqsf2+0x28>

080002d8 <__gesf2>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	0042      	lsls	r2, r0, #1
 80002dc:	0245      	lsls	r5, r0, #9
 80002de:	024e      	lsls	r6, r1, #9
 80002e0:	004c      	lsls	r4, r1, #1
 80002e2:	0fc3      	lsrs	r3, r0, #31
 80002e4:	0a6d      	lsrs	r5, r5, #9
 80002e6:	0e12      	lsrs	r2, r2, #24
 80002e8:	0a76      	lsrs	r6, r6, #9
 80002ea:	0e24      	lsrs	r4, r4, #24
 80002ec:	0fc8      	lsrs	r0, r1, #31
 80002ee:	2aff      	cmp	r2, #255	; 0xff
 80002f0:	d01b      	beq.n	800032a <__gesf2+0x52>
 80002f2:	2cff      	cmp	r4, #255	; 0xff
 80002f4:	d00e      	beq.n	8000314 <__gesf2+0x3c>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d11b      	bne.n	8000332 <__gesf2+0x5a>
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	d101      	bne.n	8000302 <__gesf2+0x2a>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d01c      	beq.n	800033c <__gesf2+0x64>
 8000302:	2d00      	cmp	r5, #0
 8000304:	d00c      	beq.n	8000320 <__gesf2+0x48>
 8000306:	4283      	cmp	r3, r0
 8000308:	d01c      	beq.n	8000344 <__gesf2+0x6c>
 800030a:	2102      	movs	r1, #2
 800030c:	1e58      	subs	r0, r3, #1
 800030e:	4008      	ands	r0, r1
 8000310:	3801      	subs	r0, #1
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	2e00      	cmp	r6, #0
 8000316:	d122      	bne.n	800035e <__gesf2+0x86>
 8000318:	2a00      	cmp	r2, #0
 800031a:	d1f4      	bne.n	8000306 <__gesf2+0x2e>
 800031c:	2d00      	cmp	r5, #0
 800031e:	d1f2      	bne.n	8000306 <__gesf2+0x2e>
 8000320:	2800      	cmp	r0, #0
 8000322:	d1f6      	bne.n	8000312 <__gesf2+0x3a>
 8000324:	2001      	movs	r0, #1
 8000326:	4240      	negs	r0, r0
 8000328:	e7f3      	b.n	8000312 <__gesf2+0x3a>
 800032a:	2d00      	cmp	r5, #0
 800032c:	d117      	bne.n	800035e <__gesf2+0x86>
 800032e:	2cff      	cmp	r4, #255	; 0xff
 8000330:	d0f0      	beq.n	8000314 <__gesf2+0x3c>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d1e7      	bne.n	8000306 <__gesf2+0x2e>
 8000336:	2e00      	cmp	r6, #0
 8000338:	d1e5      	bne.n	8000306 <__gesf2+0x2e>
 800033a:	e7e6      	b.n	800030a <__gesf2+0x32>
 800033c:	2000      	movs	r0, #0
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e7      	beq.n	8000312 <__gesf2+0x3a>
 8000342:	e7e2      	b.n	800030a <__gesf2+0x32>
 8000344:	42a2      	cmp	r2, r4
 8000346:	dc05      	bgt.n	8000354 <__gesf2+0x7c>
 8000348:	dbea      	blt.n	8000320 <__gesf2+0x48>
 800034a:	42b5      	cmp	r5, r6
 800034c:	d802      	bhi.n	8000354 <__gesf2+0x7c>
 800034e:	d3e7      	bcc.n	8000320 <__gesf2+0x48>
 8000350:	2000      	movs	r0, #0
 8000352:	e7de      	b.n	8000312 <__gesf2+0x3a>
 8000354:	4243      	negs	r3, r0
 8000356:	4158      	adcs	r0, r3
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	3801      	subs	r0, #1
 800035c:	e7d9      	b.n	8000312 <__gesf2+0x3a>
 800035e:	2002      	movs	r0, #2
 8000360:	4240      	negs	r0, r0
 8000362:	e7d6      	b.n	8000312 <__gesf2+0x3a>

08000364 <__lesf2>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	0042      	lsls	r2, r0, #1
 8000368:	0245      	lsls	r5, r0, #9
 800036a:	024e      	lsls	r6, r1, #9
 800036c:	004c      	lsls	r4, r1, #1
 800036e:	0fc3      	lsrs	r3, r0, #31
 8000370:	0a6d      	lsrs	r5, r5, #9
 8000372:	0e12      	lsrs	r2, r2, #24
 8000374:	0a76      	lsrs	r6, r6, #9
 8000376:	0e24      	lsrs	r4, r4, #24
 8000378:	0fc8      	lsrs	r0, r1, #31
 800037a:	2aff      	cmp	r2, #255	; 0xff
 800037c:	d00b      	beq.n	8000396 <__lesf2+0x32>
 800037e:	2cff      	cmp	r4, #255	; 0xff
 8000380:	d00d      	beq.n	800039e <__lesf2+0x3a>
 8000382:	2a00      	cmp	r2, #0
 8000384:	d11f      	bne.n	80003c6 <__lesf2+0x62>
 8000386:	2c00      	cmp	r4, #0
 8000388:	d116      	bne.n	80003b8 <__lesf2+0x54>
 800038a:	2e00      	cmp	r6, #0
 800038c:	d114      	bne.n	80003b8 <__lesf2+0x54>
 800038e:	2000      	movs	r0, #0
 8000390:	2d00      	cmp	r5, #0
 8000392:	d010      	beq.n	80003b6 <__lesf2+0x52>
 8000394:	e009      	b.n	80003aa <__lesf2+0x46>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d10c      	bne.n	80003b4 <__lesf2+0x50>
 800039a:	2cff      	cmp	r4, #255	; 0xff
 800039c:	d113      	bne.n	80003c6 <__lesf2+0x62>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d108      	bne.n	80003b4 <__lesf2+0x50>
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d008      	beq.n	80003b8 <__lesf2+0x54>
 80003a6:	4283      	cmp	r3, r0
 80003a8:	d012      	beq.n	80003d0 <__lesf2+0x6c>
 80003aa:	2102      	movs	r1, #2
 80003ac:	1e58      	subs	r0, r3, #1
 80003ae:	4008      	ands	r0, r1
 80003b0:	3801      	subs	r0, #1
 80003b2:	e000      	b.n	80003b6 <__lesf2+0x52>
 80003b4:	2002      	movs	r0, #2
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d1f4      	bne.n	80003a6 <__lesf2+0x42>
 80003bc:	2800      	cmp	r0, #0
 80003be:	d1fa      	bne.n	80003b6 <__lesf2+0x52>
 80003c0:	2001      	movs	r0, #1
 80003c2:	4240      	negs	r0, r0
 80003c4:	e7f7      	b.n	80003b6 <__lesf2+0x52>
 80003c6:	2c00      	cmp	r4, #0
 80003c8:	d1ed      	bne.n	80003a6 <__lesf2+0x42>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d1eb      	bne.n	80003a6 <__lesf2+0x42>
 80003ce:	e7ec      	b.n	80003aa <__lesf2+0x46>
 80003d0:	42a2      	cmp	r2, r4
 80003d2:	dc05      	bgt.n	80003e0 <__lesf2+0x7c>
 80003d4:	dbf2      	blt.n	80003bc <__lesf2+0x58>
 80003d6:	42b5      	cmp	r5, r6
 80003d8:	d802      	bhi.n	80003e0 <__lesf2+0x7c>
 80003da:	d3ef      	bcc.n	80003bc <__lesf2+0x58>
 80003dc:	2000      	movs	r0, #0
 80003de:	e7ea      	b.n	80003b6 <__lesf2+0x52>
 80003e0:	4243      	negs	r3, r0
 80003e2:	4158      	adcs	r0, r3
 80003e4:	0040      	lsls	r0, r0, #1
 80003e6:	3801      	subs	r0, #1
 80003e8:	e7e5      	b.n	80003b6 <__lesf2+0x52>
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_ui2f>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	1e05      	subs	r5, r0, #0
 80003f0:	d00e      	beq.n	8000410 <__aeabi_ui2f+0x24>
 80003f2:	f000 f83d 	bl	8000470 <__clzsi2>
 80003f6:	239e      	movs	r3, #158	; 0x9e
 80003f8:	0004      	movs	r4, r0
 80003fa:	1a1b      	subs	r3, r3, r0
 80003fc:	2b96      	cmp	r3, #150	; 0x96
 80003fe:	dc0c      	bgt.n	800041a <__aeabi_ui2f+0x2e>
 8000400:	2808      	cmp	r0, #8
 8000402:	dd01      	ble.n	8000408 <__aeabi_ui2f+0x1c>
 8000404:	3c08      	subs	r4, #8
 8000406:	40a5      	lsls	r5, r4
 8000408:	026d      	lsls	r5, r5, #9
 800040a:	0a6d      	lsrs	r5, r5, #9
 800040c:	b2d8      	uxtb	r0, r3
 800040e:	e001      	b.n	8000414 <__aeabi_ui2f+0x28>
 8000410:	2000      	movs	r0, #0
 8000412:	2500      	movs	r5, #0
 8000414:	05c0      	lsls	r0, r0, #23
 8000416:	4328      	orrs	r0, r5
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	2b99      	cmp	r3, #153	; 0x99
 800041c:	dd09      	ble.n	8000432 <__aeabi_ui2f+0x46>
 800041e:	0002      	movs	r2, r0
 8000420:	0029      	movs	r1, r5
 8000422:	321b      	adds	r2, #27
 8000424:	4091      	lsls	r1, r2
 8000426:	1e4a      	subs	r2, r1, #1
 8000428:	4191      	sbcs	r1, r2
 800042a:	2205      	movs	r2, #5
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	40d5      	lsrs	r5, r2
 8000430:	430d      	orrs	r5, r1
 8000432:	2c05      	cmp	r4, #5
 8000434:	dc12      	bgt.n	800045c <__aeabi_ui2f+0x70>
 8000436:	0029      	movs	r1, r5
 8000438:	4e0c      	ldr	r6, [pc, #48]	; (800046c <__aeabi_ui2f+0x80>)
 800043a:	4031      	ands	r1, r6
 800043c:	076a      	lsls	r2, r5, #29
 800043e:	d009      	beq.n	8000454 <__aeabi_ui2f+0x68>
 8000440:	200f      	movs	r0, #15
 8000442:	4028      	ands	r0, r5
 8000444:	2804      	cmp	r0, #4
 8000446:	d005      	beq.n	8000454 <__aeabi_ui2f+0x68>
 8000448:	3104      	adds	r1, #4
 800044a:	014a      	lsls	r2, r1, #5
 800044c:	d502      	bpl.n	8000454 <__aeabi_ui2f+0x68>
 800044e:	239f      	movs	r3, #159	; 0x9f
 8000450:	4031      	ands	r1, r6
 8000452:	1b1b      	subs	r3, r3, r4
 8000454:	0189      	lsls	r1, r1, #6
 8000456:	0a4d      	lsrs	r5, r1, #9
 8000458:	b2d8      	uxtb	r0, r3
 800045a:	e7db      	b.n	8000414 <__aeabi_ui2f+0x28>
 800045c:	1f62      	subs	r2, r4, #5
 800045e:	4095      	lsls	r5, r2
 8000460:	0029      	movs	r1, r5
 8000462:	4e02      	ldr	r6, [pc, #8]	; (800046c <__aeabi_ui2f+0x80>)
 8000464:	4031      	ands	r1, r6
 8000466:	076a      	lsls	r2, r5, #29
 8000468:	d0f4      	beq.n	8000454 <__aeabi_ui2f+0x68>
 800046a:	e7e9      	b.n	8000440 <__aeabi_ui2f+0x54>
 800046c:	fbffffff 	.word	0xfbffffff

08000470 <__clzsi2>:
 8000470:	211c      	movs	r1, #28
 8000472:	2301      	movs	r3, #1
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	4298      	cmp	r0, r3
 8000478:	d301      	bcc.n	800047e <__clzsi2+0xe>
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	3910      	subs	r1, #16
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	4298      	cmp	r0, r3
 8000482:	d301      	bcc.n	8000488 <__clzsi2+0x18>
 8000484:	0a00      	lsrs	r0, r0, #8
 8000486:	3908      	subs	r1, #8
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0x22>
 800048e:	0900      	lsrs	r0, r0, #4
 8000490:	3904      	subs	r1, #4
 8000492:	a202      	add	r2, pc, #8	; (adr r2, 800049c <__clzsi2+0x2c>)
 8000494:	5c10      	ldrb	r0, [r2, r0]
 8000496:	1840      	adds	r0, r0, r1
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	02020304 	.word	0x02020304
 80004a0:	01010101 	.word	0x01010101
	...

080004ac <delay_us>:
 */
uint8_t selectCell(uint8_t cellNum);
void maxCalibrate(void);


void delay_us(uint16_t us) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	0002      	movs	r2, r0
 80004b4:	1dbb      	adds	r3, r7, #6
 80004b6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(maxtim,0);
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <delay_us+0x34>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(maxtim) < us);
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <delay_us+0x34>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004cc:	1dbb      	adds	r3, r7, #6
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d3f7      	bcc.n	80004c4 <delay_us+0x18>
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	2000003c 	.word	0x2000003c

080004e4 <MaxInit>:

void MaxInit(SPI_HandleTypeDef *hspi, ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	maxspi = hspi;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <MaxInit+0x38>)
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	601a      	str	r2, [r3, #0]
	maxadc = hadc;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <MaxInit+0x3c>)
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	601a      	str	r2, [r3, #0]
	maxtim = htim;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MaxInit+0x40>)
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
	*balanceLower = 0x00;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MaxInit+0x44>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
	*balanceUpper = 0x00;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MaxInit+0x48>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]

	//maxCalibrate();
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b004      	add	sp, #16
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	20000034 	.word	0x20000034
 8000520:	20000038 	.word	0x20000038
 8000524:	2000003c 	.word	0x2000003c
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <selectCell>:

// Takes 4-bit integer and returns 4-bit big endian selection
uint8_t selectCell(uint8_t cellNum) {
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	0002      	movs	r2, r0
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	701a      	strb	r2, [r3, #0]
	uint8_t bit0 = ((cellNum>>3) &0x01);
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	08db      	lsrs	r3, r3, #3
 8000542:	b2da      	uxtb	r2, r3
 8000544:	200f      	movs	r0, #15
 8000546:	183b      	adds	r3, r7, r0
 8000548:	2101      	movs	r1, #1
 800054a:	400a      	ands	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
	uint8_t bit1 = ((cellNum>>1) &0x02);
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	085b      	lsrs	r3, r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	240e      	movs	r4, #14
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2102      	movs	r1, #2
 800055c:	400a      	ands	r2, r1
 800055e:	701a      	strb	r2, [r3, #0]
	uint8_t bit2 = ((cellNum<<1) &0x04);
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	250d      	movs	r5, #13
 800056a:	197b      	adds	r3, r7, r5
 800056c:	2104      	movs	r1, #4
 800056e:	400a      	ands	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
	uint8_t bit3 = ((cellNum<<3) &0x08);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	b2da      	uxtb	r2, r3
 800057a:	260c      	movs	r6, #12
 800057c:	19bb      	adds	r3, r7, r6
 800057e:	2108      	movs	r1, #8
 8000580:	400a      	ands	r2, r1
 8000582:	701a      	strb	r2, [r3, #0]
	uint8_t selection = bit3|bit2|bit1|bit0;
 8000584:	19ba      	adds	r2, r7, r6
 8000586:	197b      	adds	r3, r7, r5
 8000588:	7812      	ldrb	r2, [r2, #0]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4313      	orrs	r3, r2
 800058e:	b2da      	uxtb	r2, r3
 8000590:	193b      	adds	r3, r7, r4
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4313      	orrs	r3, r2
 8000596:	b2d9      	uxtb	r1, r3
 8000598:	240b      	movs	r4, #11
 800059a:	193b      	adds	r3, r7, r4
 800059c:	183a      	adds	r2, r7, r0
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	701a      	strb	r2, [r3, #0]
	return selection<<3;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
}
 80005ac:	0018      	movs	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b005      	add	sp, #20
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005b4 <MaxSampleCharges>:
	}

	*balanceLower = 0x00;
}

void MaxSampleCharges(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
	//Empty transmission buffer and start sample phase
	*config = 0x00;
 80005ba:	4b7e      	ldr	r3, [pc, #504]	; (80007b4 <MaxSampleCharges+0x200>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	021b      	lsls	r3, r3, #8
 80005c6:	487c      	ldr	r0, [pc, #496]	; (80007b8 <MaxSampleCharges+0x204>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	0019      	movs	r1, r3
 80005cc:	f001 fee2 	bl	8002394 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(maxspi, u1_buffer_in, status_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 80005d0:	4b7a      	ldr	r3, [pc, #488]	; (80007bc <MaxSampleCharges+0x208>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	4a7a      	ldr	r2, [pc, #488]	; (80007c0 <MaxSampleCharges+0x20c>)
 80005d6:	497b      	ldr	r1, [pc, #492]	; (80007c4 <MaxSampleCharges+0x210>)
 80005d8:	2332      	movs	r3, #50	; 0x32
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2303      	movs	r3, #3
 80005de:	f002 fdaf 	bl	8003140 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	4874      	ldr	r0, [pc, #464]	; (80007b8 <MaxSampleCharges+0x204>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	0019      	movs	r1, r3
 80005ec:	f001 fed2 	bl	8002394 <HAL_GPIO_WritePin>

	//wait for sample phase to complete
	HAL_Delay(T_SAMPLE);
 80005f0:	2028      	movs	r0, #40	; 0x28
 80005f2:	f000 fd59 	bl	80010a8 <HAL_Delay>

	//start hold phase
	*config = SMPLB_HIGH;
 80005f6:	4b6f      	ldr	r3, [pc, #444]	; (80007b4 <MaxSampleCharges+0x200>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2204      	movs	r2, #4
 80005fc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	486d      	ldr	r0, [pc, #436]	; (80007b8 <MaxSampleCharges+0x204>)
 8000604:	2200      	movs	r2, #0
 8000606:	0019      	movs	r1, r3
 8000608:	f001 fec4 	bl	8002394 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(maxspi, u1_buffer_in, status_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 800060c:	4b6b      	ldr	r3, [pc, #428]	; (80007bc <MaxSampleCharges+0x208>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	4a6b      	ldr	r2, [pc, #428]	; (80007c0 <MaxSampleCharges+0x20c>)
 8000612:	496c      	ldr	r1, [pc, #432]	; (80007c4 <MaxSampleCharges+0x210>)
 8000614:	2332      	movs	r3, #50	; 0x32
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2303      	movs	r3, #3
 800061a:	f002 fd91 	bl	8003140 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4865      	ldr	r0, [pc, #404]	; (80007b8 <MaxSampleCharges+0x204>)
 8000624:	2201      	movs	r2, #1
 8000626:	0019      	movs	r1, r3
 8000628:	f001 feb4 	bl	8002394 <HAL_GPIO_WritePin>

	//wait for sample cap voltages to shift to ground reference, at least 50.5 us
	delay_us(T_HOLD + T_LS_DELAY);
 800062c:	201f      	movs	r0, #31
 800062e:	f7ff ff3d 	bl	80004ac <delay_us>

	//Measure voltage of every set of cells
	for (int i = 0; i < NUM_CELLS; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	e094      	b.n	8000762 <MaxSampleCharges+0x1ae>

		// Reset config register to only ECS
		*config = ECS_HIGH | SMPLB_HIGH;
 8000638:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <MaxSampleCharges+0x200>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2284      	movs	r2, #132	; 0x84
 800063e:	701a      	strb	r2, [r3, #0]

		// Select desired cell
		*config |= selectCell(i);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ff73 	bl	8000530 <selectCell>
 800064a:	0003      	movs	r3, r0
 800064c:	0019      	movs	r1, r3
 800064e:	4b59      	ldr	r3, [pc, #356]	; (80007b4 <MaxSampleCharges+0x200>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4b57      	ldr	r3, [pc, #348]	; (80007b4 <MaxSampleCharges+0x200>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	430a      	orrs	r2, r1
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	701a      	strb	r2, [r3, #0]

		//tell MAX14920 to measure voltage of cell i
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	4855      	ldr	r0, [pc, #340]	; (80007b8 <MaxSampleCharges+0x204>)
 8000664:	2200      	movs	r2, #0
 8000666:	0019      	movs	r1, r3
 8000668:	f001 fe94 	bl	8002394 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(maxspi, u1_buffer_in, status_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 800066c:	4b53      	ldr	r3, [pc, #332]	; (80007bc <MaxSampleCharges+0x208>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	4a53      	ldr	r2, [pc, #332]	; (80007c0 <MaxSampleCharges+0x20c>)
 8000672:	4954      	ldr	r1, [pc, #336]	; (80007c4 <MaxSampleCharges+0x210>)
 8000674:	2332      	movs	r3, #50	; 0x32
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2303      	movs	r3, #3
 800067a:	f002 fd61 	bl	8003140 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	484d      	ldr	r0, [pc, #308]	; (80007b8 <MaxSampleCharges+0x204>)
 8000684:	2201      	movs	r2, #1
 8000686:	0019      	movs	r1, r3
 8000688:	f001 fe84 	bl	8002394 <HAL_GPIO_WritePin>

		//Time delay to allow voltage measurement to settle.
		//According to MAX14920 datasheet, we should have a delay of over 5us.
		//Reading from ADC takes a few microseconds anyways.
		delay_us(T_SET);
 800068c:	2005      	movs	r0, #5
 800068e:	f7ff ff0d 	bl	80004ac <delay_us>

		//read voltage of cell i from ADC
		HAL_ADC_Start(maxadc);
 8000692:	4b4d      	ldr	r3, [pc, #308]	; (80007c8 <MaxSampleCharges+0x214>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	0018      	movs	r0, r3
 8000698:	f001 f83c 	bl	8001714 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(maxadc, ADC_TIMEOUT);
 800069c:	4b4a      	ldr	r3, [pc, #296]	; (80007c8 <MaxSampleCharges+0x214>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2132      	movs	r1, #50	; 0x32
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 f8c0 	bl	8001828 <HAL_ADC_PollForConversion>
		cell_voltages[i] = HAL_ADC_GetValue(maxadc);
 80006a8:	4b47      	ldr	r3, [pc, #284]	; (80007c8 <MaxSampleCharges+0x214>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f94f 	bl	8001950 <HAL_ADC_GetValue>
 80006b2:	0003      	movs	r3, r0
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff fe99 	bl	80003ec <__aeabi_ui2f>
 80006ba:	1c01      	adds	r1, r0, #0
 80006bc:	4b43      	ldr	r3, [pc, #268]	; (80007cc <MaxSampleCharges+0x218>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	50d1      	str	r1, [r2, r3]
		HAL_ADC_Stop(maxadc);
 80006c4:	4b40      	ldr	r3, [pc, #256]	; (80007c8 <MaxSampleCharges+0x214>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 f871 	bl	80017b0 <HAL_ADC_Stop>
		if (cell_voltages[i] > cell_voltages[highest_cell]) {
 80006ce:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <MaxSampleCharges+0x218>)
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	0092      	lsls	r2, r2, #2
 80006d4:	58d0      	ldr	r0, [r2, r3]
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <MaxSampleCharges+0x21c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	001a      	movs	r2, r3
 80006dc:	4b3b      	ldr	r3, [pc, #236]	; (80007cc <MaxSampleCharges+0x218>)
 80006de:	0092      	lsls	r2, r2, #2
 80006e0:	58d3      	ldr	r3, [r2, r3]
 80006e2:	1c19      	adds	r1, r3, #0
 80006e4:	f7ff fdbe 	bl	8000264 <__aeabi_fcmpgt>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d004      	beq.n	80006f6 <MaxSampleCharges+0x142>
			highest_cell = i;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MaxSampleCharges+0x21c>)
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e012      	b.n	800071c <MaxSampleCharges+0x168>
		} else if (cell_voltages[i] < cell_voltages[lowest_cell]) {
 80006f6:	4b35      	ldr	r3, [pc, #212]	; (80007cc <MaxSampleCharges+0x218>)
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	58d0      	ldr	r0, [r2, r3]
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <MaxSampleCharges+0x220>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	001a      	movs	r2, r3
 8000704:	4b31      	ldr	r3, [pc, #196]	; (80007cc <MaxSampleCharges+0x218>)
 8000706:	0092      	lsls	r2, r2, #2
 8000708:	58d3      	ldr	r3, [r2, r3]
 800070a:	1c19      	adds	r1, r3, #0
 800070c:	f7ff fd96 	bl	800023c <__aeabi_fcmplt>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d003      	beq.n	800071c <MaxSampleCharges+0x168>
			lowest_cell = i;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <MaxSampleCharges+0x220>)
 800071a:	701a      	strb	r2, [r3, #0]
		}

		// End reading
		*config &= ~SMPLB_HIGH;
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <MaxSampleCharges+0x200>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	781a      	ldrb	r2, [r3, #0]
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MaxSampleCharges+0x200>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2104      	movs	r1, #4
 8000728:	438a      	bics	r2, r1
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	4821      	ldr	r0, [pc, #132]	; (80007b8 <MaxSampleCharges+0x204>)
 8000734:	2200      	movs	r2, #0
 8000736:	0019      	movs	r1, r3
 8000738:	f001 fe2c 	bl	8002394 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(maxspi, u1_buffer_in, status_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MaxSampleCharges+0x208>)
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <MaxSampleCharges+0x20c>)
 8000742:	4920      	ldr	r1, [pc, #128]	; (80007c4 <MaxSampleCharges+0x210>)
 8000744:	2332      	movs	r3, #50	; 0x32
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2303      	movs	r3, #3
 800074a:	f002 fcf9 	bl	8003140 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	4819      	ldr	r0, [pc, #100]	; (80007b8 <MaxSampleCharges+0x204>)
 8000754:	2201      	movs	r2, #1
 8000756:	0019      	movs	r1, r3
 8000758:	f001 fe1c 	bl	8002394 <HAL_GPIO_WritePin>
	for (int i = 0; i < NUM_CELLS; i++) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3301      	adds	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b07      	cmp	r3, #7
 8000766:	dc00      	bgt.n	800076a <MaxSampleCharges+0x1b6>
 8000768:	e766      	b.n	8000638 <MaxSampleCharges+0x84>
	}
		//end hold phase
		*config &= ~SMPLB_HIGH;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MaxSampleCharges+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MaxSampleCharges+0x200>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2104      	movs	r1, #4
 8000776:	438a      	bics	r2, r1
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MaxSampleCharges+0x204>)
 8000782:	2200      	movs	r2, #0
 8000784:	0019      	movs	r1, r3
 8000786:	f001 fe05 	bl	8002394 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(maxspi, u1_buffer_in, status_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MaxSampleCharges+0x208>)
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <MaxSampleCharges+0x20c>)
 8000790:	490c      	ldr	r1, [pc, #48]	; (80007c4 <MaxSampleCharges+0x210>)
 8000792:	2332      	movs	r3, #50	; 0x32
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2303      	movs	r3, #3
 8000798:	f002 fcd2 	bl	8003140 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MaxSampleCharges+0x204>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	0019      	movs	r1, r3
 80007a6:	f001 fdf5 	bl	8002394 <HAL_GPIO_WritePin>
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	20000008 	.word	0x20000008
 80007b8:	50000800 	.word	0x50000800
 80007bc:	20000034 	.word	0x20000034
 80007c0:	20000044 	.word	0x20000044
 80007c4:	20000040 	.word	0x20000040
 80007c8:	20000038 	.word	0x20000038
 80007cc:	20000048 	.word	0x20000048
 80007d0:	20000069 	.word	0x20000069
 80007d4:	20000068 	.word	0x20000068

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 fbde 	bl	8000f9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f81e 	bl	8000820 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 f99e 	bl	8000b24 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007e8:	f000 f862 	bl	80008b0 <MX_ADC1_Init>
  MX_TIM14_Init();
 80007ec:	f000 f944 	bl	8000a78 <MX_TIM14_Init>
  MX_SPI1_Init();
 80007f0:	f000 f8ca 	bl	8000988 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007f4:	f000 f906 	bl	8000a04 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MaxInit(&hspi1,&hadc1,&htim14);	// Pass peripheral pointers to MAX module
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <main+0x3c>)
 80007fa:	4907      	ldr	r1, [pc, #28]	; (8000818 <main+0x40>)
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <main+0x44>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fe70 	bl	80004e4 <MaxInit>
  HAL_TIM_Base_Start(&htim14);		// Start hardware timer
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <main+0x3c>)
 8000806:	0018      	movs	r0, r3
 8000808:	f003 f83a 	bl	8003880 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  MaxSampleCharges();
 800080c:	f7ff fed2 	bl	80005b4 <MaxSampleCharges>
 8000810:	e7fc      	b.n	800080c <main+0x34>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	20000198 	.word	0x20000198
 8000818:	2000006c 	.word	0x2000006c
 800081c:	200000d0 	.word	0x200000d0

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b093      	sub	sp, #76	; 0x4c
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	2414      	movs	r4, #20
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2334      	movs	r3, #52	; 0x34
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f003 fb73 	bl	8003f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	0018      	movs	r0, r3
 800083a:	2310      	movs	r3, #16
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f003 fb6c 	bl	8003f1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	0018      	movs	r0, r3
 800084a:	f001 fdc1 	bl	80023d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2202      	movs	r2, #2
 8000852:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	0052      	lsls	r2, r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fded 	bl	8002450 <HAL_RCC_OscConfig>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800087a:	f000 f9bf 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2100      	movs	r1, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f002 f8e8 	bl	8002a70 <HAL_RCC_ClockConfig>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008a4:	f000 f9aa 	bl	8000bfc <Error_Handler>
  }
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b013      	add	sp, #76	; 0x4c
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	0018      	movs	r0, r3
 80008ba:	230c      	movs	r3, #12
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f003 fb2c 	bl	8003f1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008c4:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_ADC1_Init+0xcc>)
 80008c6:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <MX_ADC1_Init+0xd0>)
 80008c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_ADC1_Init+0xcc>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	05d2      	lsls	r2, r2, #23
 80008d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_ADC1_Init+0xcc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_ADC1_Init+0xcc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_ADC1_Init+0xcc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_ADC1_Init+0xcc>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <MX_ADC1_Init+0xcc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_ADC1_Init+0xcc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_ADC1_Init+0xcc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_ADC1_Init+0xcc>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_ADC1_Init+0xcc>)
 8000904:	2220      	movs	r2, #32
 8000906:	2100      	movs	r1, #0
 8000908:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_ADC1_Init+0xcc>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_ADC1_Init+0xcc>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_ADC1_Init+0xcc>)
 8000918:	222c      	movs	r2, #44	; 0x2c
 800091a:	2100      	movs	r1, #0
 800091c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_ADC1_Init+0xcc>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_ADC1_Init+0xcc>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_ADC1_Init+0xcc>)
 800092c:	2200      	movs	r2, #0
 800092e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_ADC1_Init+0xcc>)
 8000932:	223c      	movs	r2, #60	; 0x3c
 8000934:	2100      	movs	r1, #0
 8000936:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_ADC1_Init+0xcc>)
 800093a:	2200      	movs	r2, #0
 800093c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_ADC1_Init+0xcc>)
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fd3f 	bl	80013c4 <HAL_ADC_Init>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800094a:	f000 f957 	bl	8000bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <MX_ADC1_Init+0xd4>)
 8000952:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	1d3a      	adds	r2, r7, #4
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_ADC1_Init+0xcc>)
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fffe 	bl	8001968 <HAL_ADC_ConfigChannel>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000970:	f000 f944 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000006c 	.word	0x2000006c
 8000980:	40012400 	.word	0x40012400
 8000984:	1c000080 	.word	0x1c000080

08000988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_SPI1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_SPI1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_SPI1_Init+0x74>)
 8000994:	2282      	movs	r2, #130	; 0x82
 8000996:	0052      	lsls	r2, r2, #1
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI1_Init+0x74>)
 80009a2:	22e0      	movs	r2, #224	; 0xe0
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f002 faf1 	bl	8002fd0 <HAL_SPI_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009f2:	f000 f903 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000d0 	.word	0x200000d0
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a0a:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <MX_SPI2_Init+0x70>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a1c:	22e0      	movs	r2, #224	; 0xe0
 8000a1e:	00d2      	lsls	r2, r2, #3
 8000a20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <MX_SPI2_Init+0x6c>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f002 fab7 	bl	8002fd0 <HAL_SPI_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000a66:	f000 f8c9 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000134 	.word	0x20000134
 8000a74:	40003800 	.word	0x40003800

08000a78 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a7e:	003b      	movs	r3, r7
 8000a80:	0018      	movs	r0, r3
 8000a82:	2310      	movs	r3, #16
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f003 fa48 	bl	8003f1c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_TIM14_Init+0xa4>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000a94:	220f      	movs	r2, #15
 8000a96:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000aa0:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <MX_TIM14_Init+0xa8>)
 8000aa2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 fe8c 	bl	80037d0 <HAL_TIM_Base_Init>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000abc:	f000 f89e 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 ff22 	bl	800390c <HAL_TIM_IC_Init>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 f896 	bl	8000bfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	2201      	movs	r2, #1
 8000ada:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ae8:	0039      	movs	r1, r7
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 ff6c 	bl	80039cc <HAL_TIM_IC_ConfigChannel>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000af8:	f000 f880 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim14, TIM_TIM14_TI1_MCO, TIM_CHANNEL_1) != HAL_OK)
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_TIM14_Init+0xa0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	2103      	movs	r1, #3
 8000b02:	0018      	movs	r0, r3
 8000b04:	f003 f98c 	bl	8003e20 <HAL_TIMEx_TISelection>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM14_Init+0x98>
  {
    Error_Handler();
 8000b0c:	f000 f876 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b004      	add	sp, #16
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000198 	.word	0x20000198
 8000b1c:	40002000 	.word	0x40002000
 8000b20:	0000ffff 	.word	0x0000ffff

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	240c      	movs	r4, #12
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2314      	movs	r3, #20
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	f003 f9f1 	bl	8003f1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b40:	2102      	movs	r1, #2
 8000b42:	430a      	orrs	r2, r1
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b58:	2104      	movs	r1, #4
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	2204      	movs	r2, #4
 8000b64:	4013      	ands	r3, r2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_GPIO_Init+0xd0>)
 8000b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <MX_GPIO_Init+0xd4>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	f001 fc02 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b90:	23a0      	movs	r3, #160	; 0xa0
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	2200      	movs	r2, #0
 8000b96:	212e      	movs	r1, #46	; 0x2e
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 fbfb 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0212      	lsls	r2, r2, #8
 8000ba4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2201      	movs	r2, #1
 8000baa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2201      	movs	r2, #1
 8000bb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <MX_GPIO_Init+0xd4>)
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	0010      	movs	r0, r2
 8000bc0:	f001 fa84 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000bc4:	0021      	movs	r1, r4
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	222e      	movs	r2, #46	; 0x2e
 8000bca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2201      	movs	r2, #1
 8000bd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	187a      	adds	r2, r7, r1
 8000be0:	23a0      	movs	r3, #160	; 0xa0
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	0011      	movs	r1, r2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fa70 	bl	80020cc <HAL_GPIO_Init>

}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b009      	add	sp, #36	; 0x24
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	50000800 	.word	0x50000800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x44>)
 8000c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_MspInit+0x44>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x44>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4013      	ands	r3, r2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x44>)
 8000c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_MspInit+0x44>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0549      	lsls	r1, r1, #21
 8000c30:	430a      	orrs	r2, r1
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_MspInit+0x44>)
 8000c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	055b      	lsls	r3, r3, #21
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b091      	sub	sp, #68	; 0x44
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	232c      	movs	r3, #44	; 0x2c
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2314      	movs	r3, #20
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f003 f95a 	bl	8003f1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	2414      	movs	r4, #20
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	2318      	movs	r3, #24
 8000c70:	001a      	movs	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	f003 f952 	bl	8003f1c <memset>
  if(hadc->Instance==ADC1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <HAL_ADC_MspInit+0xb0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d139      	bne.n	8000cf6 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	01d2      	lsls	r2, r2, #7
 8000c88:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 f876 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c9c:	f7ff ffae 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_ADC_MspInit+0xb4>)
 8000ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_ADC_MspInit+0xb4>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0349      	lsls	r1, r1, #13
 8000caa:	430a      	orrs	r2, r1
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_ADC_MspInit+0xb4>)
 8000cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	035b      	lsls	r3, r3, #13
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_ADC_MspInit+0xb4>)
 8000cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_ADC_MspInit+0xb4>)
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_ADC_MspInit+0xb4>)
 8000cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8000cd4:	212c      	movs	r1, #44	; 0x2c
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	22c1      	movs	r2, #193	; 0xc1
 8000cda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	187a      	adds	r2, r7, r1
 8000cea:	23a0      	movs	r3, #160	; 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 f9eb 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b011      	add	sp, #68	; 0x44
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	40012400 	.word	0x40012400
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b08f      	sub	sp, #60	; 0x3c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	2424      	movs	r4, #36	; 0x24
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	0018      	movs	r0, r3
 8000d16:	2314      	movs	r3, #20
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f003 f8fe 	bl	8003f1c <memset>
  if(hspi->Instance==SPI1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a66      	ldr	r2, [pc, #408]	; (8000ec0 <HAL_SPI_MspInit+0x1b8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d153      	bne.n	8000dd2 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2a:	4b66      	ldr	r3, [pc, #408]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2e:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	0149      	lsls	r1, r1, #5
 8000d34:	430a      	orrs	r2, r1
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
 8000d38:	4b62      	ldr	r3, [pc, #392]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	015b      	lsls	r3, r3, #5
 8000d40:	4013      	ands	r3, r2
 8000d42:	623b      	str	r3, [r7, #32]
 8000d44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b5f      	ldr	r3, [pc, #380]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4a:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
 8000d52:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d56:	2201      	movs	r2, #1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b59      	ldr	r3, [pc, #356]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d62:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d64:	2102      	movs	r1, #2
 8000d66:	430a      	orrs	r2, r1
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
 8000d6a:	4b56      	ldr	r3, [pc, #344]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6e:	2202      	movs	r2, #2
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	22c0      	movs	r2, #192	; 0xc0
 8000d7a:	0152      	lsls	r2, r2, #5
 8000d7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	2202      	movs	r2, #2
 8000d82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	193a      	adds	r2, r7, r4
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f001 f994 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da4:	0021      	movs	r1, r4
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2208      	movs	r2, #8
 8000daa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2202      	movs	r2, #2
 8000db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	4a40      	ldr	r2, [pc, #256]	; (8000ec8 <HAL_SPI_MspInit+0x1c0>)
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0010      	movs	r0, r2
 8000dcc:	f001 f97e 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dd0:	e071      	b.n	8000eb6 <HAL_SPI_MspInit+0x1ae>
  else if(hspi->Instance==SPI2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a3d      	ldr	r2, [pc, #244]	; (8000ecc <HAL_SPI_MspInit+0x1c4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d16c      	bne.n	8000eb6 <HAL_SPI_MspInit+0x1ae>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ddc:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	01c9      	lsls	r1, r1, #7
 8000de6:	430a      	orrs	r2, r1
 8000de8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dea:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	01db      	lsls	r3, r3, #7
 8000df2:	4013      	ands	r3, r2
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000dfe:	2102      	movs	r1, #2
 8000e00:	430a      	orrs	r2, r1
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e08:	2202      	movs	r2, #2
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_SPI_MspInit+0x1bc>)
 8000e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e20:	2201      	movs	r2, #1
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_2;
 8000e28:	2124      	movs	r1, #36	; 0x24
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2282      	movs	r2, #130	; 0x82
 8000e2e:	0052      	lsls	r2, r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	000c      	movs	r4, r1
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2202      	movs	r2, #2
 8000e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2201      	movs	r2, #1
 8000e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <HAL_SPI_MspInit+0x1c0>)
 8000e50:	0019      	movs	r1, r3
 8000e52:	0010      	movs	r0, r2
 8000e54:	f001 f93a 	bl	80020cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e58:	0021      	movs	r1, r4
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	000c      	movs	r4, r1
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2202      	movs	r2, #2
 8000e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2205      	movs	r2, #5
 8000e7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <HAL_SPI_MspInit+0x1c0>)
 8000e80:	0019      	movs	r1, r3
 8000e82:	0010      	movs	r0, r2
 8000e84:	f001 f922 	bl	80020cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e88:	0021      	movs	r1, r4
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2202      	movs	r2, #2
 8000e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	187a      	adds	r2, r7, r1
 8000eaa:	23a0      	movs	r3, #160	; 0xa0
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f001 f90b 	bl	80020cc <HAL_GPIO_Init>
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b00f      	add	sp, #60	; 0x3c
 8000ebc:	bd90      	pop	{r4, r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40013000 	.word	0x40013000
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	50000400 	.word	0x50000400
 8000ecc:	40003800 	.word	0x40003800

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_TIM_Base_MspInit+0x38>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10d      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0209      	lsls	r1, r1, #8
 8000eec:	430a      	orrs	r2, r1
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b004      	add	sp, #16
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	40002000 	.word	0x40002000
 8000f0c:	40021000 	.word	0x40021000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f89c 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f4c:	f7ff fff7 	bl	8000f3e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f76:	f002 ffad 	bl	8003ed4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f7a:	f7ff fc2d 	bl	80007d8 <main>

08000f7e <LoopForever>:

LoopForever:
  b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   r0, =_estack
 8000f80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f8c:	08003f8c 	.word	0x08003f8c
  ldr r2, =_sbss
 8000f90:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f94:	200001e8 	.word	0x200001e8

08000f98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x3c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Init+0x3c>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0049      	lsls	r1, r1, #1
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f810 	bl	8000fdc <HAL_InitTick>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	e001      	b.n	8000fcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fe1e 	bl	8000c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	781b      	ldrb	r3, [r3, #0]
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_InitTick+0x88>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d02b      	beq.n	800104c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_InitTick+0x8c>)
 8000ff6:	681c      	ldr	r4, [r3, #0]
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_InitTick+0x88>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	23fa      	movs	r3, #250	; 0xfa
 8001000:	0098      	lsls	r0, r3, #2
 8001002:	f7ff f87d 	bl	8000100 <__udivsi3>
 8001006:	0003      	movs	r3, r0
 8001008:	0019      	movs	r1, r3
 800100a:	0020      	movs	r0, r4
 800100c:	f7ff f878 	bl	8000100 <__udivsi3>
 8001010:	0003      	movs	r3, r0
 8001012:	0018      	movs	r0, r3
 8001014:	f001 f84d 	bl	80020b2 <HAL_SYSTICK_Config>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d112      	bne.n	8001042 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d80a      	bhi.n	8001038 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	2200      	movs	r2, #0
 800102a:	0018      	movs	r0, r3
 800102c:	f001 f82c 	bl	8002088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_InitTick+0x90>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e00d      	b.n	8001054 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001038:	230f      	movs	r3, #15
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e008      	b.n	8001054 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001042:	230f      	movs	r3, #15
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e003      	b.n	8001054 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800104c:	230f      	movs	r3, #15
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	781b      	ldrb	r3, [r3, #0]
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b005      	add	sp, #20
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	20000014 	.word	0x20000014
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000010 	.word	0x20000010

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	001a      	movs	r2, r3
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x20>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	18d2      	adds	r2, r2, r3
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_IncTick+0x20>)
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20000014 	.word	0x20000014
 8001090:	200001e4 	.word	0x200001e4

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <HAL_GetTick+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	200001e4 	.word	0x200001e4

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fff0 	bl	8001094 <HAL_GetTick>
 80010b4:	0003      	movs	r3, r0
 80010b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	001a      	movs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	189b      	adds	r3, r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	f7ff ffe0 	bl	8001094 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000014 	.word	0x20000014

080010f0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001100:	401a      	ands	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	fe3fffff 	.word	0xfe3fffff

08001118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	23e0      	movs	r3, #224	; 0xe0
 8001126:	045b      	lsls	r3, r3, #17
 8001128:	4013      	ands	r3, r2
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}

08001132 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	2104      	movs	r1, #4
 8001146:	400a      	ands	r2, r1
 8001148:	2107      	movs	r1, #7
 800114a:	4091      	lsls	r1, r2
 800114c:	000a      	movs	r2, r1
 800114e:	43d2      	mvns	r2, r2
 8001150:	401a      	ands	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2104      	movs	r1, #4
 8001156:	400b      	ands	r3, r1
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4099      	lsls	r1, r3
 800115c:	000b      	movs	r3, r1
 800115e:	431a      	orrs	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b004      	add	sp, #16
 800116a:	bd80      	pop	{r7, pc}

0800116c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	2104      	movs	r1, #4
 800117e:	400a      	ands	r2, r1
 8001180:	2107      	movs	r1, #7
 8001182:	4091      	lsls	r1, r2
 8001184:	000a      	movs	r2, r1
 8001186:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2104      	movs	r1, #4
 800118c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800118e:	40da      	lsrs	r2, r3
 8001190:	0013      	movs	r3, r2
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}

0800119a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	23c0      	movs	r3, #192	; 0xc0
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4013      	ands	r3, r2
 80011ac:	d101      	bne.n	80011b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}

080011bc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	211f      	movs	r1, #31
 80011d0:	400a      	ands	r2, r1
 80011d2:	210f      	movs	r1, #15
 80011d4:	4091      	lsls	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	43d2      	mvns	r2, r2
 80011da:	401a      	ands	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	0e9b      	lsrs	r3, r3, #26
 80011e0:	210f      	movs	r1, #15
 80011e2:	4019      	ands	r1, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	201f      	movs	r0, #31
 80011e8:	4003      	ands	r3, r0
 80011ea:	4099      	lsls	r1, r3
 80011ec:	000b      	movs	r3, r1
 80011ee:	431a      	orrs	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b004      	add	sp, #16
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	035b      	lsls	r3, r3, #13
 800120e:	0b5b      	lsrs	r3, r3, #13
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}

0800121e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	0352      	lsls	r2, r2, #13
 8001230:	0b52      	lsrs	r2, r2, #13
 8001232:	43d2      	mvns	r2, r2
 8001234:	401a      	ands	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	0212      	lsls	r2, r2, #8
 8001258:	43d2      	mvns	r2, r2
 800125a:	401a      	ands	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	400b      	ands	r3, r1
 8001264:	4904      	ldr	r1, [pc, #16]	; (8001278 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001266:	400b      	ands	r3, r1
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	07ffff00 	.word	0x07ffff00

0800127c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800128a:	4013      	ands	r3, r2
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	0552      	lsls	r2, r2, #21
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	6fffffe8 	.word	0x6fffffe8

080012a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	055b      	lsls	r3, r3, #21
 80012b4:	401a      	ands	r2, r3
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	055b      	lsls	r3, r3, #21
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d101      	bne.n	80012c2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}

080012cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <LL_ADC_Enable+0x20>)
 80012da:	4013      	ands	r3, r2
 80012dc:	2201      	movs	r2, #1
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	7fffffe8 	.word	0x7fffffe8

080012f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <LL_ADC_Disable+0x20>)
 80012fe:	4013      	ands	r3, r2
 8001300:	2202      	movs	r2, #2
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}
 8001310:	7fffffe8 	.word	0x7fffffe8

08001314 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2201      	movs	r2, #1
 8001322:	4013      	ands	r3, r2
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <LL_ADC_IsEnabled+0x18>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <LL_ADC_IsEnabled+0x1a>
 800132c:	2300      	movs	r3, #0
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}

08001336 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	2b02      	cmp	r3, #2
 8001348:	d101      	bne.n	800134e <LL_ADC_IsDisableOngoing+0x18>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_IsDisableOngoing+0x1a>
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}

08001358 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <LL_ADC_REG_StartConversion+0x20>)
 8001366:	4013      	ands	r3, r2
 8001368:	2204      	movs	r2, #4
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}
 8001378:	7fffffe8 	.word	0x7fffffe8

0800137c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <LL_ADC_REG_StopConversion+0x20>)
 800138a:	4013      	ands	r3, r2
 800138c:	2210      	movs	r2, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	7fffffe8 	.word	0x7fffffe8

080013a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d101      	bne.n	80013b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	231f      	movs	r3, #31
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e17f      	b.n	80016ea <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fc2b 	bl	8000c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2254      	movs	r2, #84	; 0x54
 8001404:	2100      	movs	r1, #0
 8001406:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff ff49 	bl	80012a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001412:	1e03      	subs	r3, r0, #0
 8001414:	d115      	bne.n	8001442 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0018      	movs	r0, r3
 800141c:	f7ff ff2e 	bl	800127c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001420:	4bb4      	ldr	r3, [pc, #720]	; (80016f4 <HAL_ADC_Init+0x330>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	49b4      	ldr	r1, [pc, #720]	; (80016f8 <HAL_ADC_Init+0x334>)
 8001426:	0018      	movs	r0, r3
 8001428:	f7fe fe6a 	bl	8000100 <__udivsi3>
 800142c:	0003      	movs	r3, r0
 800142e:	3301      	adds	r3, #1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001434:	e002      	b.n	800143c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3b01      	subs	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f9      	bne.n	8001436 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	0018      	movs	r0, r3
 8001448:	f7ff ff2c 	bl	80012a4 <LL_ADC_IsInternalRegulatorEnabled>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d10f      	bne.n	8001470 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	2210      	movs	r2, #16
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001460:	2201      	movs	r2, #1
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001468:	231f      	movs	r3, #31
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff ff93 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 800147a:	0003      	movs	r3, r0
 800147c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	2210      	movs	r2, #16
 8001484:	4013      	ands	r3, r2
 8001486:	d000      	beq.n	800148a <HAL_ADC_Init+0xc6>
 8001488:	e122      	b.n	80016d0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d000      	beq.n	8001492 <HAL_ADC_Init+0xce>
 8001490:	e11e      	b.n	80016d0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a99      	ldr	r2, [pc, #612]	; (80016fc <HAL_ADC_Init+0x338>)
 8001498:	4013      	ands	r3, r2
 800149a:	2202      	movs	r2, #2
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff ff34 	bl	8001314 <LL_ADC_IsEnabled>
 80014ac:	1e03      	subs	r3, r0, #0
 80014ae:	d000      	beq.n	80014b2 <HAL_ADC_Init+0xee>
 80014b0:	e0ad      	b.n	800160e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7e1b      	ldrb	r3, [r3, #24]
 80014ba:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014bc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7e5b      	ldrb	r3, [r3, #25]
 80014c2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014c4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7e9b      	ldrb	r3, [r3, #26]
 80014ca:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014cc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_ADC_Init+0x118>
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	015b      	lsls	r3, r3, #5
 80014da:	e000      	b.n	80014de <HAL_ADC_Init+0x11a>
 80014dc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014de:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014e4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	da04      	bge.n	80014f8 <HAL_ADC_Init+0x134>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	e001      	b.n	80014fc <HAL_ADC_Init+0x138>
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80014fc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	212c      	movs	r1, #44	; 0x2c
 8001502:	5c5b      	ldrb	r3, [r3, r1]
 8001504:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001506:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2220      	movs	r2, #32
 8001512:	5c9b      	ldrb	r3, [r3, r2]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d115      	bne.n	8001544 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7e9b      	ldrb	r3, [r3, #26]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	0252      	lsls	r2, r2, #9
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	e00b      	b.n	8001544 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	2220      	movs	r2, #32
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2201      	movs	r2, #1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00a      	beq.n	8001562 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001550:	23e0      	movs	r3, #224	; 0xe0
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800155a:	4313      	orrs	r3, r2
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a65      	ldr	r2, [pc, #404]	; (8001700 <HAL_ADC_Init+0x33c>)
 800156a:	4013      	ands	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	430a      	orrs	r2, r1
 8001576:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	0f9b      	lsrs	r3, r3, #30
 800157e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001584:	4313      	orrs	r3, r2
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	223c      	movs	r2, #60	; 0x3c
 8001590:	5c9b      	ldrb	r3, [r3, r2]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d111      	bne.n	80015ba <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	0f9b      	lsrs	r3, r3, #30
 800159c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015a2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80015a8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80015ae:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	2201      	movs	r2, #1
 80015b6:	4313      	orrs	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a50      	ldr	r2, [pc, #320]	; (8001704 <HAL_ADC_Init+0x340>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	0019      	movs	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	23c0      	movs	r3, #192	; 0xc0
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	429a      	cmp	r2, r3
 80015da:	d018      	beq.n	800160e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	05db      	lsls	r3, r3, #23
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d012      	beq.n	800160e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	061b      	lsls	r3, r3, #24
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d00c      	beq.n	800160e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80015f4:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_ADC_Init+0x344>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a44      	ldr	r2, [pc, #272]	; (800170c <HAL_ADC_Init+0x348>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	23f0      	movs	r3, #240	; 0xf0
 8001604:	039b      	lsls	r3, r3, #14
 8001606:	401a      	ands	r2, r3
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <HAL_ADC_Init+0x344>)
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001616:	001a      	movs	r2, r3
 8001618:	2100      	movs	r1, #0
 800161a:	f7ff fd8a 	bl	8001132 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001626:	493a      	ldr	r1, [pc, #232]	; (8001710 <HAL_ADC_Init+0x34c>)
 8001628:	001a      	movs	r2, r3
 800162a:	f7ff fd82 	bl	8001132 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2110      	movs	r1, #16
 8001642:	4249      	negs	r1, r1
 8001644:	430a      	orrs	r2, r1
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
 8001648:	e018      	b.n	800167c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	039b      	lsls	r3, r3, #14
 8001652:	429a      	cmp	r2, r3
 8001654:	d112      	bne.n	800167c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	3b01      	subs	r3, #1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	221c      	movs	r2, #28
 8001666:	4013      	ands	r3, r2
 8001668:	2210      	movs	r2, #16
 800166a:	4252      	negs	r2, r2
 800166c:	409a      	lsls	r2, r3
 800166e:	0011      	movs	r1, r2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2100      	movs	r1, #0
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff fd72 	bl	800116c <LL_ADC_GetSamplingTimeCommonChannels>
 8001688:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800168e:	429a      	cmp	r2, r3
 8001690:	d10b      	bne.n	80016aa <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	2203      	movs	r2, #3
 800169e:	4393      	bics	r3, r2
 80016a0:	2201      	movs	r2, #1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016a8:	e01c      	b.n	80016e4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	2212      	movs	r2, #18
 80016b0:	4393      	bics	r3, r2
 80016b2:	2210      	movs	r2, #16
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2201      	movs	r2, #1
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80016c6:	231f      	movs	r3, #31
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016ce:	e009      	b.n	80016e4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	2210      	movs	r2, #16
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016dc:	231f      	movs	r3, #31
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016e4:	231f      	movs	r3, #31
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	781b      	ldrb	r3, [r3, #0]
}
 80016ea:	0018      	movs	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b008      	add	sp, #32
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	00030d40 	.word	0x00030d40
 80016fc:	fffffefd 	.word	0xfffffefd
 8001700:	fffe0201 	.word	0xfffe0201
 8001704:	1ffffc02 	.word	0x1ffffc02
 8001708:	40012708 	.word	0x40012708
 800170c:	ffc3ffff 	.word	0xffc3ffff
 8001710:	07ffff04 	.word	0x07ffff04

08001714 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001714:	b5b0      	push	{r4, r5, r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fe3d 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d135      	bne.n	8001796 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2254      	movs	r2, #84	; 0x54
 800172e:	5c9b      	ldrb	r3, [r3, r2]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_ADC_Start+0x24>
 8001734:	2302      	movs	r3, #2
 8001736:	e035      	b.n	80017a4 <HAL_ADC_Start+0x90>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2254      	movs	r2, #84	; 0x54
 800173c:	2101      	movs	r1, #1
 800173e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001740:	250f      	movs	r5, #15
 8001742:	197c      	adds	r4, r7, r5
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 fb28 	bl	8001d9c <ADC_Enable>
 800174c:	0003      	movs	r3, r0
 800174e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001750:	197b      	adds	r3, r7, r5
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d119      	bne.n	800178c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_ADC_Start+0x98>)
 800175e:	4013      	ands	r3, r2
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0052      	lsls	r2, r2, #1
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	221c      	movs	r2, #28
 8001776:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2254      	movs	r2, #84	; 0x54
 800177c:	2100      	movs	r1, #0
 800177e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff fde7 	bl	8001358 <LL_ADC_REG_StartConversion>
 800178a:	e008      	b.n	800179e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2254      	movs	r2, #84	; 0x54
 8001790:	2100      	movs	r1, #0
 8001792:	5499      	strb	r1, [r3, r2]
 8001794:	e003      	b.n	800179e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001796:	230f      	movs	r3, #15
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	2202      	movs	r2, #2
 800179c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800179e:	230f      	movs	r3, #15
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	781b      	ldrb	r3, [r3, #0]
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b004      	add	sp, #16
 80017aa:	bdb0      	pop	{r4, r5, r7, pc}
 80017ac:	fffff0fe 	.word	0xfffff0fe

080017b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2254      	movs	r2, #84	; 0x54
 80017bc:	5c9b      	ldrb	r3, [r3, r2]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Stop+0x16>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e029      	b.n	800181a <HAL_ADC_Stop+0x6a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2254      	movs	r2, #84	; 0x54
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80017ce:	250f      	movs	r5, #15
 80017d0:	197c      	adds	r4, r7, r5
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 fa9f 	bl	8001d18 <ADC_ConversionStop>
 80017da:	0003      	movs	r3, r0
 80017dc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017de:	197b      	adds	r3, r7, r5
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d112      	bne.n	800180c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80017e6:	197c      	adds	r4, r7, r5
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fb5c 	bl	8001ea8 <ADC_Disable>
 80017f0:	0003      	movs	r3, r0
 80017f2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80017f4:	197b      	adds	r3, r7, r5
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d107      	bne.n	800180c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_ADC_Stop+0x74>)
 8001802:	4013      	ands	r3, r2
 8001804:	2201      	movs	r2, #1
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2254      	movs	r2, #84	; 0x54
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001814:	230f      	movs	r3, #15
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	781b      	ldrb	r3, [r3, #0]
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bdb0      	pop	{r4, r5, r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	fffffefe 	.word	0xfffffefe

08001828 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b08      	cmp	r3, #8
 8001838:	d102      	bne.n	8001840 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800183a:	2308      	movs	r3, #8
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e00f      	b.n	8001860 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	2220      	movs	r2, #32
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e072      	b.n	8001942 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800185c:	2304      	movs	r3, #4
 800185e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001860:	f7ff fc18 	bl	8001094 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001868:	e01f      	b.n	80018aa <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	d01c      	beq.n	80018aa <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001870:	f7ff fc10 	bl	8001094 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d302      	bcc.n	8001886 <HAL_ADC_PollForConversion+0x5e>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d111      	bne.n	80018aa <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	d10b      	bne.n	80018aa <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	2204      	movs	r2, #4
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2254      	movs	r2, #84	; 0x54
 80018a2:	2100      	movs	r1, #0
 80018a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04b      	b.n	8001942 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0d9      	beq.n	800186a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fc66 	bl	800119a <LL_ADC_REG_IsTriggerSourceSWStart>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d02e      	beq.n	8001930 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7e9b      	ldrb	r3, [r3, #26]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d12a      	bne.n	8001930 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2208      	movs	r2, #8
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d123      	bne.n	8001930 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff fd57 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d110      	bne.n	8001918 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	210c      	movs	r1, #12
 8001902:	438a      	bics	r2, r1
 8001904:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_ADC_PollForConversion+0x124>)
 800190c:	4013      	ands	r3, r2
 800190e:	2201      	movs	r2, #1
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	659a      	str	r2, [r3, #88]	; 0x58
 8001916:	e00b      	b.n	8001930 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	2220      	movs	r2, #32
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2201      	movs	r2, #1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7e1b      	ldrb	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d103      	bne.n	8001940 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	220c      	movs	r2, #12
 800193e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b004      	add	sp, #16
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	fffffefe 	.word	0xfffffefe

08001950 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001972:	2317      	movs	r3, #23
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2254      	movs	r2, #84	; 0x54
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x24>
 8001988:	2302      	movs	r3, #2
 800198a:	e1c0      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x3a6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2254      	movs	r2, #84	; 0x54
 8001990:	2101      	movs	r1, #1
 8001992:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff fd01 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d000      	beq.n	80019a4 <HAL_ADC_ConfigChannel+0x3c>
 80019a2:	e1a3      	b.n	8001cec <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d100      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x46>
 80019ac:	e143      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d004      	beq.n	80019c4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019be:	4ac1      	ldr	r2, [pc, #772]	; (8001cc4 <HAL_ADC_ConfigChannel+0x35c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d108      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0019      	movs	r1, r3
 80019ce:	0010      	movs	r0, r2
 80019d0:	f7ff fc14 	bl	80011fc <LL_ADC_REG_SetSequencerChAdd>
 80019d4:	e0c9      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	211f      	movs	r1, #31
 80019e0:	400b      	ands	r3, r1
 80019e2:	210f      	movs	r1, #15
 80019e4:	4099      	lsls	r1, r3
 80019e6:	000b      	movs	r3, r1
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4013      	ands	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	035b      	lsls	r3, r3, #13
 80019f4:	0b5b      	lsrs	r3, r3, #13
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x9c>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0e9b      	lsrs	r3, r3, #26
 80019fe:	221f      	movs	r2, #31
 8001a00:	4013      	ands	r3, r2
 8001a02:	e098      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d000      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0xa8>
 8001a0e:	e091      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x1cc>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d000      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0xb4>
 8001a1a:	e089      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1c8>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2204      	movs	r2, #4
 8001a22:	4013      	ands	r3, r2
 8001a24:	d000      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0xc0>
 8001a26:	e081      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x1c4>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d000      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0xcc>
 8001a32:	e079      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1c0>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2210      	movs	r2, #16
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d000      	beq.n	8001a40 <HAL_ADC_ConfigChannel+0xd8>
 8001a3e:	e071      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x1bc>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2220      	movs	r2, #32
 8001a46:	4013      	ands	r3, r2
 8001a48:	d000      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0xe4>
 8001a4a:	e069      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x1b8>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2240      	movs	r2, #64	; 0x40
 8001a52:	4013      	ands	r3, r2
 8001a54:	d000      	beq.n	8001a58 <HAL_ADC_ConfigChannel+0xf0>
 8001a56:	e061      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x1b4>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d000      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0xfc>
 8001a62:	e059      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x1b0>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d151      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x1ac>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d149      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1a8>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	d141      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1a4>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4013      	ands	r3, r2
 8001a92:	d139      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1a0>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d131      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x19c>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	019b      	lsls	r3, r3, #6
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d129      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x198>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	01db      	lsls	r3, r3, #7
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d121      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x194>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d119      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x190>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	025b      	lsls	r3, r3, #9
 8001acc:	4013      	ands	r3, r2
 8001ace:	d111      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x18c>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d109      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x188>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	02db      	lsls	r3, r3, #11
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d001      	beq.n	8001aec <HAL_ADC_ConfigChannel+0x184>
 8001ae8:	2312      	movs	r3, #18
 8001aea:	e024      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e022      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001af0:	2311      	movs	r3, #17
 8001af2:	e020      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001af4:	2310      	movs	r3, #16
 8001af6:	e01e      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001af8:	230f      	movs	r3, #15
 8001afa:	e01c      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001afc:	230e      	movs	r3, #14
 8001afe:	e01a      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b00:	230d      	movs	r3, #13
 8001b02:	e018      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b04:	230c      	movs	r3, #12
 8001b06:	e016      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b08:	230b      	movs	r3, #11
 8001b0a:	e014      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	e012      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b10:	2309      	movs	r3, #9
 8001b12:	e010      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b14:	2308      	movs	r3, #8
 8001b16:	e00e      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b18:	2307      	movs	r3, #7
 8001b1a:	e00c      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	e00a      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e008      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b24:	2304      	movs	r3, #4
 8001b26:	e006      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e004      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b34:	2300      	movs	r3, #0
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	6852      	ldr	r2, [r2, #4]
 8001b3a:	201f      	movs	r0, #31
 8001b3c:	4002      	ands	r2, r0
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	000a      	movs	r2, r1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d808      	bhi.n	8001b6a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	001a      	movs	r2, r3
 8001b66:	f7ff fb29 	bl	80011bc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	001a      	movs	r2, r3
 8001b78:	f7ff fb64 	bl	8001244 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db00      	blt.n	8001b86 <HAL_ADC_ConfigChannel+0x21e>
 8001b84:	e0bc      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b86:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_ADC_ConfigChannel+0x360>)
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff fac5 	bl	8001118 <LL_ADC_GetCommonPathInternalCh>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_ADC_ConfigChannel+0x364>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d122      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ba4:	d11d      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0412      	lsls	r2, r2, #16
 8001bac:	4313      	orrs	r3, r2
 8001bae:	4a46      	ldr	r2, [pc, #280]	; (8001cc8 <HAL_ADC_ConfigChannel+0x360>)
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	f7ff fa9c 	bl	80010f0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb8:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <HAL_ADC_ConfigChannel+0x368>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4945      	ldr	r1, [pc, #276]	; (8001cd4 <HAL_ADC_ConfigChannel+0x36c>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7fe fa9e 	bl	8000100 <__udivsi3>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	0013      	movs	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	189b      	adds	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bd2:	e002      	b.n	8001bda <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f9      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001be0:	e08e      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a3c      	ldr	r2, [pc, #240]	; (8001cd8 <HAL_ADC_ConfigChannel+0x370>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d10e      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	045b      	lsls	r3, r3, #17
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d109      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0452      	lsls	r2, r2, #17
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	4a32      	ldr	r2, [pc, #200]	; (8001cc8 <HAL_ADC_ConfigChannel+0x360>)
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	f7ff fa74 	bl	80010f0 <LL_ADC_SetCommonPathInternalCh>
 8001c08:	e07a      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a33      	ldr	r2, [pc, #204]	; (8001cdc <HAL_ADC_ConfigChannel+0x374>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d000      	beq.n	8001c16 <HAL_ADC_ConfigChannel+0x2ae>
 8001c14:	e074      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	03db      	lsls	r3, r3, #15
 8001c1c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c1e:	d000      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x2ba>
 8001c20:	e06e      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	03d2      	lsls	r2, r2, #15
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_ADC_ConfigChannel+0x360>)
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	0010      	movs	r0, r2
 8001c30:	f7ff fa5e 	bl	80010f0 <LL_ADC_SetCommonPathInternalCh>
 8001c34:	e064      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d004      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_ADC_ConfigChannel+0x35c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d107      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0019      	movs	r1, r3
 8001c56:	0010      	movs	r0, r2
 8001c58:	f7ff fae1 	bl	800121e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da4d      	bge.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_ADC_ConfigChannel+0x360>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7ff fa56 	bl	8001118 <LL_ADC_GetCommonPathInternalCh>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <HAL_ADC_ConfigChannel+0x364>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d108      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_ADC_ConfigChannel+0x378>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_ADC_ConfigChannel+0x360>)
 8001c82:	0019      	movs	r1, r3
 8001c84:	0010      	movs	r0, r2
 8001c86:	f7ff fa33 	bl	80010f0 <LL_ADC_SetCommonPathInternalCh>
 8001c8a:	e039      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_ADC_ConfigChannel+0x370>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d108      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_ADC_ConfigChannel+0x37c>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <HAL_ADC_ConfigChannel+0x360>)
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	0010      	movs	r0, r2
 8001ca2:	f7ff fa25 	bl	80010f0 <LL_ADC_SetCommonPathInternalCh>
 8001ca6:	e02b      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_ADC_ConfigChannel+0x374>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d126      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <HAL_ADC_ConfigChannel+0x380>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_ADC_ConfigChannel+0x360>)
 8001cba:	0019      	movs	r1, r3
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	f7ff fa17 	bl	80010f0 <LL_ADC_SetCommonPathInternalCh>
 8001cc2:	e01d      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x398>
 8001cc4:	80000004 	.word	0x80000004
 8001cc8:	40012708 	.word	0x40012708
 8001ccc:	b0001000 	.word	0xb0001000
 8001cd0:	2000000c 	.word	0x2000000c
 8001cd4:	00030d40 	.word	0x00030d40
 8001cd8:	b8004000 	.word	0xb8004000
 8001cdc:	b4002000 	.word	0xb4002000
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cf8:	2317      	movs	r3, #23
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2254      	movs	r2, #84	; 0x54
 8001d04:	2100      	movs	r1, #0
 8001d06:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d08:	2317      	movs	r3, #23
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b006      	add	sp, #24
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)

08001d18 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff fb3b 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 8001d2a:	1e03      	subs	r3, r0, #0
 8001d2c:	d031      	beq.n	8001d92 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff faff 	bl	8001336 <LL_ADC_IsDisableOngoing>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d104      	bne.n	8001d46 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff fb1b 	bl	800137c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d46:	f7ff f9a5 	bl	8001094 <HAL_GetTick>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d4e:	e01a      	b.n	8001d86 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d50:	f7ff f9a0 	bl	8001094 <HAL_GetTick>
 8001d54:	0002      	movs	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d913      	bls.n	8001d86 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2204      	movs	r2, #4
 8001d66:	4013      	ands	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	2210      	movs	r2, #16
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e006      	b.n	8001d94 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d1de      	bne.n	8001d50 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff fab1 	bl	8001314 <LL_ADC_IsEnabled>
 8001db2:	1e03      	subs	r3, r0, #0
 8001db4:	d000      	beq.n	8001db8 <ADC_Enable+0x1c>
 8001db6:	e069      	b.n	8001e8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a36      	ldr	r2, [pc, #216]	; (8001e98 <ADC_Enable+0xfc>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d00d      	beq.n	8001de0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	2210      	movs	r2, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e056      	b.n	8001e8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff fa71 	bl	80012cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <ADC_Enable+0x100>)
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff f993 	bl	8001118 <LL_ADC_GetCommonPathInternalCh>
 8001df2:	0002      	movs	r2, r0
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d00f      	beq.n	8001e1c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <ADC_Enable+0x104>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4928      	ldr	r1, [pc, #160]	; (8001ea4 <ADC_Enable+0x108>)
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7fe f97c 	bl	8000100 <__udivsi3>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001e0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e0e:	e002      	b.n	8001e16 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f9      	bne.n	8001e10 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7e5b      	ldrb	r3, [r3, #25]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d033      	beq.n	8001e8c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f936 	bl	8001094 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e2c:	e027      	b.n	8001e7e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff fa6e 	bl	8001314 <LL_ADC_IsEnabled>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d104      	bne.n	8001e46 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff fa43 	bl	80012cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e46:	f7ff f925 	bl	8001094 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d914      	bls.n	8001e7e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d00d      	beq.n	8001e7e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	2210      	movs	r2, #16
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2201      	movs	r2, #1
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e007      	b.n	8001e8e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2201      	movs	r2, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d1d0      	bne.n	8001e2e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b004      	add	sp, #16
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	80000017 	.word	0x80000017
 8001e9c:	40012708 	.word	0x40012708
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	00030d40 	.word	0x00030d40

08001ea8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fa3e 	bl	8001336 <LL_ADC_IsDisableOngoing>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff fa26 	bl	8001314 <LL_ADC_IsEnabled>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d046      	beq.n	8001f5a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d143      	bne.n	8001f5a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2205      	movs	r2, #5
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10d      	bne.n	8001efc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff fa03 	bl	80012f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ef2:	f7ff f8cf 	bl	8001094 <HAL_GetTick>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001efa:	e028      	b.n	8001f4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	2210      	movs	r2, #16
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e021      	b.n	8001f5c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f18:	f7ff f8bc 	bl	8001094 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d913      	bls.n	8001f4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	2210      	movs	r2, #16
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2201      	movs	r2, #1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e006      	b.n	8001f5c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	d1de      	bne.n	8001f18 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b7f      	cmp	r3, #127	; 0x7f
 8001f78:	d828      	bhi.n	8001fcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7a:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <__NVIC_SetPriority+0xd4>)
 8001f7c:	1dfb      	adds	r3, r7, #7
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	33c0      	adds	r3, #192	; 0xc0
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	589b      	ldr	r3, [r3, r2]
 8001f8a:	1dfa      	adds	r2, r7, #7
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	0011      	movs	r1, r2
 8001f90:	2203      	movs	r2, #3
 8001f92:	400a      	ands	r2, r1
 8001f94:	00d2      	lsls	r2, r2, #3
 8001f96:	21ff      	movs	r1, #255	; 0xff
 8001f98:	4091      	lsls	r1, r2
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	43d2      	mvns	r2, r2
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	019b      	lsls	r3, r3, #6
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	401a      	ands	r2, r3
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	4003      	ands	r3, r0
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb8:	481f      	ldr	r0, [pc, #124]	; (8002038 <__NVIC_SetPriority+0xd4>)
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	33c0      	adds	r3, #192	; 0xc0
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fca:	e031      	b.n	8002030 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <__NVIC_SetPriority+0xd8>)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	3b08      	subs	r3, #8
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3306      	adds	r3, #6
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	18d3      	adds	r3, r2, r3
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1dfa      	adds	r2, r7, #7
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	0011      	movs	r1, r2
 8001fec:	2203      	movs	r2, #3
 8001fee:	400a      	ands	r2, r1
 8001ff0:	00d2      	lsls	r2, r2, #3
 8001ff2:	21ff      	movs	r1, #255	; 0xff
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	43d2      	mvns	r2, r2
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	401a      	ands	r2, r3
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	0018      	movs	r0, r3
 800200c:	2303      	movs	r3, #3
 800200e:	4003      	ands	r3, r0
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <__NVIC_SetPriority+0xd8>)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	001c      	movs	r4, r3
 800201c:	230f      	movs	r3, #15
 800201e:	4023      	ands	r3, r4
 8002020:	3b08      	subs	r3, #8
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	430a      	orrs	r2, r1
 8002026:	3306      	adds	r3, #6
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	18c3      	adds	r3, r0, r3
 800202c:	3304      	adds	r3, #4
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b003      	add	sp, #12
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	045b      	lsls	r3, r3, #17
 8002050:	429a      	cmp	r2, r3
 8002052:	d301      	bcc.n	8002058 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002054:	2301      	movs	r3, #1
 8002056:	e010      	b.n	800207a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <SysTick_Config+0x44>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3a01      	subs	r2, #1
 800205e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002060:	2301      	movs	r3, #1
 8002062:	425b      	negs	r3, r3
 8002064:	2103      	movs	r1, #3
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff ff7c 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x44>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x44>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b002      	add	sp, #8
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	210f      	movs	r1, #15
 8002094:	187b      	adds	r3, r7, r1
 8002096:	1c02      	adds	r2, r0, #0
 8002098:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	187b      	adds	r3, r7, r1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	0011      	movs	r1, r2
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ff5d 	bl	8001f64 <__NVIC_SetPriority>
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b004      	add	sp, #16
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff ffbf 	bl	8002040 <SysTick_Config>
 80020c2:	0003      	movs	r3, r0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020da:	e147      	b.n	800236c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4091      	lsls	r1, r2
 80020e6:	000a      	movs	r2, r1
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d100      	bne.n	80020f4 <HAL_GPIO_Init+0x28>
 80020f2:	e138      	b.n	8002366 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2203      	movs	r2, #3
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d005      	beq.n	800210c <HAL_GPIO_Init+0x40>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	4013      	ands	r3, r2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d130      	bne.n	800216e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	409a      	lsls	r2, r3
 800211a:	0013      	movs	r3, r2
 800211c:	43da      	mvns	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	409a      	lsls	r2, r3
 800212e:	0013      	movs	r3, r2
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002142:	2201      	movs	r2, #1
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
 8002148:	0013      	movs	r3, r2
 800214a:	43da      	mvns	r2, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	2201      	movs	r2, #1
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
 8002160:	0013      	movs	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	4013      	ands	r3, r2
 8002176:	2b03      	cmp	r3, #3
 8002178:	d017      	beq.n	80021aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	43da      	mvns	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	0013      	movs	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d123      	bne.n	80021fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	58d3      	ldr	r3, [r2, r3]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2207      	movs	r2, #7
 80021c8:	4013      	ands	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	409a      	lsls	r2, r3
 80021d0:	0013      	movs	r3, r2
 80021d2:	43da      	mvns	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2107      	movs	r1, #7
 80021e2:	400b      	ands	r3, r1
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	409a      	lsls	r2, r3
 80021e8:	0013      	movs	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	6939      	ldr	r1, [r7, #16]
 80021fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	43da      	mvns	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2203      	movs	r2, #3
 800221c:	401a      	ands	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	23c0      	movs	r3, #192	; 0xc0
 8002238:	029b      	lsls	r3, r3, #10
 800223a:	4013      	ands	r3, r2
 800223c:	d100      	bne.n	8002240 <HAL_GPIO_Init+0x174>
 800223e:	e092      	b.n	8002366 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002240:	4a50      	ldr	r2, [pc, #320]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3318      	adds	r3, #24
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	589b      	ldr	r3, [r3, r2]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2203      	movs	r2, #3
 8002252:	4013      	ands	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	220f      	movs	r2, #15
 8002258:	409a      	lsls	r2, r3
 800225a:	0013      	movs	r3, r2
 800225c:	43da      	mvns	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	23a0      	movs	r3, #160	; 0xa0
 8002268:	05db      	lsls	r3, r3, #23
 800226a:	429a      	cmp	r2, r3
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x1ca>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a45      	ldr	r2, [pc, #276]	; (8002388 <HAL_GPIO_Init+0x2bc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x1c6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a44      	ldr	r2, [pc, #272]	; (800238c <HAL_GPIO_Init+0x2c0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x1c2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a43      	ldr	r2, [pc, #268]	; (8002390 <HAL_GPIO_Init+0x2c4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x1be>
 8002286:	2303      	movs	r3, #3
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x1cc>
 800228a:	2305      	movs	r3, #5
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x1cc>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x1cc>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x1cc>
 8002296:	2300      	movs	r3, #0
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	2103      	movs	r1, #3
 800229c:	400a      	ands	r2, r1
 800229e:	00d2      	lsls	r2, r2, #3
 80022a0:	4093      	lsls	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022a8:	4936      	ldr	r1, [pc, #216]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3318      	adds	r3, #24
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43da      	mvns	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	035b      	lsls	r3, r3, #13
 80022ce:	4013      	ands	r3, r2
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80022e0:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43da      	mvns	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	039b      	lsls	r3, r3, #14
 80022f8:	4013      	ands	r3, r2
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 800230c:	2384      	movs	r3, #132	; 0x84
 800230e:	58d3      	ldr	r3, [r2, r3]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43da      	mvns	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	4013      	ands	r3, r2
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002330:	4914      	ldr	r1, [pc, #80]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 8002332:	2284      	movs	r2, #132	; 0x84
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	58d3      	ldr	r3, [r2, r3]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43da      	mvns	r2, r3
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	025b      	lsls	r3, r3, #9
 8002352:	4013      	ands	r3, r2
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800235e:	4909      	ldr	r1, [pc, #36]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	40da      	lsrs	r2, r3
 8002374:	1e13      	subs	r3, r2, #0
 8002376:	d000      	beq.n	800237a <HAL_GPIO_Init+0x2ae>
 8002378:	e6b0      	b.n	80020dc <HAL_GPIO_Init+0x10>
  }
}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b006      	add	sp, #24
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021800 	.word	0x40021800
 8002388:	50000400 	.word	0x50000400
 800238c:	50000800 	.word	0x50000800
 8002390:	50000c00 	.word	0x50000c00

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	0008      	movs	r0, r1
 800239e:	0011      	movs	r1, r2
 80023a0:	1cbb      	adds	r3, r7, #2
 80023a2:	1c02      	adds	r2, r0, #0
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	1c7b      	adds	r3, r7, #1
 80023a8:	1c0a      	adds	r2, r1, #0
 80023aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ac:	1c7b      	adds	r3, r7, #1
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023b4:	1cbb      	adds	r3, r7, #2
 80023b6:	881a      	ldrh	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023be:	1cbb      	adds	r3, r7, #2
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b002      	add	sp, #8
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d11f      	bne.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	0013      	movs	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	189b      	adds	r3, r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4912      	ldr	r1, [pc, #72]	; (800244c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002402:	0018      	movs	r0, r3
 8002404:	f7fd fe7c 	bl	8000100 <__udivsi3>
 8002408:	0003      	movs	r3, r0
 800240a:	3301      	adds	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800240e:	e008      	b.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3b01      	subs	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e001      	b.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e009      	b.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	401a      	ands	r2, r3
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	429a      	cmp	r2, r3
 8002432:	d0ed      	beq.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b004      	add	sp, #16
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	40007000 	.word	0x40007000
 8002444:	fffff9ff 	.word	0xfffff9ff
 8002448:	2000000c 	.word	0x2000000c
 800244c:	000f4240 	.word	0x000f4240

08002450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e2f3      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d100      	bne.n	800246e <HAL_RCC_OscConfig+0x1e>
 800246c:	e07c      	b.n	8002568 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246e:	4bc3      	ldr	r3, [pc, #780]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2238      	movs	r2, #56	; 0x38
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002478:	4bc0      	ldr	r3, [pc, #768]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2203      	movs	r2, #3
 800247e:	4013      	ands	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b10      	cmp	r3, #16
 8002486:	d102      	bne.n	800248e <HAL_RCC_OscConfig+0x3e>
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d002      	beq.n	8002494 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4bb9      	ldr	r3, [pc, #740]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	029b      	lsls	r3, r3, #10
 800249c:	4013      	ands	r3, r2
 800249e:	d062      	beq.n	8002566 <HAL_RCC_OscConfig+0x116>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d15e      	bne.n	8002566 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e2ce      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	025b      	lsls	r3, r3, #9
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_OscConfig+0x78>
 80024b8:	4bb0      	ldr	r3, [pc, #704]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4baf      	ldr	r3, [pc, #700]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	0249      	lsls	r1, r1, #9
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e020      	b.n	800250a <HAL_RCC_OscConfig+0xba>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	23a0      	movs	r3, #160	; 0xa0
 80024ce:	02db      	lsls	r3, r3, #11
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10e      	bne.n	80024f2 <HAL_RCC_OscConfig+0xa2>
 80024d4:	4ba9      	ldr	r3, [pc, #676]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4ba8      	ldr	r3, [pc, #672]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	02c9      	lsls	r1, r1, #11
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	4ba6      	ldr	r3, [pc, #664]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4ba5      	ldr	r3, [pc, #660]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	0249      	lsls	r1, r1, #9
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0xba>
 80024f2:	4ba2      	ldr	r3, [pc, #648]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4ba1      	ldr	r3, [pc, #644]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024f8:	49a1      	ldr	r1, [pc, #644]	; (8002780 <HAL_RCC_OscConfig+0x330>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	4b9f      	ldr	r3, [pc, #636]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b9e      	ldr	r3, [pc, #632]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002504:	499f      	ldr	r1, [pc, #636]	; (8002784 <HAL_RCC_OscConfig+0x334>)
 8002506:	400a      	ands	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d014      	beq.n	800253c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe fdbf 	bl	8001094 <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fdba 	bl	8001094 <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e28d      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252e:	4b93      	ldr	r3, [pc, #588]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	029b      	lsls	r3, r3, #10
 8002536:	4013      	ands	r3, r2
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0xcc>
 800253a:	e015      	b.n	8002568 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fdaa 	bl	8001094 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002546:	f7fe fda5 	bl	8001094 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	; 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e278      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002558:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	4013      	ands	r3, r2
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0xf6>
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002566:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x124>
 8002572:	e099      	b.n	80026a8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002574:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2238      	movs	r2, #56	; 0x38
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2203      	movs	r2, #3
 8002584:	4013      	ands	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0x144>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d002      	beq.n	800259a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d135      	bne.n	8002606 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259a:	4b78      	ldr	r3, [pc, #480]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4013      	ands	r3, r2
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x162>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e24b      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b72      	ldr	r3, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a74      	ldr	r2, [pc, #464]	; (8002788 <HAL_RCC_OscConfig+0x338>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	021a      	lsls	r2, r3, #8
 80025c2:	4b6e      	ldr	r3, [pc, #440]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d112      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025ce:	4b6b      	ldr	r3, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6e      	ldr	r2, [pc, #440]	; (800278c <HAL_RCC_OscConfig+0x33c>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025e2:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	2207      	movs	r2, #7
 80025ea:	4013      	ands	r3, r2
 80025ec:	4a68      	ldr	r2, [pc, #416]	; (8002790 <HAL_RCC_OscConfig+0x340>)
 80025ee:	40da      	lsrs	r2, r3
 80025f0:	4b68      	ldr	r3, [pc, #416]	; (8002794 <HAL_RCC_OscConfig+0x344>)
 80025f2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025f4:	4b68      	ldr	r3, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x348>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7fe fcef 	bl	8000fdc <HAL_InitTick>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d051      	beq.n	80026a6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e221      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d030      	beq.n	8002670 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5e      	ldr	r2, [pc, #376]	; (800278c <HAL_RCC_OscConfig+0x33c>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b55      	ldr	r3, [pc, #340]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	0049      	lsls	r1, r1, #1
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fd30 	bl	8001094 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7fe fd2b 	bl	8001094 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1fe      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4013      	ands	r3, r2
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b48      	ldr	r3, [pc, #288]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <HAL_RCC_OscConfig+0x338>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	021a      	lsls	r2, r3, #8
 8002668:	4b44      	ldr	r3, [pc, #272]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	e01b      	b.n	80026a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002676:	4949      	ldr	r1, [pc, #292]	; (800279c <HAL_RCC_OscConfig+0x34c>)
 8002678:	400a      	ands	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fd0a 	bl	8001094 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe fd05 	bl	8001094 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e1d8      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002698:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4013      	ands	r3, r2
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x236>
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2208      	movs	r2, #8
 80026ae:	4013      	ands	r3, r2
 80026b0:	d047      	beq.n	8002742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2238      	movs	r2, #56	; 0x38
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b18      	cmp	r3, #24
 80026bc:	d10a      	bne.n	80026d4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80026be:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d03c      	beq.n	8002742 <HAL_RCC_OscConfig+0x2f2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d138      	bne.n	8002742 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e1ba      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d019      	beq.n	8002710 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e0:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	430a      	orrs	r2, r1
 80026e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fcd4 	bl	8001094 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fccf 	bl	8001094 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1a2      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002708:	2202      	movs	r2, #2
 800270a:	4013      	ands	r3, r2
 800270c:	d0f1      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2a2>
 800270e:	e018      	b.n	8002742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002712:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002716:	2101      	movs	r1, #1
 8002718:	438a      	bics	r2, r1
 800271a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fcba 	bl	8001094 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7fe fcb5 	bl	8001094 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e188      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	d1f1      	bne.n	8002726 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2204      	movs	r2, #4
 8002748:	4013      	ands	r3, r2
 800274a:	d100      	bne.n	800274e <HAL_RCC_OscConfig+0x2fe>
 800274c:	e0c6      	b.n	80028dc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	231f      	movs	r3, #31
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2238      	movs	r2, #56	; 0x38
 800275c:	4013      	ands	r3, r2
 800275e:	2b20      	cmp	r3, #32
 8002760:	d11e      	bne.n	80027a0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2202      	movs	r2, #2
 8002768:	4013      	ands	r3, r2
 800276a:	d100      	bne.n	800276e <HAL_RCC_OscConfig+0x31e>
 800276c:	e0b6      	b.n	80028dc <HAL_RCC_OscConfig+0x48c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d000      	beq.n	8002778 <HAL_RCC_OscConfig+0x328>
 8002776:	e0b1      	b.n	80028dc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e166      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
 800277c:	40021000 	.word	0x40021000
 8002780:	fffeffff 	.word	0xfffeffff
 8002784:	fffbffff 	.word	0xfffbffff
 8002788:	ffff80ff 	.word	0xffff80ff
 800278c:	ffffc7ff 	.word	0xffffc7ff
 8002790:	00f42400 	.word	0x00f42400
 8002794:	2000000c 	.word	0x2000000c
 8002798:	20000010 	.word	0x20000010
 800279c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027a0:	4bac      	ldr	r3, [pc, #688]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80027a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	055b      	lsls	r3, r3, #21
 80027a8:	4013      	ands	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x360>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x362>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4ba7      	ldr	r3, [pc, #668]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80027b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ba:	4ba6      	ldr	r3, [pc, #664]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0549      	lsls	r1, r1, #21
 80027c0:	430a      	orrs	r2, r1
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027c4:	4ba3      	ldr	r3, [pc, #652]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80027c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	055b      	lsls	r3, r3, #21
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027d2:	231f      	movs	r3, #31
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027da:	4b9f      	ldr	r3, [pc, #636]	; (8002a58 <HAL_RCC_OscConfig+0x608>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d11a      	bne.n	800281c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e6:	4b9c      	ldr	r3, [pc, #624]	; (8002a58 <HAL_RCC_OscConfig+0x608>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b9b      	ldr	r3, [pc, #620]	; (8002a58 <HAL_RCC_OscConfig+0x608>)
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	0049      	lsls	r1, r1, #1
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fc4e 	bl	8001094 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fe:	f7fe fc49 	bl	8001094 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e11c      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002810:	4b91      	ldr	r3, [pc, #580]	; (8002a58 <HAL_RCC_OscConfig+0x608>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4013      	ands	r3, r2
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x3e2>
 8002824:	4b8b      	ldr	r3, [pc, #556]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002826:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002828:	4b8a      	ldr	r3, [pc, #552]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 800282a:	2101      	movs	r1, #1
 800282c:	430a      	orrs	r2, r1
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002830:	e01c      	b.n	800286c <HAL_RCC_OscConfig+0x41c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b05      	cmp	r3, #5
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x404>
 800283a:	4b86      	ldr	r3, [pc, #536]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 800283c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002840:	2104      	movs	r1, #4
 8002842:	430a      	orrs	r2, r1
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c
 8002846:	4b83      	ldr	r3, [pc, #524]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002848:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800284a:	4b82      	ldr	r3, [pc, #520]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 800284c:	2101      	movs	r1, #1
 800284e:	430a      	orrs	r2, r1
 8002850:	65da      	str	r2, [r3, #92]	; 0x5c
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0x41c>
 8002854:	4b7f      	ldr	r3, [pc, #508]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002856:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002858:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 800285a:	2101      	movs	r1, #1
 800285c:	438a      	bics	r2, r1
 800285e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002860:	4b7c      	ldr	r3, [pc, #496]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002864:	4b7b      	ldr	r3, [pc, #492]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002866:	2104      	movs	r1, #4
 8002868:	438a      	bics	r2, r1
 800286a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d014      	beq.n	800289e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fc0e 	bl	8001094 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287c:	e009      	b.n	8002892 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe fc09 	bl	8001094 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	4a74      	ldr	r2, [pc, #464]	; (8002a5c <HAL_RCC_OscConfig+0x60c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0db      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x42e>
 800289c:	e013      	b.n	80028c6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fbf9 	bl	8001094 <HAL_GetTick>
 80028a2:	0003      	movs	r3, r0
 80028a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a6:	e009      	b.n	80028bc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7fe fbf4 	bl	8001094 <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	4a6a      	ldr	r2, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x60c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e0c6      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028bc:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2202      	movs	r2, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80028c6:	231f      	movs	r3, #31
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028d0:	4b60      	ldr	r3, [pc, #384]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80028d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d4:	4b5f      	ldr	r3, [pc, #380]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80028d6:	4962      	ldr	r1, [pc, #392]	; (8002a60 <HAL_RCC_OscConfig+0x610>)
 80028d8:	400a      	ands	r2, r1
 80028da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d100      	bne.n	80028e6 <HAL_RCC_OscConfig+0x496>
 80028e4:	e0b0      	b.n	8002a48 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2238      	movs	r2, #56	; 0x38
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d100      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4a4>
 80028f2:	e078      	b.n	80029e6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d153      	bne.n	80029a4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b55      	ldr	r3, [pc, #340]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002902:	4958      	ldr	r1, [pc, #352]	; (8002a64 <HAL_RCC_OscConfig+0x614>)
 8002904:	400a      	ands	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fbc4 	bl	8001094 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe fbbf 	bl	8001094 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e092      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002924:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	049b      	lsls	r3, r3, #18
 800292c:	4013      	ands	r3, r2
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002930:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a4c      	ldr	r2, [pc, #304]	; (8002a68 <HAL_RCC_OscConfig+0x618>)
 8002936:	4013      	ands	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	431a      	orrs	r2, r3
 8002958:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 800295a:	430a      	orrs	r2, r1
 800295c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	0449      	lsls	r1, r1, #17
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800296c:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	0549      	lsls	r1, r1, #21
 8002976:	430a      	orrs	r2, r1
 8002978:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe fb8b 	bl	8001094 <HAL_GetTick>
 800297e:	0003      	movs	r3, r0
 8002980:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fb86 	bl	8001094 <HAL_GetTick>
 8002988:	0002      	movs	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e059      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	049b      	lsls	r3, r3, #18
 800299e:	4013      	ands	r3, r2
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x534>
 80029a2:	e051      	b.n	8002a48 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80029aa:	492e      	ldr	r1, [pc, #184]	; (8002a64 <HAL_RCC_OscConfig+0x614>)
 80029ac:	400a      	ands	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fb70 	bl	8001094 <HAL_GetTick>
 80029b4:	0003      	movs	r3, r0
 80029b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe fb6b 	bl	8001094 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e03e      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	049b      	lsls	r3, r3, #18
 80029d4:	4013      	ands	r3, r2
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80029de:	4923      	ldr	r1, [pc, #140]	; (8002a6c <HAL_RCC_OscConfig+0x61c>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	e030      	b.n	8002a48 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e02b      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_RCC_OscConfig+0x604>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2203      	movs	r2, #3
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11e      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2270      	movs	r2, #112	; 0x70
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d117      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	23fe      	movs	r3, #254	; 0xfe
 8002a18:	01db      	lsls	r3, r3, #7
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d10e      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	23f8      	movs	r3, #248	; 0xf8
 8002a2a:	039b      	lsls	r3, r3, #14
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	0f5b      	lsrs	r3, r3, #29
 8002a3a:	075a      	lsls	r2, r3, #29
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b008      	add	sp, #32
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	00001388 	.word	0x00001388
 8002a60:	efffffff 	.word	0xefffffff
 8002a64:	feffffff 	.word	0xfeffffff
 8002a68:	1fc1808c 	.word	0x1fc1808c
 8002a6c:	effefffc 	.word	0xeffefffc

08002a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0e9      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b76      	ldr	r3, [pc, #472]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2207      	movs	r2, #7
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d91e      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2207      	movs	r2, #7
 8002a98:	4393      	bics	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe faf6 	bl	8001094 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aac:	e009      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aae:	f7fe faf1 	bl	8001094 <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	4a6a      	ldr	r2, [pc, #424]	; (8002c64 <HAL_RCC_ClockConfig+0x1f4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0ca      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	4013      	ands	r3, r2
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1ee      	bne.n	8002aae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d006      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ae4:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002aea:	21e0      	movs	r1, #224	; 0xe0
 8002aec:	01c9      	lsls	r1, r1, #7
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af2:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4a5d      	ldr	r2, [pc, #372]	; (8002c6c <HAL_RCC_ClockConfig+0x1fc>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d057      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	4013      	ands	r3, r2
 8002b22:	d12b      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e097      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b30:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	049b      	lsls	r3, r3, #18
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d11f      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e08b      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b48:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4013      	ands	r3, r2
 8002b52:	d113      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e07f      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b60:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b64:	2202      	movs	r2, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d108      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e074      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2202      	movs	r2, #2
 8002b74:	4013      	ands	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e06d      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b7c:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2207      	movs	r2, #7
 8002b82:	4393      	bics	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b90:	f7fe fa80 	bl	8001094 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b98:	e009      	b.n	8002bae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9a:	f7fe fa7b 	bl	8001094 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <HAL_RCC_ClockConfig+0x1f4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e054      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2238      	movs	r2, #56	; 0x38
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1ec      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d21e      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002be0:	f7fe fa58 	bl	8001094 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002be8:	e009      	b.n	8002bfe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bea:	f7fe fa53 	bl	8001094 <HAL_GetTick>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_RCC_ClockConfig+0x1f4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e02c      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2207      	movs	r2, #7
 8002c04:	4013      	ands	r3, r2
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1ee      	bne.n	8002bea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2204      	movs	r2, #4
 8002c12:	4013      	ands	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <HAL_RCC_ClockConfig+0x200>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c2a:	f000 f829 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c2e:	0001      	movs	r1, r0
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	220f      	movs	r2, #15
 8002c38:	401a      	ands	r2, r3
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_RCC_ClockConfig+0x204>)
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	58d3      	ldr	r3, [r2, r3]
 8002c40:	221f      	movs	r2, #31
 8002c42:	4013      	ands	r3, r2
 8002c44:	000a      	movs	r2, r1
 8002c46:	40da      	lsrs	r2, r3
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x208>)
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_ClockConfig+0x20c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7fe f9c3 	bl	8000fdc <HAL_InitTick>
 8002c56:	0003      	movs	r3, r0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40022000 	.word	0x40022000
 8002c64:	00001388 	.word	0x00001388
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	fffff0ff 	.word	0xfffff0ff
 8002c70:	ffff8fff 	.word	0xffff8fff
 8002c74:	08003f44 	.word	0x08003f44
 8002c78:	2000000c 	.word	0x2000000c
 8002c7c:	20000010 	.word	0x20000010

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c86:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2238      	movs	r2, #56	; 0x38
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0adb      	lsrs	r3, r3, #11
 8002c96:	2207      	movs	r2, #7
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	0013      	movs	r3, r2
 8002ca0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ca2:	6839      	ldr	r1, [r7, #0]
 8002ca4:	4835      	ldr	r0, [pc, #212]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ca6:	f7fd fa2b 	bl	8000100 <__udivsi3>
 8002caa:	0003      	movs	r3, r0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	e05d      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2238      	movs	r2, #56	; 0x38
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d102      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	e054      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2238      	movs	r2, #56	; 0x38
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d138      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cce:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	2207      	movs	r2, #7
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4824      	ldr	r0, [pc, #144]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cf0:	f7fd fa06 	bl	8000100 <__udivsi3>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	227f      	movs	r2, #127	; 0x7f
 8002d00:	4013      	ands	r3, r2
 8002d02:	434b      	muls	r3, r1
 8002d04:	617b      	str	r3, [r7, #20]
        break;
 8002d06:	e00d      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	481c      	ldr	r0, [pc, #112]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d0c:	f7fd f9f8 	bl	8000100 <__udivsi3>
 8002d10:	0003      	movs	r3, r0
 8002d12:	0019      	movs	r1, r3
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	227f      	movs	r2, #127	; 0x7f
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	434b      	muls	r3, r1
 8002d20:	617b      	str	r3, [r7, #20]
        break;
 8002d22:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	0f5b      	lsrs	r3, r3, #29
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	3301      	adds	r3, #1
 8002d30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	6978      	ldr	r0, [r7, #20]
 8002d36:	f7fd f9e3 	bl	8000100 <__udivsi3>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	e015      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2238      	movs	r2, #56	; 0x38
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d103      	bne.n	8002d54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2238      	movs	r2, #56	; 0x38
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b18      	cmp	r3, #24
 8002d5e:	d103      	bne.n	8002d68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d60:	23fa      	movs	r3, #250	; 0xfa
 8002d62:	01db      	lsls	r3, r3, #7
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	e001      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d6c:	693b      	ldr	r3, [r7, #16]
}
 8002d6e:	0018      	movs	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b006      	add	sp, #24
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	007a1200 	.word	0x007a1200

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d8c:	2313      	movs	r3, #19
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d94:	2312      	movs	r3, #18
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	4013      	ands	r3, r2
 8002da6:	d100      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002da8:	e0a3      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2011      	movs	r0, #17
 8002dac:	183b      	adds	r3, r7, r0
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b7f      	ldr	r3, [pc, #508]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	055b      	lsls	r3, r3, #21
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d110      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	0549      	lsls	r1, r1, #21
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dcc:	4b78      	ldr	r3, [pc, #480]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	055b      	lsls	r3, r3, #21
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dda:	183b      	adds	r3, r7, r0
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de0:	4b74      	ldr	r3, [pc, #464]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	0049      	lsls	r1, r1, #1
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dee:	f7fe f951 	bl	8001094 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df6:	e00b      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7fe f94c 	bl	8001094 <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d904      	bls.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e06:	2313      	movs	r3, #19
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	701a      	strb	r2, [r3, #0]
        break;
 8002e0e:	e005      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d0ed      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e1c:	2313      	movs	r3, #19
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d154      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e26:	4b62      	ldr	r3, [pc, #392]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e2a:	23c0      	movs	r3, #192	; 0xc0
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d019      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d014      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	4a5c      	ldr	r2, [pc, #368]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e4c:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e50:	4b57      	ldr	r3, [pc, #348]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	0249      	lsls	r1, r1, #9
 8002e56:	430a      	orrs	r2, r1
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5a:	4b55      	ldr	r3, [pc, #340]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e5e:	4b54      	ldr	r3, [pc, #336]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e60:	4956      	ldr	r1, [pc, #344]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002e62:	400a      	ands	r2, r1
 8002e64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e66:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d016      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe f90e 	bl	8001094 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7c:	e00c      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe f909 	bl	8001094 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	4a4d      	ldr	r2, [pc, #308]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d904      	bls.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e8e:	2313      	movs	r3, #19
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2203      	movs	r2, #3
 8002e94:	701a      	strb	r2, [r3, #0]
            break;
 8002e96:	e004      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e98:	4b45      	ldr	r3, [pc, #276]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d0ed      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ea2:	2313      	movs	r3, #19
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eac:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	4a41      	ldr	r2, [pc, #260]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ec0:	e00c      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ec2:	2312      	movs	r3, #18
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2213      	movs	r2, #19
 8002ec8:	18ba      	adds	r2, r7, r2
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e005      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	2312      	movs	r3, #18
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	2213      	movs	r2, #19
 8002ed6:	18ba      	adds	r2, r7, r2
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002edc:	2311      	movs	r3, #17
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d105      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee6:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eec:	4935      	ldr	r1, [pc, #212]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efc:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	2203      	movs	r2, #3
 8002f02:	4393      	bics	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2220      	movs	r2, #32
 8002f16:	4013      	ands	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f1a:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	01db      	lsls	r3, r3, #7
 8002f36:	4013      	ands	r3, r2
 8002f38:	d015      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	0899      	lsrs	r1, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	05db      	lsls	r3, r3, #23
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d106      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	0249      	lsls	r1, r1, #9
 8002f62:	430a      	orrs	r2, r1
 8002f64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	01db      	lsls	r3, r3, #7
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0249      	lsls	r1, r1, #9
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002fa0:	2312      	movs	r3, #18
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	781b      	ldrb	r3, [r3, #0]
}
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b006      	add	sp, #24
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	fffffcff 	.word	0xfffffcff
 8002fbc:	fffeffff 	.word	0xfffeffff
 8002fc0:	00001388 	.word	0x00001388
 8002fc4:	efffffff 	.word	0xefffffff
 8002fc8:	ffffcfff 	.word	0xffffcfff
 8002fcc:	ffff3fff 	.word	0xffff3fff

08002fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0a8      	b.n	8003134 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	2382      	movs	r3, #130	; 0x82
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d009      	beq.n	800300a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	61da      	str	r2, [r3, #28]
 8002ffc:	e005      	b.n	800300a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	225d      	movs	r2, #93	; 0x5d
 8003014:	5c9b      	ldrb	r3, [r3, r2]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	225c      	movs	r2, #92	; 0x5c
 8003020:	2100      	movs	r1, #0
 8003022:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f7fd fe6e 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	225d      	movs	r2, #93	; 0x5d
 8003030:	2102      	movs	r1, #2
 8003032:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2140      	movs	r1, #64	; 0x40
 8003040:	438a      	bics	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	23e0      	movs	r3, #224	; 0xe0
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	429a      	cmp	r2, r3
 800304e:	d902      	bls.n	8003056 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e002      	b.n	800305c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	015b      	lsls	r3, r3, #5
 800305a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	23f0      	movs	r3, #240	; 0xf0
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	429a      	cmp	r2, r3
 8003066:	d008      	beq.n	800307a <HAL_SPI_Init+0xaa>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	23e0      	movs	r3, #224	; 0xe0
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	429a      	cmp	r2, r3
 8003072:	d002      	beq.n	800307a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	2382      	movs	r3, #130	; 0x82
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	401a      	ands	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	2384      	movs	r3, #132	; 0x84
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	400b      	ands	r3, r1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2102      	movs	r1, #2
 8003096:	400b      	ands	r3, r1
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	2101      	movs	r1, #1
 80030a0:	400b      	ands	r3, r1
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6999      	ldr	r1, [r3, #24]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	400b      	ands	r3, r1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2138      	movs	r1, #56	; 0x38
 80030b6:	400b      	ands	r3, r1
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	400b      	ands	r3, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	0011      	movs	r1, r2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	019b      	lsls	r3, r3, #6
 80030ce:	401a      	ands	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	2204      	movs	r2, #4
 80030e0:	401a      	ands	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2110      	movs	r1, #16
 80030e8:	400b      	ands	r3, r1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	2108      	movs	r1, #8
 80030f2:	400b      	ands	r3, r1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68d9      	ldr	r1, [r3, #12]
 80030fa:	23f0      	movs	r3, #240	; 0xf0
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	400b      	ands	r3, r1
 8003100:	431a      	orrs	r2, r3
 8003102:	0011      	movs	r1, r2
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	015b      	lsls	r3, r3, #5
 800310a:	401a      	ands	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4907      	ldr	r1, [pc, #28]	; (800313c <HAL_SPI_Init+0x16c>)
 8003120:	400a      	ands	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	225d      	movs	r2, #93	; 0x5d
 800312e:	2101      	movs	r1, #1
 8003130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b004      	add	sp, #16
 800313a:	bd80      	pop	{r7, pc}
 800313c:	fffff7ff 	.word	0xfffff7ff

08003140 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	001a      	movs	r2, r3
 800314e:	1cbb      	adds	r3, r7, #2
 8003150:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003152:	2301      	movs	r3, #1
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003156:	2323      	movs	r3, #35	; 0x23
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	225c      	movs	r2, #92	; 0x5c
 8003162:	5c9b      	ldrb	r3, [r3, r2]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_SPI_TransmitReceive+0x2c>
 8003168:	2302      	movs	r3, #2
 800316a:	e1b5      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x398>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	225c      	movs	r2, #92	; 0x5c
 8003170:	2101      	movs	r1, #1
 8003172:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003174:	f7fd ff8e 	bl	8001094 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800317c:	201b      	movs	r0, #27
 800317e:	183b      	adds	r3, r7, r0
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	215d      	movs	r1, #93	; 0x5d
 8003184:	5c52      	ldrb	r2, [r2, r1]
 8003186:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800318e:	2312      	movs	r3, #18
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	1cba      	adds	r2, r7, #2
 8003194:	8812      	ldrh	r2, [r2, #0]
 8003196:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003198:	183b      	adds	r3, r7, r0
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d011      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x84>
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	2382      	movs	r3, #130	; 0x82
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d107      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x7a>
 80031b2:	183b      	adds	r3, r7, r0
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d004      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80031ba:	2323      	movs	r3, #35	; 0x23
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2202      	movs	r2, #2
 80031c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80031c2:	e17e      	b.n	80034c2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d006      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x98>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x98>
 80031d0:	1cbb      	adds	r3, r7, #2
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80031d8:	2323      	movs	r3, #35	; 0x23
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
    goto error;
 80031e0:	e16f      	b.n	80034c2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	225d      	movs	r2, #93	; 0x5d
 80031e6:	5c9b      	ldrb	r3, [r3, r2]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d003      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	225d      	movs	r2, #93	; 0x5d
 80031f2:	2105      	movs	r1, #5
 80031f4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1cba      	adds	r2, r7, #2
 8003206:	2146      	movs	r1, #70	; 0x46
 8003208:	8812      	ldrh	r2, [r2, #0]
 800320a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1cba      	adds	r2, r7, #2
 8003210:	2144      	movs	r1, #68	; 0x44
 8003212:	8812      	ldrh	r2, [r2, #0]
 8003214:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1cba      	adds	r2, r7, #2
 8003220:	8812      	ldrh	r2, [r2, #0]
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1cba      	adds	r2, r7, #2
 8003228:	8812      	ldrh	r2, [r2, #0]
 800322a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	23e0      	movs	r3, #224	; 0xe0
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	429a      	cmp	r2, r3
 8003242:	d908      	bls.n	8003256 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	49a4      	ldr	r1, [pc, #656]	; (80034e0 <HAL_SPI_TransmitReceive+0x3a0>)
 8003250:	400a      	ands	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	e008      	b.n	8003268 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0149      	lsls	r1, r1, #5
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	4013      	ands	r3, r2
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d007      	beq.n	8003286 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2140      	movs	r1, #64	; 0x40
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	23e0      	movs	r3, #224	; 0xe0
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	429a      	cmp	r2, r3
 8003290:	d800      	bhi.n	8003294 <HAL_SPI_TransmitReceive+0x154>
 8003292:	e07f      	b.n	8003394 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x168>
 800329c:	2312      	movs	r3, #18
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d000      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x168>
 80032a6:	e069      	b.n	800337c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032cc:	e056      	b.n	800337c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2202      	movs	r2, #2
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d11b      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x1d4>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x1d4>
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d113      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2201      	movs	r2, #1
 800331c:	4013      	ands	r3, r2
 800331e:	2b01      	cmp	r3, #1
 8003320:	d11c      	bne.n	800335c <HAL_SPI_TransmitReceive+0x21c>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2246      	movs	r2, #70	; 0x46
 8003326:	5a9b      	ldrh	r3, [r3, r2]
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	b292      	uxth	r2, r2
 800333a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2246      	movs	r2, #70	; 0x46
 800334a:	5a9b      	ldrh	r3, [r3, r2]
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b299      	uxth	r1, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2246      	movs	r2, #70	; 0x46
 8003356:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003358:	2301      	movs	r3, #1
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800335c:	f7fd fe9a 	bl	8001094 <HAL_GetTick>
 8003360:	0002      	movs	r2, r0
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003368:	429a      	cmp	r2, r3
 800336a:	d807      	bhi.n	800337c <HAL_SPI_TransmitReceive+0x23c>
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	3301      	adds	r3, #1
 8003370:	d004      	beq.n	800337c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003372:	2323      	movs	r3, #35	; 0x23
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	2203      	movs	r2, #3
 8003378:	701a      	strb	r2, [r3, #0]
        goto error;
 800337a:	e0a2      	b.n	80034c2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1a3      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x18e>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2246      	movs	r2, #70	; 0x46
 800338a:	5a9b      	ldrh	r3, [r3, r2]
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d19d      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x18e>
 8003392:	e085      	b.n	80034a0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0x268>
 800339c:	2312      	movs	r3, #18
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d000      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0x268>
 80033a6:	e070      	b.n	800348a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	7812      	ldrb	r2, [r2, #0]
 80033b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ce:	e05c      	b.n	800348a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2202      	movs	r2, #2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d11c      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x2d8>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d017      	beq.n	8003418 <HAL_SPI_TransmitReceive+0x2d8>
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d114      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	7812      	ldrb	r2, [r2, #0]
 80033fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	2b01      	cmp	r3, #1
 8003424:	d11e      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x324>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2246      	movs	r2, #70	; 0x46
 800342a:	5a9b      	ldrh	r3, [r3, r2]
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d018      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	001a      	movs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2246      	movs	r2, #70	; 0x46
 8003452:	5a9b      	ldrh	r3, [r3, r2]
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b299      	uxth	r1, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2246      	movs	r2, #70	; 0x46
 800345e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003460:	2301      	movs	r3, #1
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003464:	f7fd fe16 	bl	8001094 <HAL_GetTick>
 8003468:	0002      	movs	r2, r0
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003470:	429a      	cmp	r2, r3
 8003472:	d802      	bhi.n	800347a <HAL_SPI_TransmitReceive+0x33a>
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	3301      	adds	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_SPI_TransmitReceive+0x340>
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	2b00      	cmp	r3, #0
 800347e:	d104      	bne.n	800348a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003480:	2323      	movs	r3, #35	; 0x23
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	2203      	movs	r2, #3
 8003486:	701a      	strb	r2, [r3, #0]
        goto error;
 8003488:	e01b      	b.n	80034c2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d19d      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x290>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2246      	movs	r2, #70	; 0x46
 8003498:	5a9b      	ldrh	r3, [r3, r2]
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d197      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 f94c 	bl	8003744 <SPI_EndRxTxTransaction>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80034b0:	2323      	movs	r3, #35	; 0x23
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	661a      	str	r2, [r3, #96]	; 0x60
 80034be:	e000      	b.n	80034c2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80034c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	225d      	movs	r2, #93	; 0x5d
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	225c      	movs	r2, #92	; 0x5c
 80034ce:	2100      	movs	r1, #0
 80034d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80034d2:	2323      	movs	r3, #35	; 0x23
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	781b      	ldrb	r3, [r3, #0]
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b00a      	add	sp, #40	; 0x28
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	ffffefff 	.word	0xffffefff

080034e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034f4:	f7fd fdce 	bl	8001094 <HAL_GetTick>
 80034f8:	0002      	movs	r2, r0
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	18d3      	adds	r3, r2, r3
 8003502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003504:	f7fd fdc6 	bl	8001094 <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	015b      	lsls	r3, r3, #5
 8003512:	0d1b      	lsrs	r3, r3, #20
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	4353      	muls	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351a:	e058      	b.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	d055      	beq.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003522:	f7fd fdb7 	bl	8001094 <HAL_GetTick>
 8003526:	0002      	movs	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	429a      	cmp	r2, r3
 8003530:	d902      	bls.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d142      	bne.n	80035be <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	21e0      	movs	r1, #224	; 0xe0
 8003544:	438a      	bics	r2, r1
 8003546:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	2382      	movs	r3, #130	; 0x82
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	429a      	cmp	r2, r3
 8003552:	d113      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	429a      	cmp	r2, r3
 800355e:	d005      	beq.n	800356c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2140      	movs	r1, #64	; 0x40
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	019b      	lsls	r3, r3, #6
 8003584:	429a      	cmp	r2, r3
 8003586:	d110      	bne.n	80035aa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	491a      	ldr	r1, [pc, #104]	; (80035fc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003594:	400a      	ands	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	0189      	lsls	r1, r1, #6
 80035a6:	430a      	orrs	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	225d      	movs	r2, #93	; 0x5d
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	225c      	movs	r2, #92	; 0x5c
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e017      	b.n	80035ee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	425a      	negs	r2, r3
 80035de:	4153      	adcs	r3, r2
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	001a      	movs	r2, r3
 80035e4:	1dfb      	adds	r3, r7, #7
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d197      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b008      	add	sp, #32
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	2000000c 	.word	0x2000000c
 80035fc:	ffffdfff 	.word	0xffffdfff

08003600 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800360e:	2317      	movs	r3, #23
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003616:	f7fd fd3d 	bl	8001094 <HAL_GetTick>
 800361a:	0002      	movs	r2, r0
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	18d3      	adds	r3, r2, r3
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003626:	f7fd fd35 	bl	8001094 <HAL_GetTick>
 800362a:	0003      	movs	r3, r0
 800362c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	0013      	movs	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	189b      	adds	r3, r3, r2
 8003640:	00da      	lsls	r2, r3, #3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	0d1b      	lsrs	r3, r3, #20
 8003646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003648:	4353      	muls	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800364c:	e068      	b.n	8003720 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	23c0      	movs	r3, #192	; 0xc0
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	429a      	cmp	r2, r3
 8003656:	d10a      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	2117      	movs	r1, #23
 8003666:	187b      	adds	r3, r7, r1
 8003668:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800366a:	187b      	adds	r3, r7, r1
 800366c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	d055      	beq.n	8003720 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003674:	f7fd fd0e 	bl	8001094 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	429a      	cmp	r2, r3
 8003682:	d902      	bls.n	800368a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d142      	bne.n	8003710 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	21e0      	movs	r1, #224	; 0xe0
 8003696:	438a      	bics	r2, r1
 8003698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	2382      	movs	r3, #130	; 0x82
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d113      	bne.n	80036ce <SPI_WaitFifoStateUntilTimeout+0xce>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d005      	beq.n	80036be <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d107      	bne.n	80036ce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2140      	movs	r1, #64	; 0x40
 80036ca:	438a      	bics	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d110      	bne.n	80036fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4916      	ldr	r1, [pc, #88]	; (8003740 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2180      	movs	r1, #128	; 0x80
 80036f6:	0189      	lsls	r1, r1, #6
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	225d      	movs	r2, #93	; 0x5d
 8003700:	2101      	movs	r1, #1
 8003702:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	225c      	movs	r2, #92	; 0x5c
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e010      	b.n	8003732 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	3b01      	subs	r3, #1
 800371e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d18e      	bne.n	800364e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b00a      	add	sp, #40	; 0x28
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	2000000c 	.word	0x2000000c
 8003740:	ffffdfff 	.word	0xffffdfff

08003744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	23c0      	movs	r3, #192	; 0xc0
 8003754:	0159      	lsls	r1, r3, #5
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	0013      	movs	r3, r2
 800375e:	2200      	movs	r2, #0
 8003760:	f7ff ff4e 	bl	8003600 <SPI_WaitFifoStateUntilTimeout>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d007      	beq.n	8003778 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	2220      	movs	r2, #32
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e027      	b.n	80037c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	0013      	movs	r3, r2
 8003782:	2200      	movs	r2, #0
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	f7ff fead 	bl	80034e4 <SPI_WaitFlagStateUntilTimeout>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d007      	beq.n	800379e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003792:	2220      	movs	r2, #32
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e014      	b.n	80037c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	23c0      	movs	r3, #192	; 0xc0
 80037a2:	00d9      	lsls	r1, r3, #3
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	0013      	movs	r3, r2
 80037ac:	2200      	movs	r2, #0
 80037ae:	f7ff ff27 	bl	8003600 <SPI_WaitFifoStateUntilTimeout>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d007      	beq.n	80037c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ba:	2220      	movs	r2, #32
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e000      	b.n	80037c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b004      	add	sp, #16
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e04a      	b.n	8003878 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	223d      	movs	r2, #61	; 0x3d
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223c      	movs	r2, #60	; 0x3c
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7fd fb69 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223d      	movs	r2, #61	; 0x3d
 8003802:	2102      	movs	r1, #2
 8003804:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	0019      	movs	r1, r3
 8003810:	0010      	movs	r0, r2
 8003812:	f000 f97f 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2248      	movs	r2, #72	; 0x48
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	223e      	movs	r2, #62	; 0x3e
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	223f      	movs	r2, #63	; 0x3f
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2240      	movs	r2, #64	; 0x40
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2241      	movs	r2, #65	; 0x41
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2242      	movs	r2, #66	; 0x42
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2243      	movs	r2, #67	; 0x43
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2244      	movs	r2, #68	; 0x44
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2245      	movs	r2, #69	; 0x45
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2246      	movs	r2, #70	; 0x46
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2247      	movs	r2, #71	; 0x47
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	223d      	movs	r2, #61	; 0x3d
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	223d      	movs	r2, #61	; 0x3d
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d001      	beq.n	8003898 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e02f      	b.n	80038f8 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	223d      	movs	r2, #61	; 0x3d
 800389c:	2102      	movs	r1, #2
 800389e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIM_Base_Start+0x80>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_TIM_Base_Start+0x34>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a15      	ldr	r2, [pc, #84]	; (8003904 <HAL_TIM_Base_Start+0x84>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d116      	bne.n	80038e2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <HAL_TIM_Base_Start+0x88>)
 80038bc:	4013      	ands	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d016      	beq.n	80038f4 <HAL_TIM_Base_Start+0x74>
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	025b      	lsls	r3, r3, #9
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d011      	beq.n	80038f4 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2101      	movs	r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	e008      	b.n	80038f4 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2101      	movs	r1, #1
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e000      	b.n	80038f6 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b004      	add	sp, #16
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40000400 	.word	0x40000400
 8003908:	00010007 	.word	0x00010007

0800390c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e04a      	b.n	80039b4 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	223d      	movs	r2, #61	; 0x3d
 8003922:	5c9b      	ldrb	r3, [r3, r2]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d107      	bne.n	800393a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	223c      	movs	r2, #60	; 0x3c
 800392e:	2100      	movs	r1, #0
 8003930:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 f841 	bl	80039bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	223d      	movs	r2, #61	; 0x3d
 800393e:	2102      	movs	r1, #2
 8003940:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	0019      	movs	r1, r3
 800394c:	0010      	movs	r0, r2
 800394e:	f000 f8e1 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2248      	movs	r2, #72	; 0x48
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	223e      	movs	r2, #62	; 0x3e
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	223f      	movs	r2, #63	; 0x3f
 8003966:	2101      	movs	r1, #1
 8003968:	5499      	strb	r1, [r3, r2]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2240      	movs	r2, #64	; 0x40
 800396e:	2101      	movs	r1, #1
 8003970:	5499      	strb	r1, [r3, r2]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2241      	movs	r2, #65	; 0x41
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2242      	movs	r2, #66	; 0x42
 800397e:	2101      	movs	r1, #1
 8003980:	5499      	strb	r1, [r3, r2]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2243      	movs	r2, #67	; 0x43
 8003986:	2101      	movs	r1, #1
 8003988:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2244      	movs	r2, #68	; 0x44
 800398e:	2101      	movs	r1, #1
 8003990:	5499      	strb	r1, [r3, r2]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2245      	movs	r2, #69	; 0x45
 8003996:	2101      	movs	r1, #1
 8003998:	5499      	strb	r1, [r3, r2]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2246      	movs	r2, #70	; 0x46
 800399e:	2101      	movs	r1, #1
 80039a0:	5499      	strb	r1, [r3, r2]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2247      	movs	r2, #71	; 0x47
 80039a6:	2101      	movs	r1, #1
 80039a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	223d      	movs	r2, #61	; 0x3d
 80039ae:	2101      	movs	r1, #1
 80039b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b002      	add	sp, #8
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2317      	movs	r3, #23
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	223c      	movs	r2, #60	; 0x3c
 80039e4:	5c9b      	ldrb	r3, [r3, r2]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_IC_ConfigChannel+0x22>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e08c      	b.n	8003b08 <HAL_TIM_IC_ConfigChannel+0x13c>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	223c      	movs	r2, #60	; 0x3c
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f000 f8ee 	bl	8003bec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	210c      	movs	r1, #12
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6999      	ldr	r1, [r3, #24]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	619a      	str	r2, [r3, #24]
 8003a32:	e062      	b.n	8003afa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d11c      	bne.n	8003a74 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f000 f921 	bl	8003c90 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	492d      	ldr	r1, [pc, #180]	; (8003b10 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6999      	ldr	r1, [r3, #24]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	021a      	lsls	r2, r3, #8
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	619a      	str	r2, [r3, #24]
 8003a72:	e042      	b.n	8003afa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d11b      	bne.n	8003ab2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6819      	ldr	r1, [r3, #0]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f000 f943 	bl	8003d14 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	210c      	movs	r1, #12
 8003a9a:	438a      	bics	r2, r1
 8003a9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	61da      	str	r2, [r3, #28]
 8003ab0:	e023      	b.n	8003afa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d11c      	bne.n	8003af2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f000 f964 	bl	8003d94 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	490e      	ldr	r1, [pc, #56]	; (8003b10 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69d9      	ldr	r1, [r3, #28]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	021a      	lsls	r2, r3, #8
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	61da      	str	r2, [r3, #28]
 8003af0:	e003      	b.n	8003afa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003af2:	2317      	movs	r3, #23
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	223c      	movs	r2, #60	; 0x3c
 8003afe:	2100      	movs	r1, #0
 8003b00:	5499      	strb	r1, [r3, r2]

  return status;
 8003b02:	2317      	movs	r3, #23
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	781b      	ldrb	r3, [r3, #0]
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b006      	add	sp, #24
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	fffff3ff 	.word	0xfffff3ff

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <TIM_Base_SetConfig+0xc0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_Base_SetConfig+0x20>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <TIM_Base_SetConfig+0xc4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d108      	bne.n	8003b46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2270      	movs	r2, #112	; 0x70
 8003b38:	4393      	bics	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a22      	ldr	r2, [pc, #136]	; (8003bd4 <TIM_Base_SetConfig+0xc0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00f      	beq.n	8003b6e <TIM_Base_SetConfig+0x5a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <TIM_Base_SetConfig+0xc4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00b      	beq.n	8003b6e <TIM_Base_SetConfig+0x5a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <TIM_Base_SetConfig+0xc8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d007      	beq.n	8003b6e <TIM_Base_SetConfig+0x5a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <TIM_Base_SetConfig+0xcc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <TIM_Base_SetConfig+0x5a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <TIM_Base_SetConfig+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <TIM_Base_SetConfig+0xd4>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	4393      	bics	r3, r2
 8003b86:	001a      	movs	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <TIM_Base_SetConfig+0xc0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <TIM_Base_SetConfig+0xaa>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a0b      	ldr	r2, [pc, #44]	; (8003be0 <TIM_Base_SetConfig+0xcc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_Base_SetConfig+0xaa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <TIM_Base_SetConfig+0xd0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d103      	bne.n	8003bc6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	615a      	str	r2, [r3, #20]
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b004      	add	sp, #16
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40002000 	.word	0x40002000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800
 8003be8:	fffffcff 	.word	0xfffffcff

08003bec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4393      	bics	r3, r2
 8003c02:	001a      	movs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <TIM_TI1_SetConfig+0x9c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_TI1_SetConfig+0x38>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <TIM_TI1_SetConfig+0xa0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d101      	bne.n	8003c28 <TIM_TI1_SetConfig+0x3c>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <TIM_TI1_SetConfig+0x3e>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2203      	movs	r2, #3
 8003c32:	4393      	bics	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e003      	b.n	8003c48 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2201      	movs	r2, #1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	22f0      	movs	r2, #240	; 0xf0
 8003c4c:	4393      	bics	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	22ff      	movs	r2, #255	; 0xff
 8003c56:	4013      	ands	r3, r2
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	220a      	movs	r2, #10
 8003c62:	4393      	bics	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	220a      	movs	r2, #10
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b006      	add	sp, #24
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40000400 	.word	0x40000400

08003c90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	001a      	movs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <TIM_TI2_SetConfig+0x7c>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <TIM_TI2_SetConfig+0x80>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	22a0      	movs	r2, #160	; 0xa0
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	22a0      	movs	r2, #160	; 0xa0
 8003cee:	4013      	ands	r3, r2
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b006      	add	sp, #24
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	fffffcff 	.word	0xfffffcff
 8003d10:	ffff0fff 	.word	0xffff0fff

08003d14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <TIM_TI3_SetConfig+0x78>)
 8003d28:	401a      	ands	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	4393      	bics	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	22f0      	movs	r2, #240	; 0xf0
 8003d4e:	4393      	bics	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	22ff      	movs	r2, #255	; 0xff
 8003d58:	4013      	ands	r3, r2
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <TIM_TI3_SetConfig+0x7c>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	23a0      	movs	r3, #160	; 0xa0
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	4013      	ands	r3, r2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b006      	add	sp, #24
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	fffffeff 	.word	0xfffffeff
 8003d90:	fffff5ff 	.word	0xfffff5ff

08003d94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4a1a      	ldr	r2, [pc, #104]	; (8003e10 <TIM_TI4_SetConfig+0x7c>)
 8003da8:	401a      	ands	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <TIM_TI4_SetConfig+0x80>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <TIM_TI4_SetConfig+0x84>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	031b      	lsls	r3, r3, #12
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <TIM_TI4_SetConfig+0x88>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	031a      	lsls	r2, r3, #12
 8003dee:	23a0      	movs	r3, #160	; 0xa0
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	4013      	ands	r3, r2
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	621a      	str	r2, [r3, #32]
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b006      	add	sp, #24
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	ffffefff 	.word	0xffffefff
 8003e14:	fffffcff 	.word	0xfffffcff
 8003e18:	ffff0fff 	.word	0xffff0fff
 8003e1c:	ffff5fff 	.word	0xffff5fff

08003e20 <HAL_TIMEx_TISelection>:
  *  (**) Value not defined in all devices. \n
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2317      	movs	r3, #23
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	223c      	movs	r2, #60	; 0x3c
 8003e38:	5c9b      	ldrb	r3, [r3, r2]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIMEx_TISelection+0x22>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e040      	b.n	8003ec4 <HAL_TIMEx_TISelection+0xa4>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	223c      	movs	r2, #60	; 0x3c
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d021      	beq.n	8003e94 <HAL_TIMEx_TISelection+0x74>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d82a      	bhi.n	8003eac <HAL_TIMEx_TISelection+0x8c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_TIMEx_TISelection+0x44>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d00c      	beq.n	8003e7c <HAL_TIMEx_TISelection+0x5c>
 8003e62:	e023      	b.n	8003eac <HAL_TIMEx_TISelection+0x8c>
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6a:	220f      	movs	r2, #15
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8003e7a:	e01c      	b.n	8003eb6 <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e82:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <HAL_TIMEx_TISelection+0xac>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	0019      	movs	r1, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8003e92:	e010      	b.n	8003eb6 <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e9a:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <HAL_TIMEx_TISelection+0xb0>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8003eaa:	e004      	b.n	8003eb6 <HAL_TIMEx_TISelection+0x96>
    default:
      status = HAL_ERROR;
 8003eac:	2317      	movs	r3, #23
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
      break;
 8003eb4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	223c      	movs	r2, #60	; 0x3c
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]

  return status;
 8003ebe:	2317      	movs	r3, #23
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	781b      	ldrb	r3, [r3, #0]
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b006      	add	sp, #24
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	fffff0ff 	.word	0xfffff0ff
 8003ed0:	fff0ffff 	.word	0xfff0ffff

08003ed4 <__libc_init_array>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	4d0c      	ldr	r5, [pc, #48]	; (8003f0c <__libc_init_array+0x38>)
 8003eda:	4c0d      	ldr	r4, [pc, #52]	; (8003f10 <__libc_init_array+0x3c>)
 8003edc:	1b64      	subs	r4, r4, r5
 8003ede:	10a4      	asrs	r4, r4, #2
 8003ee0:	42a6      	cmp	r6, r4
 8003ee2:	d109      	bne.n	8003ef8 <__libc_init_array+0x24>
 8003ee4:	2600      	movs	r6, #0
 8003ee6:	f000 f821 	bl	8003f2c <_init>
 8003eea:	4d0a      	ldr	r5, [pc, #40]	; (8003f14 <__libc_init_array+0x40>)
 8003eec:	4c0a      	ldr	r4, [pc, #40]	; (8003f18 <__libc_init_array+0x44>)
 8003eee:	1b64      	subs	r4, r4, r5
 8003ef0:	10a4      	asrs	r4, r4, #2
 8003ef2:	42a6      	cmp	r6, r4
 8003ef4:	d105      	bne.n	8003f02 <__libc_init_array+0x2e>
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	00b3      	lsls	r3, r6, #2
 8003efa:	58eb      	ldr	r3, [r5, r3]
 8003efc:	4798      	blx	r3
 8003efe:	3601      	adds	r6, #1
 8003f00:	e7ee      	b.n	8003ee0 <__libc_init_array+0xc>
 8003f02:	00b3      	lsls	r3, r6, #2
 8003f04:	58eb      	ldr	r3, [r5, r3]
 8003f06:	4798      	blx	r3
 8003f08:	3601      	adds	r6, #1
 8003f0a:	e7f2      	b.n	8003ef2 <__libc_init_array+0x1e>
 8003f0c:	08003f84 	.word	0x08003f84
 8003f10:	08003f84 	.word	0x08003f84
 8003f14:	08003f84 	.word	0x08003f84
 8003f18:	08003f88 	.word	0x08003f88

08003f1c <memset>:
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	1882      	adds	r2, r0, r2
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d100      	bne.n	8003f26 <memset+0xa>
 8003f24:	4770      	bx	lr
 8003f26:	7019      	strb	r1, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	e7f9      	b.n	8003f20 <memset+0x4>

08003f2c <_init>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr

08003f38 <_fini>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr
