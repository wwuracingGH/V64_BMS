
v64_BMS_Segment_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d8  080045d8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080045d8  080045d8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045d8  080045d8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080045e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000014  080045f4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080045f4  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138ec  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a09  00000000  00000000  00033928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00036338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002aec  00000000  00000000  000386d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d20  00000000  00000000  0003b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f854  00000000  00000000  00050edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004334  00000000  00000000  000e0780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004580 	.word	0x08004580

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08004580 	.word	0x08004580

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MaxInit>:
* MaxInit() - PUBLIC
*   parameters: SPI, ADC, and Hardware timer peripheral pointers
*   return: none
*   description: Save peripheral memory locations and reset config TxBuffer
*****************************************************************************************/
void MaxInit(SPI_HandleTypeDef *hspi, ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	maxspi = hspi;
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <MaxInit+0x38>)
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	601a      	str	r2, [r3, #0]
	maxadc = hadc;
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <MaxInit+0x3c>)
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	maxtim = htim;
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MaxInit+0x40>)
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	601a      	str	r2, [r3, #0]
	*balanceLower = 0x00;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MaxInit+0x44>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
	*balanceUpper = 0x00;
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MaxInit+0x48>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	b004      	add	sp, #16
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	20000030 	.word	0x20000030
 8000254:	20000034 	.word	0x20000034
 8000258:	20000038 	.word	0x20000038
 800025c:	20000000 	.word	0x20000000
 8000260:	20000004 	.word	0x20000004

08000264 <TMInit>:
* TMInit() - PUBLIC
*   parameters: Pointer to ADC Peripheral
*   return: none
*   description: Stores memory location of ADC peripheral
*****************************************************************************************/
void TMInit(ADC_HandleTypeDef *hadc1){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	tmadc = hadc1;
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <TMInit+0x18>)
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	b002      	add	sp, #8
 8000278:	bd80      	pop	{r7, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000040 	.word	0x20000040

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fc0c 	bl	8000aa0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f83c 	bl	8000304 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f9be 	bl	800060c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000290:	f000 f880 	bl	8000394 <MX_ADC1_Init>
  MX_TIM14_Init();
 8000294:	f000 f964 	bl	8000560 <MX_TIM14_Init>
  MX_SPI1_Init();
 8000298:	f000 f924 	bl	80004e4 <MX_SPI1_Init>
  MX_I2C1_Init();
 800029c:	f000 f8e2 	bl	8000464 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MaxInit(&hspi1,&hadc1,&htim14);	// Pass peripheral pointers to MAX module and init
 80002a0:	4a13      	ldr	r2, [pc, #76]	; (80002f0 <main+0x70>)
 80002a2:	4914      	ldr	r1, [pc, #80]	; (80002f4 <main+0x74>)
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <main+0x78>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f7ff ffb6 	bl	8000218 <MaxInit>
  TMInit(&hadc1);					// Pass ADC to temperature monitor and init
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <main+0x74>)
 80002ae:	0018      	movs	r0, r3
 80002b0:	f7ff ffd8 	bl	8000264 <TMInit>
  //BLESegmentInit(&hi2c1);
  HAL_TIM_Base_Start(&htim14);		// Start hardware timer
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <main+0x70>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f003 fe0c 	bl	8003ed4 <HAL_TIM_Base_Start>
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)	// Enable I2C listening for bluetooth
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <main+0x7c>)
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 fc5e 	bl	8001b80 <HAL_I2C_EnableListen_IT>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d001      	beq.n	80002cc <main+0x4c>
  {
	  /* Transfer error in reception process */
	Error_Handler();
 80002c8:	f000 fa0c 	bl	80006e4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {

	  switch (bmsStates) {
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <main+0x80>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	d005      	beq.n	80002e0 <main+0x60>
 80002d4:	dc06      	bgt.n	80002e4 <main+0x64>
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d006      	beq.n	80002e8 <main+0x68>
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d006      	beq.n	80002ec <main+0x6c>
		  /*
		  * Only monitor charge and temps for CAN Bus
		  */
		  break;
	  default:
		  break;
 80002de:	e001      	b.n	80002e4 <main+0x64>
		  break;
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	e7f3      	b.n	80002cc <main+0x4c>
		  break;
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	e7f1      	b.n	80002cc <main+0x4c>
		  break;
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	e7ef      	b.n	80002cc <main+0x4c>
		  break;
 80002ec:	46c0      	nop			; (mov r8, r8)
	  switch (bmsStates) {
 80002ee:	e7ed      	b.n	80002cc <main+0x4c>
 80002f0:	20000160 	.word	0x20000160
 80002f4:	20000044 	.word	0x20000044
 80002f8:	200000fc 	.word	0x200000fc
 80002fc:	200000a8 	.word	0x200000a8
 8000300:	200001ac 	.word	0x200001ac

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b093      	sub	sp, #76	; 0x4c
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	2414      	movs	r4, #20
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0018      	movs	r0, r3
 8000310:	2334      	movs	r3, #52	; 0x34
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f004 f92b 	bl	8004570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	0018      	movs	r0, r3
 800031e:	2310      	movs	r3, #16
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f004 f924 	bl	8004570 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000328:	2380      	movs	r3, #128	; 0x80
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	0018      	movs	r0, r3
 800032e:	f002 fec1 	bl	80030b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2202      	movs	r2, #2
 8000336:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	0052      	lsls	r2, r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2240      	movs	r2, #64	; 0x40
 800034a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	193b      	adds	r3, r7, r4
 8000354:	0018      	movs	r0, r3
 8000356:	f002 feed 	bl	8003134 <HAL_RCC_OscConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800035e:	f000 f9c1 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2207      	movs	r2, #7
 8000366:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2100      	movs	r1, #0
 800037e:	0018      	movs	r0, r3
 8000380:	f003 f9e8 	bl	8003754 <HAL_RCC_ClockConfig>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000388:	f000 f9ac 	bl	80006e4 <Error_Handler>
  }
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b013      	add	sp, #76	; 0x4c
 8000392:	bd90      	pop	{r4, r7, pc}

08000394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	0018      	movs	r0, r3
 800039e:	230c      	movs	r3, #12
 80003a0:	001a      	movs	r2, r3
 80003a2:	2100      	movs	r1, #0
 80003a4:	f004 f8e4 	bl	8004570 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003a8:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003aa:	4a2c      	ldr	r2, [pc, #176]	; (800045c <MX_ADC1_Init+0xc8>)
 80003ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	05d2      	lsls	r2, r2, #23
 80003b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003bc:	4b26      	ldr	r3, [pc, #152]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c2:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003c8:	4b23      	ldr	r3, [pc, #140]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003ca:	2204      	movs	r2, #4
 80003cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003dc:	2201      	movs	r2, #1
 80003de:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003f4:	222c      	movs	r2, #44	; 0x2c
 80003f6:	2100      	movs	r1, #0
 80003f8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_ADC1_Init+0xc4>)
 8000402:	2200      	movs	r2, #0
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_ADC1_Init+0xc4>)
 8000408:	2200      	movs	r2, #0
 800040a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <MX_ADC1_Init+0xc4>)
 800040e:	223c      	movs	r2, #60	; 0x3c
 8000410:	2100      	movs	r1, #0
 8000412:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MX_ADC1_Init+0xc4>)
 8000416:	2200      	movs	r2, #0
 8000418:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_ADC1_Init+0xc4>)
 800041c:	0018      	movs	r0, r3
 800041e:	f000 fcc3 	bl	8000da8 <HAL_ADC_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000426:	f000 f95d 	bl	80006e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <MX_ADC1_Init+0xcc>)
 800042e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043c:	1d3a      	adds	r2, r7, #4
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_ADC1_Init+0xc4>)
 8000440:	0011      	movs	r1, r2
 8000442:	0018      	movs	r0, r3
 8000444:	f000 fe58 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 800044c:	f000 f94a 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b004      	add	sp, #16
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000044 	.word	0x20000044
 800045c:	40012400 	.word	0x40012400
 8000460:	18000040 	.word	0x18000040

08000464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_I2C1_Init+0x74>)
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <MX_I2C1_Init+0x78>)
 800046c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000470:	4a1b      	ldr	r2, [pc, #108]	; (80004e0 <MX_I2C1_Init+0x7c>)
 8000472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000476:	2240      	movs	r2, #64	; 0x40
 8000478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_I2C1_Init+0x74>)
 800047c:	2201      	movs	r2, #1
 800047e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_I2C1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fad7 	bl	8001a54 <HAL_I2C_Init>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004aa:	f000 f91b 	bl	80006e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004b0:	2100      	movs	r1, #0
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 fd66 	bl	8002f84 <HAL_I2CEx_ConfigAnalogFilter>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004bc:	f000 f912 	bl	80006e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 fda9 	bl	800301c <HAL_I2CEx_ConfigDigitalFilter>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ce:	f000 f909 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000a8 	.word	0x200000a8
 80004dc:	40005400 	.word	0x40005400
 80004e0:	00303d5b 	.word	0x00303d5b

080004e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_SPI1_Init+0x74>)
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_SPI1_Init+0x78>)
 80004ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_SPI1_Init+0x74>)
 80004f0:	2282      	movs	r2, #130	; 0x82
 80004f2:	0052      	lsls	r2, r2, #1
 80004f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_SPI1_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_SPI1_Init+0x74>)
 80004fe:	22e0      	movs	r2, #224	; 0xe0
 8000500:	00d2      	lsls	r2, r2, #3
 8000502:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_SPI1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_SPI1_Init+0x74>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	0092      	lsls	r2, r2, #2
 8000516:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_SPI1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_SPI1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_SPI1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_SPI1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_SPI1_Init+0x74>)
 8000532:	2207      	movs	r2, #7
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_SPI1_Init+0x74>)
 800053e:	2208      	movs	r2, #8
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MX_SPI1_Init+0x74>)
 8000544:	0018      	movs	r0, r3
 8000546:	f003 fbb5 	bl	8003cb4 <HAL_SPI_Init>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800054e:	f000 f8c9 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000fc 	.word	0x200000fc
 800055c:	40013000 	.word	0x40013000

08000560 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	2310      	movs	r3, #16
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f003 fffe 	bl	8004570 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <MX_TIM14_Init+0xa0>)
 8000576:	4a23      	ldr	r2, [pc, #140]	; (8000604 <MX_TIM14_Init+0xa4>)
 8000578:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <MX_TIM14_Init+0xa0>)
 800057c:	220f      	movs	r2, #15
 800057e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <MX_TIM14_Init+0xa0>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_TIM14_Init+0xa0>)
 8000588:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <MX_TIM14_Init+0xa8>)
 800058a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <MX_TIM14_Init+0xa0>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_TIM14_Init+0xa0>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <MX_TIM14_Init+0xa0>)
 800059a:	0018      	movs	r0, r3
 800059c:	f003 fc42 	bl	8003e24 <HAL_TIM_Base_Init>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80005a4:	f000 f89e 	bl	80006e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_TIM14_Init+0xa0>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 fcd8 	bl	8003f60 <HAL_TIM_IC_Init>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80005b4:	f000 f896 	bl	80006e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005be:	003b      	movs	r3, r7
 80005c0:	2201      	movs	r2, #1
 80005c2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005d0:	0039      	movs	r1, r7
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_TIM14_Init+0xa0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	0018      	movs	r0, r3
 80005d8:	f003 fd22 	bl	8004020 <HAL_TIM_IC_ConfigChannel>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80005e0:	f000 f880 	bl	80006e4 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim14, TIM_TIM14_TI1_MCO, TIM_CHANNEL_1) != HAL_OK)
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_TIM14_Init+0xa0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	2103      	movs	r1, #3
 80005ea:	0018      	movs	r0, r3
 80005ec:	f003 ff42 	bl	8004474 <HAL_TIMEx_TISelection>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM14_Init+0x98>
  {
    Error_Handler();
 80005f4:	f000 f876 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b004      	add	sp, #16
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000160 	.word	0x20000160
 8000604:	40002000 	.word	0x40002000
 8000608:	0000ffff 	.word	0x0000ffff

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b089      	sub	sp, #36	; 0x24
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	240c      	movs	r4, #12
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2314      	movs	r3, #20
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f003 ffa7 	bl	8004570 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000626:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000628:	2102      	movs	r1, #2
 800062a:	430a      	orrs	r2, r1
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000632:	2202      	movs	r2, #2
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_GPIO_Init+0xd0>)
 800063c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000640:	2104      	movs	r1, #4
 8000642:	430a      	orrs	r2, r1
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064a:	2204      	movs	r2, #4
 800064c:	4013      	ands	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000658:	2101      	movs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	2201      	movs	r2, #1
 8000664:	4013      	ands	r3, r2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	481c      	ldr	r0, [pc, #112]	; (80006e0 <MX_GPIO_Init+0xd4>)
 8000670:	2200      	movs	r2, #0
 8000672:	0019      	movs	r1, r3
 8000674:	f001 f9d0 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	2200      	movs	r2, #0
 800067e:	212e      	movs	r1, #46	; 0x2e
 8000680:	0018      	movs	r0, r3
 8000682:	f001 f9c9 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0212      	lsls	r2, r2, #8
 800068c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2201      	movs	r2, #1
 8000692:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <MX_GPIO_Init+0xd4>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f001 f852 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80006ac:	0021      	movs	r1, r4
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	222e      	movs	r2, #46	; 0x2e
 80006b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	187a      	adds	r2, r7, r1
 80006c8:	23a0      	movs	r3, #160	; 0xa0
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 f83e 	bl	8001750 <HAL_GPIO_Init>

}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b009      	add	sp, #36	; 0x24
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	50000800 	.word	0x50000800

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	641a      	str	r2, [r3, #64]	; 0x40
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0549      	lsls	r1, r1, #21
 8000718:	430a      	orrs	r2, r1
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_MspInit+0x44>)
 800071e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	055b      	lsls	r3, r3, #21
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b091      	sub	sp, #68	; 0x44
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	232c      	movs	r3, #44	; 0x2c
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	0018      	movs	r0, r3
 8000746:	2314      	movs	r3, #20
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f003 ff10 	bl	8004570 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000750:	2414      	movs	r4, #20
 8000752:	193b      	adds	r3, r7, r4
 8000754:	0018      	movs	r0, r3
 8000756:	2318      	movs	r3, #24
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f003 ff08 	bl	8004570 <memset>
  if(hadc->Instance==ADC1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <HAL_ADC_MspInit+0xb0>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d139      	bne.n	80007de <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	01d2      	lsls	r2, r2, #7
 8000770:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000778:	193b      	adds	r3, r7, r4
 800077a:	0018      	movs	r0, r3
 800077c:	f003 f974 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000784:	f7ff ffae 	bl	80006e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <HAL_ADC_MspInit+0xb4>)
 800078a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_ADC_MspInit+0xb4>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	0349      	lsls	r1, r1, #13
 8000792:	430a      	orrs	r2, r1
 8000794:	641a      	str	r2, [r3, #64]	; 0x40
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_ADC_MspInit+0xb4>)
 8000798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	035b      	lsls	r3, r3, #13
 800079e:	4013      	ands	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_ADC_MspInit+0xb4>)
 80007a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_ADC_MspInit+0xb4>)
 80007aa:	2101      	movs	r1, #1
 80007ac:	430a      	orrs	r2, r1
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_ADC_MspInit+0xb4>)
 80007b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b4:	2201      	movs	r2, #1
 80007b6:	4013      	ands	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80007bc:	212c      	movs	r1, #44	; 0x2c
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	22c1      	movs	r2, #193	; 0xc1
 80007c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2203      	movs	r2, #3
 80007c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	187a      	adds	r2, r7, r1
 80007d2:	23a0      	movs	r3, #160	; 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 ffb9 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b011      	add	sp, #68	; 0x44
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40012400 	.word	0x40012400
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b091      	sub	sp, #68	; 0x44
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	232c      	movs	r3, #44	; 0x2c
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	0018      	movs	r0, r3
 80007fe:	2314      	movs	r3, #20
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f003 feb4 	bl	8004570 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	2414      	movs	r4, #20
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	2318      	movs	r3, #24
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f003 feac 	bl	8004570 <memset>
  if(hi2c->Instance==I2C1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <HAL_I2C_MspInit+0xc8>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d146      	bne.n	80008b0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2220      	movs	r2, #32
 8000826:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	f003 f919 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800083a:	f7ff ff53 	bl	80006e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <HAL_I2C_MspInit+0xcc>)
 8000840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <HAL_I2C_MspInit+0xcc>)
 8000844:	2102      	movs	r1, #2
 8000846:	430a      	orrs	r2, r1
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_I2C_MspInit+0xcc>)
 800084c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084e:	2202      	movs	r2, #2
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000856:	212c      	movs	r1, #44	; 0x2c
 8000858:	187b      	adds	r3, r7, r1
 800085a:	22c0      	movs	r2, #192	; 0xc0
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2212      	movs	r2, #18
 8000864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2206      	movs	r2, #6
 8000876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	187b      	adds	r3, r7, r1
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <HAL_I2C_MspInit+0xd0>)
 800087c:	0019      	movs	r1, r3
 800087e:	0010      	movs	r0, r2
 8000880:	f000 ff66 	bl	8001750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_I2C_MspInit+0xcc>)
 8000886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_I2C_MspInit+0xcc>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	0389      	lsls	r1, r1, #14
 800088e:	430a      	orrs	r2, r1
 8000890:	63da      	str	r2, [r3, #60]	; 0x3c
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_I2C_MspInit+0xcc>)
 8000894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	039b      	lsls	r3, r3, #14
 800089a:	4013      	ands	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2017      	movs	r0, #23
 80008a6:	f000 feab 	bl	8001600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80008aa:	2017      	movs	r0, #23
 80008ac:	f000 febd 	bl	800162a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b011      	add	sp, #68	; 0x44
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40005400 	.word	0x40005400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	50000400 	.word	0x50000400

080008c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b08b      	sub	sp, #44	; 0x2c
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	2414      	movs	r4, #20
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2314      	movs	r3, #20
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f003 fe4a 	bl	8004570 <memset>
  if(hspi->Instance==SPI1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a2c      	ldr	r2, [pc, #176]	; (8000994 <HAL_SPI_MspInit+0xd0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d152      	bne.n	800098c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 80008e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0149      	lsls	r1, r1, #5
 80008f0:	430a      	orrs	r2, r1
 80008f2:	641a      	str	r2, [r3, #64]	; 0x40
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 80008f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 8000904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 8000910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 800091c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 8000920:	2102      	movs	r1, #2
 8000922:	430a      	orrs	r2, r1
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_SPI_MspInit+0xd4>)
 8000928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092a:	2202      	movs	r2, #2
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	22c0      	movs	r2, #192	; 0xc0
 8000936:	0152      	lsls	r2, r2, #5
 8000938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2202      	movs	r2, #2
 800093e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	193a      	adds	r2, r7, r4
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fef8 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000960:	0021      	movs	r1, r4
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2208      	movs	r2, #8
 8000966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2202      	movs	r2, #2
 800096c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	187b      	adds	r3, r7, r1
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_SPI_MspInit+0xd8>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f000 fee2 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b00b      	add	sp, #44	; 0x2c
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	40013000 	.word	0x40013000
 8000998:	40021000 	.word	0x40021000
 800099c:	50000400 	.word	0x50000400

080009a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_TIM_Base_MspInit+0x38>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d10d      	bne.n	80009ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_TIM_Base_MspInit+0x3c>)
 80009b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_TIM_Base_MspInit+0x3c>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0209      	lsls	r1, r1, #8
 80009bc:	430a      	orrs	r2, r1
 80009be:	641a      	str	r2, [r3, #64]	; 0x40
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_TIM_Base_MspInit+0x3c>)
 80009c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40002000 	.word	0x40002000
 80009dc:	40021000 	.word	0x40021000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f8b6 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <I2C1_IRQHandler+0x2c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	699a      	ldr	r2, [r3, #24]
 8000a1a:	23e0      	movs	r3, #224	; 0xe0
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d004      	beq.n	8000a2c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <I2C1_IRQHandler+0x2c>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 f8e7 	bl	8001bf8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000a2a:	e003      	b.n	8000a34 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <I2C1_IRQHandler+0x2c>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 f8c8 	bl	8001bc4 <HAL_I2C_EV_IRQHandler>
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	200000a8 	.word	0x200000a8

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a50:	f7ff fff6 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	; (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a7a:	f003 fd55 	bl	8004528 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a7e:	f7ff fbff 	bl	8000280 <main>

08000a82 <LoopForever>:

LoopForever:
  b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a90:	080045e0 	.word	0x080045e0
  ldr r2, =_sbss
 8000a94:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a98:	200001b4 	.word	0x200001b4

08000a9c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x3c>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Init+0x3c>)
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0049      	lsls	r1, r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f810 	bl	8000ae0 <HAL_InitTick>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e001      	b.n	8000ad0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fe10 	bl	80006f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_InitTick+0x88>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d02b      	beq.n	8000b50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_InitTick+0x8c>)
 8000afa:	681c      	ldr	r4, [r3, #0]
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_InitTick+0x88>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	0019      	movs	r1, r3
 8000b02:	23fa      	movs	r3, #250	; 0xfa
 8000b04:	0098      	lsls	r0, r3, #2
 8000b06:	f7ff fafb 	bl	8000100 <__udivsi3>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	0020      	movs	r0, r4
 8000b10:	f7ff faf6 	bl	8000100 <__udivsi3>
 8000b14:	0003      	movs	r3, r0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 fd97 	bl	800164a <HAL_SYSTICK_Config>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d112      	bne.n	8000b46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d80a      	bhi.n	8000b3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2301      	movs	r3, #1
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fd66 	bl	8001600 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_InitTick+0x90>)
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e00d      	b.n	8000b58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e008      	b.n	8000b58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b46:	230f      	movs	r3, #15
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e003      	b.n	8000b58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b50:	230f      	movs	r3, #15
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b005      	add	sp, #20
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000010 	.word	0x20000010
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	2000000c 	.word	0x2000000c

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	18d2      	adds	r2, r2, r3
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_IncTick+0x20>)
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	20000010 	.word	0x20000010
 8000b94:	200001b0 	.word	0x200001b0

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	200001b0 	.word	0x200001b0

08000bac <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	fe3fffff 	.word	0xfe3fffff

08000bd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	23e0      	movs	r3, #224	; 0xe0
 8000be2:	045b      	lsls	r3, r3, #17
 8000be4:	4013      	ands	r3, r2
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}

08000bee <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	2104      	movs	r1, #4
 8000c02:	400a      	ands	r2, r1
 8000c04:	2107      	movs	r1, #7
 8000c06:	4091      	lsls	r1, r2
 8000c08:	000a      	movs	r2, r1
 8000c0a:	43d2      	mvns	r2, r2
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2104      	movs	r1, #4
 8000c12:	400b      	ands	r3, r1
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	4099      	lsls	r1, r3
 8000c18:	000b      	movs	r3, r1
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b004      	add	sp, #16
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	2104      	movs	r1, #4
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	2107      	movs	r1, #7
 8000c3e:	4091      	lsls	r1, r2
 8000c40:	000a      	movs	r2, r1
 8000c42:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	2104      	movs	r1, #4
 8000c48:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c4a:	40da      	lsrs	r2, r3
 8000c4c:	0013      	movs	r3, r2
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	211f      	movs	r1, #31
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	000a      	movs	r2, r1
 8000c72:	43d2      	mvns	r2, r2
 8000c74:	401a      	ands	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0e9b      	lsrs	r3, r3, #26
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	4019      	ands	r1, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	201f      	movs	r0, #31
 8000c82:	4003      	ands	r3, r0
 8000c84:	4099      	lsls	r1, r3
 8000c86:	000b      	movs	r3, r1
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b004      	add	sp, #16
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	0b5b      	lsrs	r3, r3, #13
 8000caa:	431a      	orrs	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	0352      	lsls	r2, r2, #13
 8000cca:	0b52      	lsrs	r2, r2, #13
 8000ccc:	43d2      	mvns	r2, r2
 8000cce:	401a      	ands	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	0212      	lsls	r2, r2, #8
 8000cf0:	43d2      	mvns	r2, r2
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	4904      	ldr	r1, [pc, #16]	; (8000d10 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000cfe:	400b      	ands	r3, r1
 8000d00:	431a      	orrs	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b004      	add	sp, #16
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	07ffff00 	.word	0x07ffff00

08000d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <LL_ADC_EnableInternalRegulator+0x24>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	0552      	lsls	r2, r2, #21
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	6fffffe8 	.word	0x6fffffe8

08000d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	055b      	lsls	r3, r3, #21
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	055b      	lsls	r3, r3, #21
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d101      	bne.n	8000d5a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2201      	movs	r2, #1
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d101      	bne.n	8000d7c <LL_ADC_IsEnabled+0x18>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <LL_ADC_IsEnabled+0x1a>
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2204      	movs	r2, #4
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d101      	bne.n	8000d9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db0:	231f      	movs	r3, #31
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e17f      	b.n	80010ce <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10a      	bne.n	8000dec <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff fcad 	bl	8000738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2254      	movs	r2, #84	; 0x54
 8000de8:	2100      	movs	r1, #0
 8000dea:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff ffa3 	bl	8000d3c <LL_ADC_IsInternalRegulatorEnabled>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d115      	bne.n	8000e26 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff ff88 	bl	8000d14 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e04:	4bb4      	ldr	r3, [pc, #720]	; (80010d8 <HAL_ADC_Init+0x330>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	49b4      	ldr	r1, [pc, #720]	; (80010dc <HAL_ADC_Init+0x334>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff f978 	bl	8000100 <__udivsi3>
 8000e10:	0003      	movs	r3, r0
 8000e12:	3301      	adds	r3, #1
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e18:	e002      	b.n	8000e20 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f9      	bne.n	8000e1a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff ff86 	bl	8000d3c <LL_ADC_IsInternalRegulatorEnabled>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d10f      	bne.n	8000e54 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e38:	2210      	movs	r2, #16
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e44:	2201      	movs	r2, #1
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e4c:	231f      	movs	r3, #31
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff94 	bl	8000d86 <LL_ADC_REG_IsConversionOngoing>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	2210      	movs	r2, #16
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d000      	beq.n	8000e6e <HAL_ADC_Init+0xc6>
 8000e6c:	e122      	b.n	80010b4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d000      	beq.n	8000e76 <HAL_ADC_Init+0xce>
 8000e74:	e11e      	b.n	80010b4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a99      	ldr	r2, [pc, #612]	; (80010e0 <HAL_ADC_Init+0x338>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2202      	movs	r2, #2
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff ff6a 	bl	8000d64 <LL_ADC_IsEnabled>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d000      	beq.n	8000e96 <HAL_ADC_Init+0xee>
 8000e94:	e0ad      	b.n	8000ff2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7e1b      	ldrb	r3, [r3, #24]
 8000e9e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000ea0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7e5b      	ldrb	r3, [r3, #25]
 8000ea6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ea8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7e9b      	ldrb	r3, [r3, #26]
 8000eae:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000eb0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <HAL_ADC_Init+0x118>
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	015b      	lsls	r3, r3, #5
 8000ebe:	e000      	b.n	8000ec2 <HAL_ADC_Init+0x11a>
 8000ec0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000ec2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000ec8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da04      	bge.n	8000edc <HAL_ADC_Init+0x134>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	e001      	b.n	8000ee0 <HAL_ADC_Init+0x138>
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000ee0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	212c      	movs	r1, #44	; 0x2c
 8000ee6:	5c5b      	ldrb	r3, [r3, r1]
 8000ee8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000eea:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	5c9b      	ldrb	r3, [r3, r2]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d115      	bne.n	8000f28 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7e9b      	ldrb	r3, [r3, #26]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d105      	bne.n	8000f10 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	0252      	lsls	r2, r2, #9
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	e00b      	b.n	8000f28 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f14:	2220      	movs	r2, #32
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f20:	2201      	movs	r2, #1
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00a      	beq.n	8000f46 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f34:	23e0      	movs	r3, #224	; 0xe0
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4a65      	ldr	r2, [pc, #404]	; (80010e4 <HAL_ADC_Init+0x33c>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	0019      	movs	r1, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	0f9b      	lsrs	r3, r3, #30
 8000f62:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	223c      	movs	r2, #60	; 0x3c
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d111      	bne.n	8000f9e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	0f9b      	lsrs	r3, r3, #30
 8000f80:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f86:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f8c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f92:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	4a50      	ldr	r2, [pc, #320]	; (80010e8 <HAL_ADC_Init+0x340>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	0019      	movs	r1, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	23c0      	movs	r3, #192	; 0xc0
 8000fba:	061b      	lsls	r3, r3, #24
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d018      	beq.n	8000ff2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d012      	beq.n	8000ff2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	061b      	lsls	r3, r3, #24
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d00c      	beq.n	8000ff2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000fd8:	4b44      	ldr	r3, [pc, #272]	; (80010ec <HAL_ADC_Init+0x344>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a44      	ldr	r2, [pc, #272]	; (80010f0 <HAL_ADC_Init+0x348>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	23f0      	movs	r3, #240	; 0xf0
 8000fe8:	039b      	lsls	r3, r3, #14
 8000fea:	401a      	ands	r2, r3
 8000fec:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <HAL_ADC_Init+0x344>)
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f7ff fdf6 	bl	8000bee <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100a:	493a      	ldr	r1, [pc, #232]	; (80010f4 <HAL_ADC_Init+0x34c>)
 800100c:	001a      	movs	r2, r3
 800100e:	f7ff fdee 	bl	8000bee <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d109      	bne.n	800102e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2110      	movs	r1, #16
 8001026:	4249      	negs	r1, r1
 8001028:	430a      	orrs	r2, r1
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
 800102c:	e018      	b.n	8001060 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	039b      	lsls	r3, r3, #14
 8001036:	429a      	cmp	r2, r3
 8001038:	d112      	bne.n	8001060 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	3b01      	subs	r3, #1
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	221c      	movs	r2, #28
 800104a:	4013      	ands	r3, r2
 800104c:	2210      	movs	r2, #16
 800104e:	4252      	negs	r2, r2
 8001050:	409a      	lsls	r2, r3
 8001052:	0011      	movs	r1, r2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2100      	movs	r1, #0
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff fdde 	bl	8000c28 <LL_ADC_GetSamplingTimeCommonChannels>
 800106c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001072:	429a      	cmp	r2, r3
 8001074:	d10b      	bne.n	800108e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001080:	2203      	movs	r2, #3
 8001082:	4393      	bics	r3, r2
 8001084:	2201      	movs	r2, #1
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800108c:	e01c      	b.n	80010c8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	2212      	movs	r2, #18
 8001094:	4393      	bics	r3, r2
 8001096:	2210      	movs	r2, #16
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a2:	2201      	movs	r2, #1
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80010aa:	231f      	movs	r3, #31
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010b2:	e009      	b.n	80010c8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	2210      	movs	r2, #16
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010c0:	231f      	movs	r3, #31
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80010c8:	231f      	movs	r3, #31
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	781b      	ldrb	r3, [r3, #0]
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b008      	add	sp, #32
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	20000008 	.word	0x20000008
 80010dc:	00030d40 	.word	0x00030d40
 80010e0:	fffffefd 	.word	0xfffffefd
 80010e4:	fffe0201 	.word	0xfffe0201
 80010e8:	1ffffc02 	.word	0x1ffffc02
 80010ec:	40012708 	.word	0x40012708
 80010f0:	ffc3ffff 	.word	0xffc3ffff
 80010f4:	07ffff04 	.word	0x07ffff04

080010f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001102:	2317      	movs	r3, #23
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2254      	movs	r2, #84	; 0x54
 8001112:	5c9b      	ldrb	r3, [r3, r2]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_ADC_ConfigChannel+0x24>
 8001118:	2302      	movs	r3, #2
 800111a:	e1c0      	b.n	800149e <HAL_ADC_ConfigChannel+0x3a6>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2254      	movs	r2, #84	; 0x54
 8001120:	2101      	movs	r1, #1
 8001122:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fe2c 	bl	8000d86 <LL_ADC_REG_IsConversionOngoing>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d000      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x3c>
 8001132:	e1a3      	b.n	800147c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d100      	bne.n	800113e <HAL_ADC_ConfigChannel+0x46>
 800113c:	e143      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	061b      	lsls	r3, r3, #24
 8001146:	429a      	cmp	r2, r3
 8001148:	d004      	beq.n	8001154 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800114e:	4ac1      	ldr	r2, [pc, #772]	; (8001454 <HAL_ADC_ConfigChannel+0x35c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d108      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0019      	movs	r1, r3
 800115e:	0010      	movs	r0, r2
 8001160:	f7ff fd99 	bl	8000c96 <LL_ADC_REG_SetSequencerChAdd>
 8001164:	e0c9      	b.n	80012fa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	211f      	movs	r1, #31
 8001170:	400b      	ands	r3, r1
 8001172:	210f      	movs	r1, #15
 8001174:	4099      	lsls	r1, r3
 8001176:	000b      	movs	r3, r1
 8001178:	43db      	mvns	r3, r3
 800117a:	4013      	ands	r3, r2
 800117c:	0019      	movs	r1, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	035b      	lsls	r3, r3, #13
 8001184:	0b5b      	lsrs	r3, r3, #13
 8001186:	d105      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x9c>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0e9b      	lsrs	r3, r3, #26
 800118e:	221f      	movs	r2, #31
 8001190:	4013      	ands	r3, r2
 8001192:	e098      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	d000      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0xa8>
 800119e:	e091      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x1cc>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2202      	movs	r2, #2
 80011a6:	4013      	ands	r3, r2
 80011a8:	d000      	beq.n	80011ac <HAL_ADC_ConfigChannel+0xb4>
 80011aa:	e089      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x1c8>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2204      	movs	r2, #4
 80011b2:	4013      	ands	r3, r2
 80011b4:	d000      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0xc0>
 80011b6:	e081      	b.n	80012bc <HAL_ADC_ConfigChannel+0x1c4>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2208      	movs	r2, #8
 80011be:	4013      	ands	r3, r2
 80011c0:	d000      	beq.n	80011c4 <HAL_ADC_ConfigChannel+0xcc>
 80011c2:	e079      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x1c0>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2210      	movs	r2, #16
 80011ca:	4013      	ands	r3, r2
 80011cc:	d000      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0xd8>
 80011ce:	e071      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x1bc>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2220      	movs	r2, #32
 80011d6:	4013      	ands	r3, r2
 80011d8:	d000      	beq.n	80011dc <HAL_ADC_ConfigChannel+0xe4>
 80011da:	e069      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1b8>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2240      	movs	r2, #64	; 0x40
 80011e2:	4013      	ands	r3, r2
 80011e4:	d000      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0xf0>
 80011e6:	e061      	b.n	80012ac <HAL_ADC_ConfigChannel+0x1b4>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	4013      	ands	r3, r2
 80011f0:	d000      	beq.n	80011f4 <HAL_ADC_ConfigChannel+0xfc>
 80011f2:	e059      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x1b0>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4013      	ands	r3, r2
 80011fe:	d151      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x1ac>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d149      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1a8>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4013      	ands	r3, r2
 8001216:	d141      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1a4>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4013      	ands	r3, r2
 8001222:	d139      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x1a0>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	015b      	lsls	r3, r3, #5
 800122c:	4013      	ands	r3, r2
 800122e:	d131      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x19c>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	019b      	lsls	r3, r3, #6
 8001238:	4013      	ands	r3, r2
 800123a:	d129      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x198>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	01db      	lsls	r3, r3, #7
 8001244:	4013      	ands	r3, r2
 8001246:	d121      	bne.n	800128c <HAL_ADC_ConfigChannel+0x194>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	4013      	ands	r3, r2
 8001252:	d119      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x190>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	025b      	lsls	r3, r3, #9
 800125c:	4013      	ands	r3, r2
 800125e:	d111      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x18c>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	029b      	lsls	r3, r3, #10
 8001268:	4013      	ands	r3, r2
 800126a:	d109      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x188>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	02db      	lsls	r3, r3, #11
 8001274:	4013      	ands	r3, r2
 8001276:	d001      	beq.n	800127c <HAL_ADC_ConfigChannel+0x184>
 8001278:	2312      	movs	r3, #18
 800127a:	e024      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 800127c:	2300      	movs	r3, #0
 800127e:	e022      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001280:	2311      	movs	r3, #17
 8001282:	e020      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001284:	2310      	movs	r3, #16
 8001286:	e01e      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001288:	230f      	movs	r3, #15
 800128a:	e01c      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 800128c:	230e      	movs	r3, #14
 800128e:	e01a      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001290:	230d      	movs	r3, #13
 8001292:	e018      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001294:	230c      	movs	r3, #12
 8001296:	e016      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001298:	230b      	movs	r3, #11
 800129a:	e014      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 800129c:	230a      	movs	r3, #10
 800129e:	e012      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012a0:	2309      	movs	r3, #9
 80012a2:	e010      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012a4:	2308      	movs	r3, #8
 80012a6:	e00e      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012a8:	2307      	movs	r3, #7
 80012aa:	e00c      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012ac:	2306      	movs	r3, #6
 80012ae:	e00a      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012b0:	2305      	movs	r3, #5
 80012b2:	e008      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012b4:	2304      	movs	r3, #4
 80012b6:	e006      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012b8:	2303      	movs	r3, #3
 80012ba:	e004      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012c4:	2300      	movs	r3, #0
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	6852      	ldr	r2, [r2, #4]
 80012ca:	201f      	movs	r0, #31
 80012cc:	4002      	ands	r2, r0
 80012ce:	4093      	lsls	r3, r2
 80012d0:	000a      	movs	r2, r1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d808      	bhi.n	80012fa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	001a      	movs	r2, r3
 80012f6:	f7ff fcae 	bl	8000c56 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6819      	ldr	r1, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	001a      	movs	r2, r3
 8001308:	f7ff fce8 	bl	8000cdc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db00      	blt.n	8001316 <HAL_ADC_ConfigChannel+0x21e>
 8001314:	e0bc      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001316:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fc5b 	bl	8000bd4 <LL_ADC_GetCommonPathInternalCh>
 800131e:	0003      	movs	r3, r0
 8001320:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a4d      	ldr	r2, [pc, #308]	; (800145c <HAL_ADC_ConfigChannel+0x364>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d122      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	041b      	lsls	r3, r3, #16
 8001332:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001334:	d11d      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	0412      	lsls	r2, r2, #16
 800133c:	4313      	orrs	r3, r2
 800133e:	4a46      	ldr	r2, [pc, #280]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 8001340:	0019      	movs	r1, r3
 8001342:	0010      	movs	r0, r2
 8001344:	f7ff fc32 	bl	8000bac <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001348:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_ADC_ConfigChannel+0x368>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4945      	ldr	r1, [pc, #276]	; (8001464 <HAL_ADC_ConfigChannel+0x36c>)
 800134e:	0018      	movs	r0, r3
 8001350:	f7fe fed6 	bl	8000100 <__udivsi3>
 8001354:	0003      	movs	r3, r0
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	0013      	movs	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	189b      	adds	r3, r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001362:	e002      	b.n	800136a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3b01      	subs	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f9      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001370:	e08e      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a3c      	ldr	r2, [pc, #240]	; (8001468 <HAL_ADC_ConfigChannel+0x370>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d10e      	bne.n	800139a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	045b      	lsls	r3, r3, #17
 8001382:	4013      	ands	r3, r2
 8001384:	d109      	bne.n	800139a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	0452      	lsls	r2, r2, #17
 800138c:	4313      	orrs	r3, r2
 800138e:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 8001390:	0019      	movs	r1, r3
 8001392:	0010      	movs	r0, r2
 8001394:	f7ff fc0a 	bl	8000bac <LL_ADC_SetCommonPathInternalCh>
 8001398:	e07a      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a33      	ldr	r2, [pc, #204]	; (800146c <HAL_ADC_ConfigChannel+0x374>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d000      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x2ae>
 80013a4:	e074      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	03db      	lsls	r3, r3, #15
 80013ac:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013ae:	d000      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0x2ba>
 80013b0:	e06e      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	03d2      	lsls	r2, r2, #15
 80013b8:	4313      	orrs	r3, r2
 80013ba:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 80013bc:	0019      	movs	r1, r3
 80013be:	0010      	movs	r0, r2
 80013c0:	f7ff fbf4 	bl	8000bac <LL_ADC_SetCommonPathInternalCh>
 80013c4:	e064      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691a      	ldr	r2, [r3, #16]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d004      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013d6:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <HAL_ADC_ConfigChannel+0x35c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d107      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0019      	movs	r1, r3
 80013e6:	0010      	movs	r0, r2
 80013e8:	f7ff fc66 	bl	8000cb8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da4d      	bge.n	8001490 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fbec 	bl	8000bd4 <LL_ADC_GetCommonPathInternalCh>
 80013fc:	0003      	movs	r3, r0
 80013fe:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <HAL_ADC_ConfigChannel+0x364>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d108      	bne.n	800141c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4a18      	ldr	r2, [pc, #96]	; (8001470 <HAL_ADC_ConfigChannel+0x378>)
 800140e:	4013      	ands	r3, r2
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 8001412:	0019      	movs	r1, r3
 8001414:	0010      	movs	r0, r2
 8001416:	f7ff fbc9 	bl	8000bac <LL_ADC_SetCommonPathInternalCh>
 800141a:	e039      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_ADC_ConfigChannel+0x370>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d108      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_ADC_ConfigChannel+0x37c>)
 800142a:	4013      	ands	r3, r2
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 800142e:	0019      	movs	r1, r3
 8001430:	0010      	movs	r0, r2
 8001432:	f7ff fbbb 	bl	8000bac <LL_ADC_SetCommonPathInternalCh>
 8001436:	e02b      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_ADC_ConfigChannel+0x374>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d126      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_ADC_ConfigChannel+0x380>)
 8001446:	4013      	ands	r3, r2
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 800144a:	0019      	movs	r1, r3
 800144c:	0010      	movs	r0, r2
 800144e:	f7ff fbad 	bl	8000bac <LL_ADC_SetCommonPathInternalCh>
 8001452:	e01d      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
 8001454:	80000004 	.word	0x80000004
 8001458:	40012708 	.word	0x40012708
 800145c:	b0001000 	.word	0xb0001000
 8001460:	20000008 	.word	0x20000008
 8001464:	00030d40 	.word	0x00030d40
 8001468:	b8004000 	.word	0xb8004000
 800146c:	b4002000 	.word	0xb4002000
 8001470:	ff7fffff 	.word	0xff7fffff
 8001474:	feffffff 	.word	0xfeffffff
 8001478:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	2220      	movs	r2, #32
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001488:	2317      	movs	r3, #23
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2254      	movs	r2, #84	; 0x54
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001498:	2317      	movs	r3, #23
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b006      	add	sp, #24
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	0002      	movs	r2, r0
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b7f      	cmp	r3, #127	; 0x7f
 80014ba:	d809      	bhi.n	80014d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	001a      	movs	r2, r3
 80014c2:	231f      	movs	r3, #31
 80014c4:	401a      	ands	r2, r3
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_EnableIRQ+0x30>)
 80014c8:	2101      	movs	r1, #1
 80014ca:	4091      	lsls	r1, r2
 80014cc:	000a      	movs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	0002      	movs	r2, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b7f      	cmp	r3, #127	; 0x7f
 80014f0:	d828      	bhi.n	8001544 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f2:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <__NVIC_SetPriority+0xd4>)
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	33c0      	adds	r3, #192	; 0xc0
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	589b      	ldr	r3, [r3, r2]
 8001502:	1dfa      	adds	r2, r7, #7
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	0011      	movs	r1, r2
 8001508:	2203      	movs	r2, #3
 800150a:	400a      	ands	r2, r1
 800150c:	00d2      	lsls	r2, r2, #3
 800150e:	21ff      	movs	r1, #255	; 0xff
 8001510:	4091      	lsls	r1, r2
 8001512:	000a      	movs	r2, r1
 8001514:	43d2      	mvns	r2, r2
 8001516:	401a      	ands	r2, r3
 8001518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	019b      	lsls	r3, r3, #6
 800151e:	22ff      	movs	r2, #255	; 0xff
 8001520:	401a      	ands	r2, r3
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	0018      	movs	r0, r3
 8001528:	2303      	movs	r3, #3
 800152a:	4003      	ands	r3, r0
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001530:	481f      	ldr	r0, [pc, #124]	; (80015b0 <__NVIC_SetPriority+0xd4>)
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	430a      	orrs	r2, r1
 800153c:	33c0      	adds	r3, #192	; 0xc0
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001542:	e031      	b.n	80015a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <__NVIC_SetPriority+0xd8>)
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	0019      	movs	r1, r3
 800154c:	230f      	movs	r3, #15
 800154e:	400b      	ands	r3, r1
 8001550:	3b08      	subs	r3, #8
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3306      	adds	r3, #6
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	18d3      	adds	r3, r2, r3
 800155a:	3304      	adds	r3, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1dfa      	adds	r2, r7, #7
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	0011      	movs	r1, r2
 8001564:	2203      	movs	r2, #3
 8001566:	400a      	ands	r2, r1
 8001568:	00d2      	lsls	r2, r2, #3
 800156a:	21ff      	movs	r1, #255	; 0xff
 800156c:	4091      	lsls	r1, r2
 800156e:	000a      	movs	r2, r1
 8001570:	43d2      	mvns	r2, r2
 8001572:	401a      	ands	r2, r3
 8001574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	019b      	lsls	r3, r3, #6
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	401a      	ands	r2, r3
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	2303      	movs	r3, #3
 8001586:	4003      	ands	r3, r0
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <__NVIC_SetPriority+0xd8>)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	001c      	movs	r4, r3
 8001594:	230f      	movs	r3, #15
 8001596:	4023      	ands	r3, r4
 8001598:	3b08      	subs	r3, #8
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	430a      	orrs	r2, r1
 800159e:	3306      	adds	r3, #6
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	18c3      	adds	r3, r0, r3
 80015a4:	3304      	adds	r3, #4
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b003      	add	sp, #12
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	045b      	lsls	r3, r3, #17
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d301      	bcc.n	80015d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015cc:	2301      	movs	r3, #1
 80015ce:	e010      	b.n	80015f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <SysTick_Config+0x44>)
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	3a01      	subs	r2, #1
 80015d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d8:	2301      	movs	r3, #1
 80015da:	425b      	negs	r3, r3
 80015dc:	2103      	movs	r1, #3
 80015de:	0018      	movs	r0, r3
 80015e0:	f7ff ff7c 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x44>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x44>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	210f      	movs	r1, #15
 800160c:	187b      	adds	r3, r7, r1
 800160e:	1c02      	adds	r2, r0, #0
 8001610:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	187b      	adds	r3, r7, r1
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b25b      	sxtb	r3, r3
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff ff5d 	bl	80014dc <__NVIC_SetPriority>
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b004      	add	sp, #16
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	0002      	movs	r2, r0
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b25b      	sxtb	r3, r3
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff ff33 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ffaf 	bl	80015b8 <SysTick_Config>
 800165a:	0003      	movs	r3, r0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	210f      	movs	r1, #15
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2225      	movs	r2, #37	; 0x25
 8001678:	5c9b      	ldrb	r3, [r3, r2]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d006      	beq.n	800168e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2204      	movs	r2, #4
 8001684:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e049      	b.n	8001722 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	210e      	movs	r1, #14
 800169a:	438a      	bics	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	438a      	bics	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	491d      	ldr	r1, [pc, #116]	; (8001730 <HAL_DMA_Abort_IT+0xcc>)
 80016ba:	400a      	ands	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_DMA_Abort_IT+0xd0>)
 80016c0:	6859      	ldr	r1, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	221c      	movs	r2, #28
 80016c8:	4013      	ands	r3, r2
 80016ca:	2201      	movs	r2, #1
 80016cc:	409a      	lsls	r2, r3
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_DMA_Abort_IT+0xd0>)
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80016dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00c      	beq.n	8001700 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f0:	490f      	ldr	r1, [pc, #60]	; (8001730 <HAL_DMA_Abort_IT+0xcc>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80016fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2225      	movs	r2, #37	; 0x25
 8001704:	2101      	movs	r1, #1
 8001706:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2224      	movs	r2, #36	; 0x24
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	0010      	movs	r0, r2
 8001720:	4798      	blx	r3
    }
  }
  return status;
 8001722:	230f      	movs	r3, #15
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	781b      	ldrb	r3, [r3, #0]
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b004      	add	sp, #16
 800172e:	bd80      	pop	{r7, pc}
 8001730:	fffffeff 	.word	0xfffffeff
 8001734:	40020000 	.word	0x40020000

08001738 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2225      	movs	r2, #37	; 0x25
 8001744:	5c9b      	ldrb	r3, [r3, r2]
 8001746:	b2db      	uxtb	r3, r3
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175e:	e147      	b.n	80019f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2101      	movs	r1, #1
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4091      	lsls	r1, r2
 800176a:	000a      	movs	r2, r1
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <HAL_GPIO_Init+0x28>
 8001776:	e138      	b.n	80019ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2203      	movs	r2, #3
 800177e:	4013      	ands	r3, r2
 8001780:	2b01      	cmp	r3, #1
 8001782:	d005      	beq.n	8001790 <HAL_GPIO_Init+0x40>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	2b02      	cmp	r3, #2
 800178e:	d130      	bne.n	80017f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	409a      	lsls	r2, r3
 800179e:	0013      	movs	r3, r2
 80017a0:	43da      	mvns	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	409a      	lsls	r2, r3
 80017b2:	0013      	movs	r3, r2
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017c6:	2201      	movs	r2, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	2201      	movs	r2, #1
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2203      	movs	r2, #3
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d017      	beq.n	800182e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	43da      	mvns	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2203      	movs	r2, #3
 8001834:	4013      	ands	r3, r2
 8001836:	2b02      	cmp	r3, #2
 8001838:	d123      	bne.n	8001882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	08da      	lsrs	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	58d3      	ldr	r3, [r2, r3]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2207      	movs	r2, #7
 800184c:	4013      	ands	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	43da      	mvns	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2107      	movs	r1, #7
 8001866:	400b      	ands	r3, r1
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	08da      	lsrs	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3208      	adds	r2, #8
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	6939      	ldr	r1, [r7, #16]
 8001880:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	401a      	ands	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	23c0      	movs	r3, #192	; 0xc0
 80018bc:	029b      	lsls	r3, r3, #10
 80018be:	4013      	ands	r3, r2
 80018c0:	d100      	bne.n	80018c4 <HAL_GPIO_Init+0x174>
 80018c2:	e092      	b.n	80019ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80018c4:	4a50      	ldr	r2, [pc, #320]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3318      	adds	r3, #24
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	589b      	ldr	r3, [r3, r2]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2203      	movs	r2, #3
 80018d6:	4013      	ands	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	220f      	movs	r2, #15
 80018dc:	409a      	lsls	r2, r3
 80018de:	0013      	movs	r3, r2
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	23a0      	movs	r3, #160	; 0xa0
 80018ec:	05db      	lsls	r3, r3, #23
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x1ca>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a45      	ldr	r2, [pc, #276]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x1c6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a44      	ldr	r2, [pc, #272]	; (8001a10 <HAL_GPIO_Init+0x2c0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x1c2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_GPIO_Init+0x2c4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x1be>
 800190a:	2303      	movs	r3, #3
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x1cc>
 800190e:	2305      	movs	r3, #5
 8001910:	e004      	b.n	800191c <HAL_GPIO_Init+0x1cc>
 8001912:	2302      	movs	r3, #2
 8001914:	e002      	b.n	800191c <HAL_GPIO_Init+0x1cc>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_GPIO_Init+0x1cc>
 800191a:	2300      	movs	r3, #0
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	2103      	movs	r1, #3
 8001920:	400a      	ands	r2, r1
 8001922:	00d2      	lsls	r2, r2, #3
 8001924:	4093      	lsls	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800192c:	4936      	ldr	r1, [pc, #216]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3318      	adds	r3, #24
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800193a:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	035b      	lsls	r3, r3, #13
 8001952:	4013      	ands	r3, r2
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43da      	mvns	r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	039b      	lsls	r3, r3, #14
 800197c:	4013      	ands	r3, r2
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 8001990:	2384      	movs	r3, #132	; 0x84
 8001992:	58d3      	ldr	r3, [r2, r3]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43da      	mvns	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	4013      	ands	r3, r2
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b4:	4914      	ldr	r1, [pc, #80]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80019b6:	2284      	movs	r2, #132	; 0x84
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80019bc:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	58d3      	ldr	r3, [r2, r3]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43da      	mvns	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	4013      	ands	r3, r2
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019e2:	4909      	ldr	r1, [pc, #36]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	40da      	lsrs	r2, r3
 80019f8:	1e13      	subs	r3, r2, #0
 80019fa:	d000      	beq.n	80019fe <HAL_GPIO_Init+0x2ae>
 80019fc:	e6b0      	b.n	8001760 <HAL_GPIO_Init+0x10>
  }
}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b006      	add	sp, #24
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	50000400 	.word	0x50000400
 8001a10:	50000800 	.word	0x50000800
 8001a14:	50000c00 	.word	0x50000c00

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	0008      	movs	r0, r1
 8001a22:	0011      	movs	r1, r2
 8001a24:	1cbb      	adds	r3, r7, #2
 8001a26:	1c02      	adds	r2, r0, #0
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	1c7b      	adds	r3, r7, #1
 8001a2c:	1c0a      	adds	r2, r1, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a30:	1c7b      	adds	r3, r7, #1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a38:	1cbb      	adds	r3, r7, #2
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a42:	1cbb      	adds	r3, r7, #2
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e082      	b.n	8001b6c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2241      	movs	r2, #65	; 0x41
 8001a6a:	5c9b      	ldrb	r3, [r3, r2]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7fe feb7 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2241      	movs	r2, #65	; 0x41
 8001a86:	2124      	movs	r1, #36	; 0x24
 8001a88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	438a      	bics	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <HAL_I2C_Init+0x120>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4931      	ldr	r1, [pc, #196]	; (8001b78 <HAL_I2C_Init+0x124>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d108      	bne.n	8001ad2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0209      	lsls	r1, r1, #8
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e007      	b.n	8001ae2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2184      	movs	r1, #132	; 0x84
 8001adc:	0209      	lsls	r1, r1, #8
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d104      	bne.n	8001af4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	491f      	ldr	r1, [pc, #124]	; (8001b7c <HAL_I2C_Init+0x128>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	491a      	ldr	r1, [pc, #104]	; (8001b78 <HAL_I2C_Init+0x124>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69d9      	ldr	r1, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1a      	ldr	r2, [r3, #32]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2241      	movs	r2, #65	; 0x41
 8001b58:	2120      	movs	r1, #32
 8001b5a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2242      	movs	r2, #66	; 0x42
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b002      	add	sp, #8
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	f0ffffff 	.word	0xf0ffffff
 8001b78:	ffff7fff 	.word	0xffff7fff
 8001b7c:	02008000 	.word	0x02008000

08001b80 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2241      	movs	r2, #65	; 0x41
 8001b8c:	5c9b      	ldrb	r3, [r3, r2]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d10f      	bne.n	8001bb4 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2241      	movs	r2, #65	; 0x41
 8001b98:	2128      	movs	r1, #40	; 0x28
 8001b9a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_I2C_EnableListen_IT+0x40>)
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	021a      	lsls	r2, r3, #8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0011      	movs	r1, r2
 8001baa:	0018      	movs	r0, r3
 8001bac:	f001 f916 	bl	8002ddc <I2C_Enable_IRQ>

    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8001bb4:	2302      	movs	r3, #2
  }
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	08001d6d 	.word	0x08001d6d

08001bc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
  }
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	001a      	movs	r2, r3
 8001c16:	2301      	movs	r3, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d010      	beq.n	8001c3e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	09db      	lsrs	r3, r3, #7
 8001c20:	001a      	movs	r2, r3
 8001c22:	2301      	movs	r3, #1
 8001c24:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c26:	d00a      	beq.n	8001c3e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	0052      	lsls	r2, r2, #1
 8001c3c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	0a9b      	lsrs	r3, r3, #10
 8001c42:	001a      	movs	r2, r3
 8001c44:	2301      	movs	r3, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d010      	beq.n	8001c6c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	09db      	lsrs	r3, r3, #7
 8001c4e:	001a      	movs	r2, r3
 8001c50:	2301      	movs	r3, #1
 8001c52:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001c54:	d00a      	beq.n	8001c6c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	00d2      	lsls	r2, r2, #3
 8001c6a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	001a      	movs	r2, r3
 8001c72:	2301      	movs	r3, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	d010      	beq.n	8001c9a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	09db      	lsrs	r3, r3, #7
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	2301      	movs	r3, #1
 8001c80:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001c82:	d00a      	beq.n	8001c9a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	2202      	movs	r2, #2
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	220b      	movs	r2, #11
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d005      	beq.n	8001cb4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 ff0e 	bl	8002ad0 <I2C_ITError>
  }
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b006      	add	sp, #24
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	0008      	movs	r0, r1
 8001d06:	0011      	movs	r1, r2
 8001d08:	1cfb      	adds	r3, r7, #3
 8001d0a:	1c02      	adds	r2, r0, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	003b      	movs	r3, r7
 8001d10:	1c0a      	adds	r2, r1, #0
 8001d12:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <I2C_Slave_ISR_IT+0x24>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0fa      	b.n	8001f86 <I2C_Slave_ISR_IT+0x21a>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	2301      	movs	r3, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d00b      	beq.n	8001dbc <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	001a      	movs	r2, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dae:	d005      	beq.n	8001dbc <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 fd0c 	bl	80027d4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d054      	beq.n	8001e72 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	001a      	movs	r2, r3
 8001dce:	2301      	movs	r3, #1
 8001dd0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001dd2:	d04e      	beq.n	8001e72 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d12d      	bne.n	8001e3a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2241      	movs	r2, #65	; 0x41
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b28      	cmp	r3, #40	; 0x28
 8001de8:	d10b      	bne.n	8001e02 <I2C_Slave_ISR_IT+0x96>
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	049b      	lsls	r3, r3, #18
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d106      	bne.n	8001e02 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0011      	movs	r1, r2
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fe0e 	bl	8002a1c <I2C_ITListenCplt>
 8001e00:	e036      	b.n	8001e70 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2241      	movs	r2, #65	; 0x41
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b29      	cmp	r3, #41	; 0x29
 8001e0c:	d110      	bne.n	8001e30 <I2C_Slave_ISR_IT+0xc4>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	4a5f      	ldr	r2, [pc, #380]	; (8001f90 <I2C_Slave_ISR_IT+0x224>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00c      	beq.n	8001e30 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 ff60 	bl	8002ce6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 fb9b 	bl	8002564 <I2C_ITSlaveSeqCplt>
 8001e2e:	e01f      	b.n	8001e70 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2210      	movs	r2, #16
 8001e36:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001e38:	e09d      	b.n	8001f76 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2210      	movs	r2, #16
 8001e40:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	2204      	movs	r2, #4
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <I2C_Slave_ISR_IT+0xf4>
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	045b      	lsls	r3, r3, #17
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d000      	beq.n	8001e60 <I2C_Slave_ISR_IT+0xf4>
 8001e5e:	e08a      	b.n	8001f76 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	0011      	movs	r1, r2
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 fe31 	bl	8002ad0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e6e:	e082      	b.n	8001f76 <I2C_Slave_ISR_IT+0x20a>
 8001e70:	e081      	b.n	8001f76 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	001a      	movs	r2, r3
 8001e78:	2301      	movs	r3, #1
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	001a      	movs	r2, r3
 8001e84:	2301      	movs	r3, #1
 8001e86:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e88:	d02b      	beq.n	8001ee2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d018      	beq.n	8001ec6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d154      	bne.n	8001f7a <I2C_Slave_ISR_IT+0x20e>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4a2f      	ldr	r2, [pc, #188]	; (8001f90 <I2C_Slave_ISR_IT+0x224>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d050      	beq.n	8001f7a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 fb42 	bl	8002564 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001ee0:	e04b      	b.n	8001f7a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	2301      	movs	r3, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d00c      	beq.n	8001f08 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ef8:	d006      	beq.n	8001f08 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	0011      	movs	r1, r2
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 fa49 	bl	8002398 <I2C_ITAddrCplt>
 8001f06:	e039      	b.n	8001f7c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	2301      	movs	r3, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d033      	beq.n	8001f7c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	001a      	movs	r2, r3
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f1e:	d02d      	beq.n	8001f7c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d018      	beq.n	8001f5c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f5a:	e00f      	b.n	8001f7c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	045b      	lsls	r3, r3, #17
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d002      	beq.n	8001f6c <I2C_Slave_ISR_IT+0x200>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 faf8 	bl	8002564 <I2C_ITSlaveSeqCplt>
 8001f74:	e002      	b.n	8001f7c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	e000      	b.n	8001f7c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8001f7a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b006      	add	sp, #24
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	ffff0000 	.word	0xffff0000

08001f94 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	5c9b      	ldrb	r3, [r3, r2]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <I2C_Master_ISR_DMA+0x1a>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e0f7      	b.n	800219e <I2C_Master_ISR_DMA+0x20a>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	001a      	movs	r2, r3
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d019      	beq.n	8001ff6 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001fcc:	d013      	beq.n	8001ff6 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	2204      	movs	r2, #4
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 fef8 	bl	8002ddc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 fe79 	bl	8002ce6 <I2C_Flush_TXDR>
 8001ff4:	e0ce      	b.n	8002194 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	09db      	lsrs	r3, r3, #7
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	d100      	bne.n	8002004 <I2C_Master_ISR_DMA+0x70>
 8002002:	e07e      	b.n	8002102 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	001a      	movs	r2, r3
 800200a:	2301      	movs	r3, #1
 800200c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800200e:	d100      	bne.n	8002012 <I2C_Master_ISR_DMA+0x7e>
 8002010:	e077      	b.n	8002102 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2140      	movs	r1, #64	; 0x40
 800201e:	438a      	bics	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d055      	beq.n	80020d8 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	b29a      	uxth	r2, r3
 8002034:	2312      	movs	r3, #18
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	0592      	lsls	r2, r2, #22
 800203a:	0d92      	lsrs	r2, r2, #22
 800203c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002042:	b29b      	uxth	r3, r3
 8002044:	2bff      	cmp	r3, #255	; 0xff
 8002046:	d906      	bls.n	8002056 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	22ff      	movs	r2, #255	; 0xff
 800204c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	045b      	lsls	r3, r3, #17
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e010      	b.n	8002078 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <I2C_Master_ISR_DMA+0x214>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d003      	beq.n	8002072 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e002      	b.n	8002078 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	049b      	lsls	r3, r3, #18
 8002076:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	b2da      	uxtb	r2, r3
 800207e:	697c      	ldr	r4, [r7, #20]
 8002080:	2312      	movs	r3, #18
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	8819      	ldrh	r1, [r3, #0]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	0023      	movs	r3, r4
 800208e:	f000 fe6b 	bl	8002d68 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2241      	movs	r2, #65	; 0x41
 80020a8:	5c9b      	ldrb	r3, [r3, r2]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b22      	cmp	r3, #34	; 0x22
 80020ae:	d109      	bne.n	80020c4 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	0209      	lsls	r1, r1, #8
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020c2:	e067      	b.n	8002194 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	01c9      	lsls	r1, r1, #7
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020d6:	e05d      	b.n	8002194 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	049b      	lsls	r3, r3, #18
 80020e2:	401a      	ands	r2, r3
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	049b      	lsls	r3, r3, #18
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d004      	beq.n	80020f6 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f9f6 	bl	80024e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80020f4:	e04e      	b.n	8002194 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2140      	movs	r1, #64	; 0x40
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 fce8 	bl	8002ad0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002100:	e048      	b.n	8002194 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	001a      	movs	r2, r3
 8002108:	2301      	movs	r3, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d02e      	beq.n	800216c <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	001a      	movs	r2, r3
 8002114:	2301      	movs	r3, #1
 8002116:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002118:	d028      	beq.n	800216c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d11d      	bne.n	8002160 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	049b      	lsls	r3, r3, #18
 800212e:	401a      	ands	r2, r3
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	049b      	lsls	r3, r3, #18
 8002134:	429a      	cmp	r2, r3
 8002136:	d02c      	beq.n	8002192 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <I2C_Master_ISR_DMA+0x214>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d109      	bne.n	8002156 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	01c9      	lsls	r1, r1, #7
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002154:	e01d      	b.n	8002192 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f9c1 	bl	80024e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800215e:	e018      	b.n	8002192 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	0018      	movs	r0, r3
 8002166:	f000 fcb3 	bl	8002ad0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800216a:	e012      	b.n	8002192 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	001a      	movs	r2, r3
 8002172:	2301      	movs	r3, #1
 8002174:	4013      	ands	r3, r2
 8002176:	d00d      	beq.n	8002194 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	001a      	movs	r2, r3
 800217e:	2301      	movs	r3, #1
 8002180:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002182:	d007      	beq.n	8002194 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	0011      	movs	r1, r2
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fa50 	bl	8002630 <I2C_ITMasterCplt>
 8002190:	e000      	b.n	8002194 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8002192:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b007      	add	sp, #28
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	ffff0000 	.word	0xffff0000

080021ac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	5c9b      	ldrb	r3, [r3, r2]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <I2C_Slave_ISR_DMA+0x24>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0dd      	b.n	800238c <I2C_Slave_ISR_DMA+0x1e0>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2240      	movs	r2, #64	; 0x40
 80021d4:	2101      	movs	r1, #1
 80021d6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	001a      	movs	r2, r3
 80021de:	2301      	movs	r3, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d00b      	beq.n	80021fc <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	001a      	movs	r2, r3
 80021ea:	2301      	movs	r3, #1
 80021ec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021ee:	d005      	beq.n	80021fc <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0011      	movs	r1, r2
 80021f6:	0018      	movs	r0, r3
 80021f8:	f000 faec 	bl	80027d4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	001a      	movs	r2, r3
 8002202:	2301      	movs	r3, #1
 8002204:	4013      	ands	r3, r2
 8002206:	d100      	bne.n	800220a <I2C_Slave_ISR_DMA+0x5e>
 8002208:	e0a9      	b.n	800235e <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	001a      	movs	r2, r3
 8002210:	2301      	movs	r3, #1
 8002212:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002214:	d100      	bne.n	8002218 <I2C_Slave_ISR_DMA+0x6c>
 8002216:	e0a2      	b.n	800235e <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0b9b      	lsrs	r3, r3, #14
 800221c:	001a      	movs	r2, r3
 800221e:	2301      	movs	r3, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d106      	bne.n	8002232 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	0bdb      	lsrs	r3, r3, #15
 8002228:	001a      	movs	r2, r3
 800222a:	2301      	movs	r3, #1
 800222c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800222e:	d100      	bne.n	8002232 <I2C_Slave_ISR_DMA+0x86>
 8002230:	e08e      	b.n	8002350 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0bdb      	lsrs	r3, r3, #15
 800223e:	001a      	movs	r2, r3
 8002240:	2301      	movs	r3, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d007      	beq.n	8002256 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8002252:	2301      	movs	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00d      	beq.n	800227a <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0b9b      	lsrs	r3, r3, #14
 8002262:	001a      	movs	r2, r3
 8002264:	2301      	movs	r3, #1
 8002266:	4013      	ands	r3, r2
 8002268:	d007      	beq.n	800227a <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8002276:	2301      	movs	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d12d      	bne.n	80022dc <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2241      	movs	r2, #65	; 0x41
 8002284:	5c9b      	ldrb	r3, [r3, r2]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b28      	cmp	r3, #40	; 0x28
 800228a:	d10b      	bne.n	80022a4 <I2C_Slave_ISR_DMA+0xf8>
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	049b      	lsls	r3, r3, #18
 8002292:	429a      	cmp	r2, r3
 8002294:	d106      	bne.n	80022a4 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	0011      	movs	r1, r2
 800229c:	0018      	movs	r0, r3
 800229e:	f000 fbbd 	bl	8002a1c <I2C_ITListenCplt>
 80022a2:	e054      	b.n	800234e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2241      	movs	r2, #65	; 0x41
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b29      	cmp	r3, #41	; 0x29
 80022ae:	d110      	bne.n	80022d2 <I2C_Slave_ISR_DMA+0x126>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	4a38      	ldr	r2, [pc, #224]	; (8002394 <I2C_Slave_ISR_DMA+0x1e8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00c      	beq.n	80022d2 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2210      	movs	r2, #16
 80022be:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fd0f 	bl	8002ce6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 f94a 	bl	8002564 <I2C_ITSlaveSeqCplt>
 80022d0:	e03d      	b.n	800234e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2210      	movs	r2, #16
 80022d8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80022da:	e03e      	b.n	800235a <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2210      	movs	r2, #16
 80022e2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	2204      	movs	r2, #4
 80022ea:	431a      	orrs	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80022f0:	2317      	movs	r3, #23
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	2141      	movs	r1, #65	; 0x41
 80022f8:	5c52      	ldrb	r2, [r2, r1]
 80022fa:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <I2C_Slave_ISR_DMA+0x160>
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	045b      	lsls	r3, r3, #17
 8002308:	429a      	cmp	r2, r3
 800230a:	d126      	bne.n	800235a <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800230c:	2217      	movs	r2, #23
 800230e:	18bb      	adds	r3, r7, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b21      	cmp	r3, #33	; 0x21
 8002314:	d003      	beq.n	800231e <I2C_Slave_ISR_DMA+0x172>
 8002316:	18bb      	adds	r3, r7, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b29      	cmp	r3, #41	; 0x29
 800231c:	d103      	bne.n	8002326 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2221      	movs	r2, #33	; 0x21
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
 8002324:	e00b      	b.n	800233e <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002326:	2217      	movs	r2, #23
 8002328:	18bb      	adds	r3, r7, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b22      	cmp	r3, #34	; 0x22
 800232e:	d003      	beq.n	8002338 <I2C_Slave_ISR_DMA+0x18c>
 8002330:	18bb      	adds	r3, r7, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b2a      	cmp	r3, #42	; 0x2a
 8002336:	d102      	bne.n	800233e <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2222      	movs	r2, #34	; 0x22
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	0011      	movs	r1, r2
 8002346:	0018      	movs	r0, r3
 8002348:	f000 fbc2 	bl	8002ad0 <I2C_ITError>
      if (treatdmanack == 1U)
 800234c:	e005      	b.n	800235a <I2C_Slave_ISR_DMA+0x1ae>
 800234e:	e004      	b.n	800235a <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2210      	movs	r2, #16
 8002356:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002358:	e013      	b.n	8002382 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800235a:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800235c:	e011      	b.n	8002382 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	08db      	lsrs	r3, r3, #3
 8002362:	001a      	movs	r2, r3
 8002364:	2301      	movs	r3, #1
 8002366:	4013      	ands	r3, r2
 8002368:	d00b      	beq.n	8002382 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	001a      	movs	r2, r3
 8002370:	2301      	movs	r3, #1
 8002372:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002374:	d005      	beq.n	8002382 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	0011      	movs	r1, r2
 800237c:	0018      	movs	r0, r3
 800237e:	f000 f80b 	bl	8002398 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b008      	add	sp, #32
 8002392:	bd80      	pop	{r7, pc}
 8002394:	ffff0000 	.word	0xffff0000

08002398 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2241      	movs	r2, #65	; 0x41
 80023a6:	5c9b      	ldrb	r3, [r3, r2]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	001a      	movs	r2, r3
 80023ac:	2328      	movs	r3, #40	; 0x28
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b28      	cmp	r3, #40	; 0x28
 80023b2:	d000      	beq.n	80023b6 <I2C_ITAddrCplt+0x1e>
 80023b4:	e088      	b.n	80024c8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	250f      	movs	r5, #15
 80023c2:	197b      	adds	r3, r7, r5
 80023c4:	2101      	movs	r1, #1
 80023c6:	400a      	ands	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	200c      	movs	r0, #12
 80023d6:	183b      	adds	r3, r7, r0
 80023d8:	21fe      	movs	r1, #254	; 0xfe
 80023da:	400a      	ands	r2, r1
 80023dc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	240a      	movs	r4, #10
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	0592      	lsls	r2, r2, #22
 80023ec:	0d92      	lsrs	r2, r2, #22
 80023ee:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	2308      	movs	r3, #8
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	21fe      	movs	r1, #254	; 0xfe
 80023fe:	400a      	ands	r2, r1
 8002400:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d148      	bne.n	800249c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800240a:	0021      	movs	r1, r4
 800240c:	187b      	adds	r3, r7, r1
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	09db      	lsrs	r3, r3, #7
 8002412:	b29a      	uxth	r2, r3
 8002414:	183b      	adds	r3, r7, r0
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	4053      	eors	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	001a      	movs	r2, r3
 800241e:	2306      	movs	r3, #6
 8002420:	4013      	ands	r3, r2
 8002422:	d120      	bne.n	8002466 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002424:	183b      	adds	r3, r7, r0
 8002426:	187a      	adds	r2, r7, r1
 8002428:	8812      	ldrh	r2, [r2, #0]
 800242a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	2b02      	cmp	r3, #2
 800243c:	d14c      	bne.n	80024d8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2208      	movs	r2, #8
 800244a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002454:	183b      	adds	r3, r7, r0
 8002456:	881a      	ldrh	r2, [r3, #0]
 8002458:	197b      	adds	r3, r7, r5
 800245a:	7819      	ldrb	r1, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	0018      	movs	r0, r3
 8002460:	f7ff fc4c 	bl	8001cfc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002464:	e038      	b.n	80024d8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002466:	240c      	movs	r4, #12
 8002468:	193b      	adds	r3, r7, r4
 800246a:	2208      	movs	r2, #8
 800246c:	18ba      	adds	r2, r7, r2
 800246e:	8812      	ldrh	r2, [r2, #0]
 8002470:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	021a      	lsls	r2, r3, #8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0011      	movs	r1, r2
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fd1e 	bl	8002ebc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	2100      	movs	r1, #0
 8002486:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002488:	193b      	adds	r3, r7, r4
 800248a:	881a      	ldrh	r2, [r3, #0]
 800248c:	230f      	movs	r3, #15
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	7819      	ldrb	r1, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0018      	movs	r0, r3
 8002496:	f7ff fc31 	bl	8001cfc <HAL_I2C_AddrCallback>
}
 800249a:	e01d      	b.n	80024d8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	021a      	lsls	r2, r3, #8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0011      	movs	r1, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 fd09 	bl	8002ebc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2240      	movs	r2, #64	; 0x40
 80024ae:	2100      	movs	r1, #0
 80024b0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024b2:	230c      	movs	r3, #12
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	881a      	ldrh	r2, [r3, #0]
 80024b8:	230f      	movs	r3, #15
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	7819      	ldrb	r1, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff fc1b 	bl	8001cfc <HAL_I2C_AddrCallback>
}
 80024c6:	e007      	b.n	80024d8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2208      	movs	r2, #8
 80024ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bdb0      	pop	{r4, r5, r7, pc}

080024e0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2242      	movs	r2, #66	; 0x42
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2241      	movs	r2, #65	; 0x41
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b21      	cmp	r3, #33	; 0x21
 80024fa:	d117      	bne.n	800252c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2241      	movs	r2, #65	; 0x41
 8002500:	2120      	movs	r1, #32
 8002502:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2211      	movs	r2, #17
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2101      	movs	r1, #1
 8002514:	0018      	movs	r0, r3
 8002516:	f000 fcd1 	bl	8002ebc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff fbc9 	bl	8001cbc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800252a:	e016      	b.n	800255a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2241      	movs	r2, #65	; 0x41
 8002530:	2120      	movs	r1, #32
 8002532:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2212      	movs	r2, #18
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2102      	movs	r1, #2
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fcb9 	bl	8002ebc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff fbb9 	bl	8001ccc <HAL_I2C_MasterRxCpltCallback>
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2242      	movs	r2, #66	; 0x42
 8002578:	2100      	movs	r1, #0
 800257a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	0b9b      	lsrs	r3, r3, #14
 8002580:	001a      	movs	r2, r3
 8002582:	2301      	movs	r3, #1
 8002584:	4013      	ands	r3, r2
 8002586:	d008      	beq.n	800259a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4925      	ldr	r1, [pc, #148]	; (8002628 <I2C_ITSlaveSeqCplt+0xc4>)
 8002594:	400a      	ands	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e00d      	b.n	80025b6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	0bdb      	lsrs	r3, r3, #15
 800259e:	001a      	movs	r2, r3
 80025a0:	2301      	movs	r3, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	d007      	beq.n	80025b6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	491e      	ldr	r1, [pc, #120]	; (800262c <I2C_ITSlaveSeqCplt+0xc8>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2241      	movs	r2, #65	; 0x41
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b29      	cmp	r3, #41	; 0x29
 80025c0:	d114      	bne.n	80025ec <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2241      	movs	r2, #65	; 0x41
 80025c6:	2128      	movs	r1, #40	; 0x28
 80025c8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2221      	movs	r2, #33	; 0x21
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2101      	movs	r1, #1
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fc71 	bl	8002ebc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff fb79 	bl	8001cdc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80025ea:	e019      	b.n	8002620 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2241      	movs	r2, #65	; 0x41
 80025f0:	5c9b      	ldrb	r3, [r3, r2]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b2a      	cmp	r3, #42	; 0x2a
 80025f6:	d113      	bne.n	8002620 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2241      	movs	r2, #65	; 0x41
 80025fc:	2128      	movs	r1, #40	; 0x28
 80025fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2222      	movs	r2, #34	; 0x22
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2102      	movs	r1, #2
 800260a:	0018      	movs	r0, r3
 800260c:	f000 fc56 	bl	8002ebc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff fb66 	bl	8001cec <HAL_I2C_SlaveRxCpltCallback>
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}
 8002628:	ffffbfff 	.word	0xffffbfff
 800262c:	ffff7fff 	.word	0xffff7fff

08002630 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2220      	movs	r2, #32
 8002644:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2241      	movs	r2, #65	; 0x41
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b21      	cmp	r3, #33	; 0x21
 8002650:	d108      	bne.n	8002664 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2101      	movs	r1, #1
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fc30 	bl	8002ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2211      	movs	r2, #17
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
 8002662:	e00d      	b.n	8002680 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2241      	movs	r2, #65	; 0x41
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b22      	cmp	r3, #34	; 0x22
 800266e:	d107      	bne.n	8002680 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2102      	movs	r1, #2
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fc21 	bl	8002ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2212      	movs	r2, #18
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4950      	ldr	r1, [pc, #320]	; (80027cc <I2C_ITMasterCplt+0x19c>)
 800268c:	400a      	ands	r2, r1
 800268e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4d      	ldr	r2, [pc, #308]	; (80027d0 <I2C_ITMasterCplt+0x1a0>)
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	001a      	movs	r2, r3
 80026a2:	2301      	movs	r3, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	d009      	beq.n	80026bc <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2210      	movs	r2, #16
 80026ae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	2204      	movs	r2, #4
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2241      	movs	r2, #65	; 0x41
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b60      	cmp	r3, #96	; 0x60
 80026c6:	d10b      	bne.n	80026e0 <I2C_ITMasterCplt+0xb0>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	001a      	movs	r2, r3
 80026ce:	2301      	movs	r3, #1
 80026d0:	4013      	ands	r3, r2
 80026d2:	d005      	beq.n	80026e0 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80026de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 faff 	bl	8002ce6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2241      	movs	r2, #65	; 0x41
 80026f2:	5c9b      	ldrb	r3, [r3, r2]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b60      	cmp	r3, #96	; 0x60
 80026f8:	d002      	beq.n	8002700 <I2C_ITMasterCplt+0xd0>
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0011      	movs	r1, r2
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f9e1 	bl	8002ad0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800270e:	e058      	b.n	80027c2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2241      	movs	r2, #65	; 0x41
 8002714:	5c9b      	ldrb	r3, [r3, r2]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b21      	cmp	r3, #33	; 0x21
 800271a:	d126      	bne.n	800276a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2241      	movs	r2, #65	; 0x41
 8002720:	2120      	movs	r1, #32
 8002722:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2242      	movs	r2, #66	; 0x42
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d10c      	bne.n	8002750 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2242      	movs	r2, #66	; 0x42
 800273a:	2100      	movs	r1, #0
 800273c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	0018      	movs	r0, r3
 800274a:	f7ff faef 	bl	8001d2c <HAL_I2C_MemTxCpltCallback>
}
 800274e:	e038      	b.n	80027c2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2242      	movs	r2, #66	; 0x42
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2240      	movs	r2, #64	; 0x40
 800275c:	2100      	movs	r1, #0
 800275e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f7ff faaa 	bl	8001cbc <HAL_I2C_MasterTxCpltCallback>
}
 8002768:	e02b      	b.n	80027c2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2241      	movs	r2, #65	; 0x41
 800276e:	5c9b      	ldrb	r3, [r3, r2]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b22      	cmp	r3, #34	; 0x22
 8002774:	d125      	bne.n	80027c2 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2241      	movs	r2, #65	; 0x41
 800277a:	2120      	movs	r1, #32
 800277c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2242      	movs	r2, #66	; 0x42
 8002788:	5c9b      	ldrb	r3, [r3, r2]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d10c      	bne.n	80027aa <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2242      	movs	r2, #66	; 0x42
 8002794:	2100      	movs	r1, #0
 8002796:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2240      	movs	r2, #64	; 0x40
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff faca 	bl	8001d3c <HAL_I2C_MemRxCpltCallback>
}
 80027a8:	e00b      	b.n	80027c2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2242      	movs	r2, #66	; 0x42
 80027ae:	2100      	movs	r1, #0
 80027b0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2240      	movs	r2, #64	; 0x40
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff fa85 	bl	8001ccc <HAL_I2C_MasterRxCpltCallback>
}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b006      	add	sp, #24
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	fe00e800 	.word	0xfe00e800
 80027d0:	ffff0000 	.word	0xffff0000

080027d4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027ea:	200f      	movs	r0, #15
 80027ec:	183b      	adds	r3, r7, r0
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	2141      	movs	r1, #65	; 0x41
 80027f2:	5c52      	ldrb	r2, [r2, r1]
 80027f4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2220      	movs	r2, #32
 80027fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b21      	cmp	r3, #33	; 0x21
 8002804:	d003      	beq.n	800280e <I2C_ITSlaveCplt+0x3a>
 8002806:	183b      	adds	r3, r7, r0
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b29      	cmp	r3, #41	; 0x29
 800280c:	d109      	bne.n	8002822 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800280e:	4a7d      	ldr	r2, [pc, #500]	; (8002a04 <I2C_ITSlaveCplt+0x230>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fb51 	bl	8002ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2221      	movs	r2, #33	; 0x21
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
 8002820:	e011      	b.n	8002846 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002822:	220f      	movs	r2, #15
 8002824:	18bb      	adds	r3, r7, r2
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b22      	cmp	r3, #34	; 0x22
 800282a:	d003      	beq.n	8002834 <I2C_ITSlaveCplt+0x60>
 800282c:	18bb      	adds	r3, r7, r2
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b2a      	cmp	r3, #42	; 0x2a
 8002832:	d108      	bne.n	8002846 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002834:	4a74      	ldr	r2, [pc, #464]	; (8002a08 <I2C_ITSlaveCplt+0x234>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fb3e 	bl	8002ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2222      	movs	r2, #34	; 0x22
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0209      	lsls	r1, r1, #8
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	496a      	ldr	r1, [pc, #424]	; (8002a0c <I2C_ITSlaveCplt+0x238>)
 8002864:	400a      	ands	r2, r1
 8002866:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 fa3b 	bl	8002ce6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	0b9b      	lsrs	r3, r3, #14
 8002874:	001a      	movs	r2, r3
 8002876:	2301      	movs	r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d013      	beq.n	80028a4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4962      	ldr	r1, [pc, #392]	; (8002a10 <I2C_ITSlaveCplt+0x23c>)
 8002888:	400a      	ands	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a2:	e018      	b.n	80028d6 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	0bdb      	lsrs	r3, r3, #15
 80028a8:	001a      	movs	r2, r3
 80028aa:	2301      	movs	r3, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d012      	beq.n	80028d6 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4956      	ldr	r1, [pc, #344]	; (8002a14 <I2C_ITSlaveCplt+0x240>)
 80028bc:	400a      	ands	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	001a      	movs	r2, r3
 80028dc:	2301      	movs	r3, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	d020      	beq.n	8002924 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2204      	movs	r2, #4
 80028e6:	4393      	bics	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	2204      	movs	r2, #4
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2242      	movs	r2, #66	; 0x42
 800293e:	2100      	movs	r1, #0
 8002940:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f000 f8b9 	bl	8002ad0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2241      	movs	r2, #65	; 0x41
 8002962:	5c9b      	ldrb	r3, [r3, r2]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b28      	cmp	r3, #40	; 0x28
 8002968:	d147      	bne.n	80029fa <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f853 	bl	8002a1c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002976:	e040      	b.n	80029fa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <I2C_ITSlaveCplt+0x244>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d016      	beq.n	80029b0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f7ff fded 	bl	8002564 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <I2C_ITSlaveCplt+0x244>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2241      	movs	r2, #65	; 0x41
 8002994:	2120      	movs	r1, #32
 8002996:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	2100      	movs	r1, #0
 80029a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff f9b7 	bl	8001d1c <HAL_I2C_ListenCpltCallback>
}
 80029ae:	e024      	b.n	80029fa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2241      	movs	r2, #65	; 0x41
 80029b4:	5c9b      	ldrb	r3, [r3, r2]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b22      	cmp	r3, #34	; 0x22
 80029ba:	d10f      	bne.n	80029dc <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2241      	movs	r2, #65	; 0x41
 80029c0:	2120      	movs	r1, #32
 80029c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	2100      	movs	r1, #0
 80029d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7ff f989 	bl	8001cec <HAL_I2C_SlaveRxCpltCallback>
}
 80029da:	e00e      	b.n	80029fa <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2241      	movs	r2, #65	; 0x41
 80029e0:	2120      	movs	r1, #32
 80029e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2240      	movs	r2, #64	; 0x40
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7ff f971 	bl	8001cdc <HAL_I2C_SlaveTxCpltCallback>
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b006      	add	sp, #24
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	00008001 	.word	0x00008001
 8002a08:	00008002 	.word	0x00008002
 8002a0c:	fe00e800 	.word	0xfe00e800
 8002a10:	ffffbfff 	.word	0xffffbfff
 8002a14:	ffff7fff 	.word	0xffff7fff
 8002a18:	ffff0000 	.word	0xffff0000

08002a1c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <I2C_ITListenCplt+0xac>)
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2241      	movs	r2, #65	; 0x41
 8002a36:	2120      	movs	r1, #32
 8002a38:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2242      	movs	r2, #66	; 0x42
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	2301      	movs	r3, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d022      	beq.n	8002a9a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	2204      	movs	r2, #4
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <I2C_ITListenCplt+0xb0>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 fa0b 	bl	8002ebc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2210      	movs	r2, #16
 8002aac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff f92f 	bl	8001d1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	ffff0000 	.word	0xffff0000
 8002acc:	00008003 	.word	0x00008003

08002ad0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ada:	200f      	movs	r0, #15
 8002adc:	183b      	adds	r3, r7, r0
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	2141      	movs	r1, #65	; 0x41
 8002ae2:	5c52      	ldrb	r2, [r2, r1]
 8002ae4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2242      	movs	r2, #66	; 0x42
 8002aea:	2100      	movs	r1, #0
 8002aec:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a62      	ldr	r2, [pc, #392]	; (8002c7c <I2C_ITError+0x1ac>)
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002b06:	183b      	adds	r3, r7, r0
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b28      	cmp	r3, #40	; 0x28
 8002b0c:	d007      	beq.n	8002b1e <I2C_ITError+0x4e>
 8002b0e:	183b      	adds	r3, r7, r0
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b29      	cmp	r3, #41	; 0x29
 8002b14:	d003      	beq.n	8002b1e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002b16:	183b      	adds	r3, r7, r0
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b1c:	d10c      	bne.n	8002b38 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2103      	movs	r1, #3
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f9ca 	bl	8002ebc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2241      	movs	r2, #65	; 0x41
 8002b2c:	2128      	movs	r1, #40	; 0x28
 8002b2e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a53      	ldr	r2, [pc, #332]	; (8002c80 <I2C_ITError+0x1b0>)
 8002b34:	635a      	str	r2, [r3, #52]	; 0x34
 8002b36:	e012      	b.n	8002b5e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <I2C_ITError+0x1b4>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f9bc 	bl	8002ebc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2241      	movs	r2, #65	; 0x41
 8002b48:	5c9b      	ldrb	r3, [r3, r2]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b60      	cmp	r3, #96	; 0x60
 8002b4e:	d003      	beq.n	8002b58 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2241      	movs	r2, #65	; 0x41
 8002b54:	2120      	movs	r1, #32
 8002b56:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d03b      	beq.n	8002be4 <I2C_ITError+0x114>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b11      	cmp	r3, #17
 8002b70:	d002      	beq.n	8002b78 <I2C_ITError+0xa8>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b21      	cmp	r3, #33	; 0x21
 8002b76:	d135      	bne.n	8002be4 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	01db      	lsls	r3, r3, #7
 8002b82:	401a      	ands	r2, r3
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	01db      	lsls	r3, r3, #7
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d107      	bne.n	8002b9c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	493c      	ldr	r1, [pc, #240]	; (8002c88 <I2C_ITError+0x1b8>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7fe fdc9 	bl	8001738 <HAL_DMA_GetState>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d016      	beq.n	8002bda <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	4a36      	ldr	r2, [pc, #216]	; (8002c8c <I2C_ITError+0x1bc>)
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	2100      	movs	r1, #0
 8002bba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7fe fd4f 	bl	8001664 <HAL_DMA_Abort_IT>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d051      	beq.n	8002c6e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bd8:	e049      	b.n	8002c6e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 f859 	bl	8002c94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002be2:	e044      	b.n	8002c6e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d03b      	beq.n	8002c64 <I2C_ITError+0x194>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d002      	beq.n	8002bf8 <I2C_ITError+0x128>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b22      	cmp	r3, #34	; 0x22
 8002bf6:	d135      	bne.n	8002c64 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	401a      	ands	r2, r3
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d107      	bne.n	8002c1c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	491e      	ldr	r1, [pc, #120]	; (8002c90 <I2C_ITError+0x1c0>)
 8002c18:	400a      	ands	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7fe fd89 	bl	8001738 <HAL_DMA_GetState>
 8002c26:	0003      	movs	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d016      	beq.n	8002c5a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <I2C_ITError+0x1bc>)
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fe fd0f 	bl	8001664 <HAL_DMA_Abort_IT>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d013      	beq.n	8002c72 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	0018      	movs	r0, r3
 8002c56:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c58:	e00b      	b.n	8002c72 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 f819 	bl	8002c94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c62:	e006      	b.n	8002c72 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f814 	bl	8002c94 <I2C_TreatErrorCallback>
  }
}
 8002c6c:	e002      	b.n	8002c74 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	e000      	b.n	8002c74 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c72:	46c0      	nop			; (mov r8, r8)
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	ffff0000 	.word	0xffff0000
 8002c80:	08001d6d 	.word	0x08001d6d
 8002c84:	00008003 	.word	0x00008003
 8002c88:	ffffbfff 	.word	0xffffbfff
 8002c8c:	08002d2b 	.word	0x08002d2b
 8002c90:	ffff7fff 	.word	0xffff7fff

08002c94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2241      	movs	r2, #65	; 0x41
 8002ca0:	5c9b      	ldrb	r3, [r3, r2]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b60      	cmp	r3, #96	; 0x60
 8002ca6:	d10f      	bne.n	8002cc8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2241      	movs	r2, #65	; 0x41
 8002cac:	2120      	movs	r1, #32
 8002cae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2240      	movs	r2, #64	; 0x40
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff f84b 	bl	8001d5c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cc6:	e00a      	b.n	8002cde <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2240      	movs	r2, #64	; 0x40
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7ff f837 	bl	8001d4c <HAL_I2C_ErrorCallback>
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d103      	bne.n	8002d04 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	619a      	str	r2, [r3, #24]
  }
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	2200      	movs	r2, #0
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	2200      	movs	r2, #0
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7ff ff9a 	bl	8002c94 <I2C_TreatErrorCallback>
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b004      	add	sp, #16
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	0008      	movs	r0, r1
 8002d72:	0011      	movs	r1, r2
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	240a      	movs	r4, #10
 8002d78:	193b      	adds	r3, r7, r4
 8002d7a:	1c02      	adds	r2, r0, #0
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	2009      	movs	r0, #9
 8002d80:	183b      	adds	r3, r7, r0
 8002d82:	1c0a      	adds	r2, r1, #0
 8002d84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	059b      	lsls	r3, r3, #22
 8002d8c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d8e:	183b      	adds	r3, r7, r0
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	0419      	lsls	r1, r3, #16
 8002d94:	23ff      	movs	r3, #255	; 0xff
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	4313      	orrs	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db2:	0d51      	lsrs	r1, r2, #21
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	00d2      	lsls	r2, r2, #3
 8002db8:	400a      	ands	r2, r1
 8002dba:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <I2C_TransferConfig+0x70>)
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	43d2      	mvns	r2, r2
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	0011      	movs	r1, r2
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b007      	add	sp, #28
 8002dd4:	bd90      	pop	{r4, r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	03ff63ff 	.word	0x03ff63ff

08002ddc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	000a      	movs	r2, r1
 8002de6:	1cbb      	adds	r3, r7, #2
 8002de8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df2:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <I2C_Enable_IRQ+0xd8>)
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d004      	beq.n	8002e02 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <I2C_Enable_IRQ+0xdc>)
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d121      	bne.n	8002e46 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e02:	1cbb      	adds	r3, r7, #2
 8002e04:	2200      	movs	r2, #0
 8002e06:	5e9b      	ldrsh	r3, [r3, r2]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	da03      	bge.n	8002e14 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	22b8      	movs	r2, #184	; 0xb8
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e14:	1cbb      	adds	r3, r7, #2
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d103      	bne.n	8002e24 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2290      	movs	r2, #144	; 0x90
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e24:	1cbb      	adds	r3, r7, #2
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d103      	bne.n	8002e34 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2260      	movs	r2, #96	; 0x60
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e34:	1cbb      	adds	r3, r7, #2
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d12f      	bne.n	8002e9c <I2C_Enable_IRQ+0xc0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2240      	movs	r2, #64	; 0x40
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e44:	e02a      	b.n	8002e9c <I2C_Enable_IRQ+0xc0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e46:	1cbb      	adds	r3, r7, #2
 8002e48:	2200      	movs	r2, #0
 8002e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da03      	bge.n	8002e58 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	22b8      	movs	r2, #184	; 0xb8
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002e58:	1cbb      	adds	r3, r7, #2
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d003      	beq.n	8002e6a <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	22f2      	movs	r2, #242	; 0xf2
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e6a:	1cbb      	adds	r3, r7, #2
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	d003      	beq.n	8002e7c <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	22f4      	movs	r2, #244	; 0xf4
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e7c:	1cbb      	adds	r3, r7, #2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d103      	bne.n	8002e8c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2290      	movs	r2, #144	; 0x90
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e8c:	1cbb      	adds	r3, r7, #2
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d103      	bne.n	8002e9c <I2C_Enable_IRQ+0xc0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	08001f95 	.word	0x08001f95
 8002eb8:	080021ad 	.word	0x080021ad

08002ebc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	000a      	movs	r2, r1
 8002ec6:	1cbb      	adds	r3, r7, #2
 8002ec8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ece:	1cbb      	adds	r3, r7, #2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d010      	beq.n	8002efa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2242      	movs	r2, #66	; 0x42
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2241      	movs	r2, #65	; 0x41
 8002ee4:	5c9b      	ldrb	r3, [r3, r2]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	001a      	movs	r2, r3
 8002eea:	2328      	movs	r3, #40	; 0x28
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b28      	cmp	r3, #40	; 0x28
 8002ef0:	d003      	beq.n	8002efa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	22b0      	movs	r2, #176	; 0xb0
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002efa:	1cbb      	adds	r3, r7, #2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	2202      	movs	r2, #2
 8002f00:	4013      	ands	r3, r2
 8002f02:	d010      	beq.n	8002f26 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2244      	movs	r2, #68	; 0x44
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2241      	movs	r2, #65	; 0x41
 8002f10:	5c9b      	ldrb	r3, [r3, r2]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	001a      	movs	r2, r3
 8002f16:	2328      	movs	r3, #40	; 0x28
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b28      	cmp	r3, #40	; 0x28
 8002f1c:	d003      	beq.n	8002f26 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	22b0      	movs	r2, #176	; 0xb0
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f26:	1cbb      	adds	r3, r7, #2
 8002f28:	2200      	movs	r2, #0
 8002f2a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	da03      	bge.n	8002f38 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	22b8      	movs	r2, #184	; 0xb8
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f38:	1cbb      	adds	r3, r7, #2
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d103      	bne.n	8002f48 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2290      	movs	r2, #144	; 0x90
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f48:	1cbb      	adds	r3, r7, #2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d103      	bne.n	8002f58 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f58:	1cbb      	adds	r3, r7, #2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d103      	bne.n	8002f68 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	43d9      	mvns	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	400a      	ands	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2241      	movs	r2, #65	; 0x41
 8002f92:	5c9b      	ldrb	r3, [r3, r2]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d138      	bne.n	800300c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	5c9b      	ldrb	r3, [r3, r2]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e032      	b.n	800300e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	2101      	movs	r1, #1
 8002fae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2241      	movs	r2, #65	; 0x41
 8002fb4:	2124      	movs	r1, #36	; 0x24
 8002fb6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4911      	ldr	r1, [pc, #68]	; (8003018 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6819      	ldr	r1, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2241      	movs	r2, #65	; 0x41
 8002ffc:	2120      	movs	r1, #32
 8002ffe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b002      	add	sp, #8
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	ffffefff 	.word	0xffffefff

0800301c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2241      	movs	r2, #65	; 0x41
 800302a:	5c9b      	ldrb	r3, [r3, r2]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b20      	cmp	r3, #32
 8003030:	d139      	bne.n	80030a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	5c9b      	ldrb	r3, [r3, r2]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800303c:	2302      	movs	r3, #2
 800303e:	e033      	b.n	80030a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	2101      	movs	r1, #1
 8003046:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2241      	movs	r2, #65	; 0x41
 800304c:	2124      	movs	r1, #36	; 0x24
 800304e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	438a      	bics	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a11      	ldr	r2, [pc, #68]	; (80030b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	430a      	orrs	r2, r1
 8003090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2241      	movs	r2, #65	; 0x41
 8003096:	2120      	movs	r1, #32
 8003098:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2240      	movs	r2, #64	; 0x40
 800309e:	2100      	movs	r1, #0
 80030a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b004      	add	sp, #16
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	fffff0ff 	.word	0xfffff0ff

080030b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d11f      	bne.n	8003118 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	0013      	movs	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	189b      	adds	r3, r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4912      	ldr	r1, [pc, #72]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fd f80a 	bl	8000100 <__udivsi3>
 80030ec:	0003      	movs	r3, r0
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030f2:	e008      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e009      	b.n	800311a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	401a      	ands	r2, r3
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	429a      	cmp	r2, r3
 8003116:	d0ed      	beq.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	40007000 	.word	0x40007000
 8003128:	fffff9ff 	.word	0xfffff9ff
 800312c:	20000008 	.word	0x20000008
 8003130:	000f4240 	.word	0x000f4240

08003134 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e2f3      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	4013      	ands	r3, r2
 800314e:	d100      	bne.n	8003152 <HAL_RCC_OscConfig+0x1e>
 8003150:	e07c      	b.n	800324c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003152:	4bc3      	ldr	r3, [pc, #780]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2238      	movs	r2, #56	; 0x38
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315c:	4bc0      	ldr	r3, [pc, #768]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2203      	movs	r2, #3
 8003162:	4013      	ands	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b10      	cmp	r3, #16
 800316a:	d102      	bne.n	8003172 <HAL_RCC_OscConfig+0x3e>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d002      	beq.n	8003178 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4bb9      	ldr	r3, [pc, #740]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	029b      	lsls	r3, r3, #10
 8003180:	4013      	ands	r3, r2
 8003182:	d062      	beq.n	800324a <HAL_RCC_OscConfig+0x116>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d15e      	bne.n	800324a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e2ce      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	025b      	lsls	r3, r3, #9
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x78>
 800319c:	4bb0      	ldr	r3, [pc, #704]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4baf      	ldr	r3, [pc, #700]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	0249      	lsls	r1, r1, #9
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e020      	b.n	80031ee <HAL_RCC_OscConfig+0xba>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	23a0      	movs	r3, #160	; 0xa0
 80031b2:	02db      	lsls	r3, r3, #11
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d10e      	bne.n	80031d6 <HAL_RCC_OscConfig+0xa2>
 80031b8:	4ba9      	ldr	r3, [pc, #676]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4ba8      	ldr	r3, [pc, #672]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	02c9      	lsls	r1, r1, #11
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	4ba6      	ldr	r3, [pc, #664]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4ba5      	ldr	r3, [pc, #660]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	0249      	lsls	r1, r1, #9
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e00b      	b.n	80031ee <HAL_RCC_OscConfig+0xba>
 80031d6:	4ba2      	ldr	r3, [pc, #648]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4ba1      	ldr	r3, [pc, #644]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031dc:	49a1      	ldr	r1, [pc, #644]	; (8003464 <HAL_RCC_OscConfig+0x330>)
 80031de:	400a      	ands	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	4b9f      	ldr	r3, [pc, #636]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b9e      	ldr	r3, [pc, #632]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80031e8:	499f      	ldr	r1, [pc, #636]	; (8003468 <HAL_RCC_OscConfig+0x334>)
 80031ea:	400a      	ands	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d014      	beq.n	8003220 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fd fccf 	bl	8000b98 <HAL_GetTick>
 80031fa:	0003      	movs	r3, r0
 80031fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fd fcca 	bl	8000b98 <HAL_GetTick>
 8003204:	0002      	movs	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e28d      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003212:	4b93      	ldr	r3, [pc, #588]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	4013      	ands	r3, r2
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xcc>
 800321e:	e015      	b.n	800324c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fd fcba 	bl	8000b98 <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322a:	f7fd fcb5 	bl	8000b98 <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b64      	cmp	r3, #100	; 0x64
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e278      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800323c:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	029b      	lsls	r3, r3, #10
 8003244:	4013      	ands	r3, r2
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0xf6>
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2202      	movs	r2, #2
 8003252:	4013      	ands	r3, r2
 8003254:	d100      	bne.n	8003258 <HAL_RCC_OscConfig+0x124>
 8003256:	e099      	b.n	800338c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003258:	4b81      	ldr	r3, [pc, #516]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2238      	movs	r2, #56	; 0x38
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003262:	4b7f      	ldr	r3, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2203      	movs	r2, #3
 8003268:	4013      	ands	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b10      	cmp	r3, #16
 8003270:	d102      	bne.n	8003278 <HAL_RCC_OscConfig+0x144>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d002      	beq.n	800327e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d135      	bne.n	80032ea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327e:	4b78      	ldr	r3, [pc, #480]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4013      	ands	r3, r2
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x162>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e24b      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b72      	ldr	r3, [pc, #456]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a74      	ldr	r2, [pc, #464]	; (800346c <HAL_RCC_OscConfig+0x338>)
 800329c:	4013      	ands	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	021a      	lsls	r2, r3, #8
 80032a6:	4b6e      	ldr	r3, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d112      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032b2:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x33c>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	0019      	movs	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80032c6:	4b66      	ldr	r3, [pc, #408]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0adb      	lsrs	r3, r3, #11
 80032cc:	2207      	movs	r2, #7
 80032ce:	4013      	ands	r3, r2
 80032d0:	4a68      	ldr	r2, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x340>)
 80032d2:	40da      	lsrs	r2, r3
 80032d4:	4b68      	ldr	r3, [pc, #416]	; (8003478 <HAL_RCC_OscConfig+0x344>)
 80032d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_OscConfig+0x348>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fd fbff 	bl	8000ae0 <HAL_InitTick>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d051      	beq.n	800338a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e221      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d030      	beq.n	8003354 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032f2:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a5e      	ldr	r2, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x33c>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	4b57      	ldr	r3, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003306:	4b56      	ldr	r3, [pc, #344]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b55      	ldr	r3, [pc, #340]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0049      	lsls	r1, r1, #1
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fd fc40 	bl	8000b98 <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7fd fc3b 	bl	8000b98 <HAL_GetTick>
 8003322:	0002      	movs	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1fe      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4013      	ands	r3, r2
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b48      	ldr	r3, [pc, #288]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a4a      	ldr	r2, [pc, #296]	; (800346c <HAL_RCC_OscConfig+0x338>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	021a      	lsls	r2, r3, #8
 800334c:	4b44      	ldr	r3, [pc, #272]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e01b      	b.n	800338c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003354:	4b42      	ldr	r3, [pc, #264]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800335a:	4949      	ldr	r1, [pc, #292]	; (8003480 <HAL_RCC_OscConfig+0x34c>)
 800335c:	400a      	ands	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fc1a 	bl	8000b98 <HAL_GetTick>
 8003364:	0003      	movs	r3, r0
 8003366:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336a:	f7fd fc15 	bl	8000b98 <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1d8      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800337c:	4b38      	ldr	r3, [pc, #224]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4013      	ands	r3, r2
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x236>
 8003388:	e000      	b.n	800338c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2208      	movs	r2, #8
 8003392:	4013      	ands	r3, r2
 8003394:	d047      	beq.n	8003426 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003396:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2238      	movs	r2, #56	; 0x38
 800339c:	4013      	ands	r3, r2
 800339e:	2b18      	cmp	r3, #24
 80033a0:	d10a      	bne.n	80033b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80033a2:	4b2f      	ldr	r3, [pc, #188]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80033a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a6:	2202      	movs	r2, #2
 80033a8:	4013      	ands	r3, r2
 80033aa:	d03c      	beq.n	8003426 <HAL_RCC_OscConfig+0x2f2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d138      	bne.n	8003426 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e1ba      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d019      	beq.n	80033f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80033c0:	4b27      	ldr	r3, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80033c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033c4:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80033c6:	2101      	movs	r1, #1
 80033c8:	430a      	orrs	r2, r1
 80033ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd fbe4 	bl	8000b98 <HAL_GetTick>
 80033d0:	0003      	movs	r3, r0
 80033d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d6:	f7fd fbdf 	bl	8000b98 <HAL_GetTick>
 80033da:	0002      	movs	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a2      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e8:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	2202      	movs	r2, #2
 80033ee:	4013      	ands	r3, r2
 80033f0:	d0f1      	beq.n	80033d6 <HAL_RCC_OscConfig+0x2a2>
 80033f2:	e018      	b.n	8003426 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80033f4:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80033f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	438a      	bics	r2, r1
 80033fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd fbca 	bl	8000b98 <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340a:	f7fd fbc5 	bl	8000b98 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e188      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800341e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003420:	2202      	movs	r2, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d1f1      	bne.n	800340a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2204      	movs	r2, #4
 800342c:	4013      	ands	r3, r2
 800342e:	d100      	bne.n	8003432 <HAL_RCC_OscConfig+0x2fe>
 8003430:	e0c6      	b.n	80035c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003432:	231f      	movs	r3, #31
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2238      	movs	r2, #56	; 0x38
 8003440:	4013      	ands	r3, r2
 8003442:	2b20      	cmp	r3, #32
 8003444:	d11e      	bne.n	8003484 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x32c>)
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	2202      	movs	r2, #2
 800344c:	4013      	ands	r3, r2
 800344e:	d100      	bne.n	8003452 <HAL_RCC_OscConfig+0x31e>
 8003450:	e0b6      	b.n	80035c0 <HAL_RCC_OscConfig+0x48c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d000      	beq.n	800345c <HAL_RCC_OscConfig+0x328>
 800345a:	e0b1      	b.n	80035c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e166      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
 8003460:	40021000 	.word	0x40021000
 8003464:	fffeffff 	.word	0xfffeffff
 8003468:	fffbffff 	.word	0xfffbffff
 800346c:	ffff80ff 	.word	0xffff80ff
 8003470:	ffffc7ff 	.word	0xffffc7ff
 8003474:	00f42400 	.word	0x00f42400
 8003478:	20000008 	.word	0x20000008
 800347c:	2000000c 	.word	0x2000000c
 8003480:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003484:	4bac      	ldr	r3, [pc, #688]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	055b      	lsls	r3, r3, #21
 800348c:	4013      	ands	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_RCC_OscConfig+0x360>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x362>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4ba7      	ldr	r3, [pc, #668]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800349c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800349e:	4ba6      	ldr	r3, [pc, #664]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	0549      	lsls	r1, r1, #21
 80034a4:	430a      	orrs	r2, r1
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80034a8:	4ba3      	ldr	r3, [pc, #652]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80034aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	055b      	lsls	r3, r3, #21
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80034b6:	231f      	movs	r3, #31
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034be:	4b9f      	ldr	r3, [pc, #636]	; (800373c <HAL_RCC_OscConfig+0x608>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4013      	ands	r3, r2
 80034c8:	d11a      	bne.n	8003500 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ca:	4b9c      	ldr	r3, [pc, #624]	; (800373c <HAL_RCC_OscConfig+0x608>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b9b      	ldr	r3, [pc, #620]	; (800373c <HAL_RCC_OscConfig+0x608>)
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	0049      	lsls	r1, r1, #1
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80034d8:	f7fd fb5e 	bl	8000b98 <HAL_GetTick>
 80034dc:	0003      	movs	r3, r0
 80034de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7fd fb59 	bl	8000b98 <HAL_GetTick>
 80034e6:	0002      	movs	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e11c      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f4:	4b91      	ldr	r3, [pc, #580]	; (800373c <HAL_RCC_OscConfig+0x608>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4013      	ands	r3, r2
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x3e2>
 8003508:	4b8b      	ldr	r3, [pc, #556]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800350a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800350c:	4b8a      	ldr	r3, [pc, #552]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800350e:	2101      	movs	r1, #1
 8003510:	430a      	orrs	r2, r1
 8003512:	65da      	str	r2, [r3, #92]	; 0x5c
 8003514:	e01c      	b.n	8003550 <HAL_RCC_OscConfig+0x41c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b05      	cmp	r3, #5
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x404>
 800351e:	4b86      	ldr	r3, [pc, #536]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003522:	4b85      	ldr	r3, [pc, #532]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003524:	2104      	movs	r1, #4
 8003526:	430a      	orrs	r2, r1
 8003528:	65da      	str	r2, [r3, #92]	; 0x5c
 800352a:	4b83      	ldr	r3, [pc, #524]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800352c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800352e:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003530:	2101      	movs	r1, #1
 8003532:	430a      	orrs	r2, r1
 8003534:	65da      	str	r2, [r3, #92]	; 0x5c
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0x41c>
 8003538:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800353a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800353c:	4b7e      	ldr	r3, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800353e:	2101      	movs	r1, #1
 8003540:	438a      	bics	r2, r1
 8003542:	65da      	str	r2, [r3, #92]	; 0x5c
 8003544:	4b7c      	ldr	r3, [pc, #496]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003546:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003548:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800354a:	2104      	movs	r1, #4
 800354c:	438a      	bics	r2, r1
 800354e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d014      	beq.n	8003582 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fd fb1e 	bl	8000b98 <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003560:	e009      	b.n	8003576 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fd fb19 	bl	8000b98 <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	4a74      	ldr	r2, [pc, #464]	; (8003740 <HAL_RCC_OscConfig+0x60c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0db      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003576:	4b70      	ldr	r3, [pc, #448]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	2202      	movs	r2, #2
 800357c:	4013      	ands	r3, r2
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x42e>
 8003580:	e013      	b.n	80035aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd fb09 	bl	8000b98 <HAL_GetTick>
 8003586:	0003      	movs	r3, r0
 8003588:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800358a:	e009      	b.n	80035a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fd fb04 	bl	8000b98 <HAL_GetTick>
 8003590:	0002      	movs	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	4a6a      	ldr	r2, [pc, #424]	; (8003740 <HAL_RCC_OscConfig+0x60c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0c6      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a0:	4b65      	ldr	r3, [pc, #404]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	2202      	movs	r2, #2
 80035a6:	4013      	ands	r3, r2
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80035aa:	231f      	movs	r3, #31
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b60      	ldr	r3, [pc, #384]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80035b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b8:	4b5f      	ldr	r3, [pc, #380]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80035ba:	4962      	ldr	r1, [pc, #392]	; (8003744 <HAL_RCC_OscConfig+0x610>)
 80035bc:	400a      	ands	r2, r1
 80035be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d100      	bne.n	80035ca <HAL_RCC_OscConfig+0x496>
 80035c8:	e0b0      	b.n	800372c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ca:	4b5b      	ldr	r3, [pc, #364]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2238      	movs	r2, #56	; 0x38
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d100      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4a4>
 80035d6:	e078      	b.n	80036ca <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d153      	bne.n	8003688 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e0:	4b55      	ldr	r3, [pc, #340]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b54      	ldr	r3, [pc, #336]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80035e6:	4958      	ldr	r1, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x614>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fd fad4 	bl	8000b98 <HAL_GetTick>
 80035f0:	0003      	movs	r3, r0
 80035f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fd facf 	bl	8000b98 <HAL_GetTick>
 80035fa:	0002      	movs	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e092      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	4b4b      	ldr	r3, [pc, #300]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	049b      	lsls	r3, r3, #18
 8003610:	4013      	ands	r3, r2
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003614:	4b48      	ldr	r3, [pc, #288]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4a4c      	ldr	r2, [pc, #304]	; (800374c <HAL_RCC_OscConfig+0x618>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	431a      	orrs	r2, r3
 800363c:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800363e:	430a      	orrs	r2, r1
 8003640:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003642:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	0449      	lsls	r1, r1, #17
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	4b38      	ldr	r3, [pc, #224]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	0549      	lsls	r1, r1, #21
 800365a:	430a      	orrs	r2, r1
 800365c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd fa9b 	bl	8000b98 <HAL_GetTick>
 8003662:	0003      	movs	r3, r0
 8003664:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd fa96 	bl	8000b98 <HAL_GetTick>
 800366c:	0002      	movs	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e059      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	4b2f      	ldr	r3, [pc, #188]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	049b      	lsls	r3, r3, #18
 8003682:	4013      	ands	r3, r2
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x534>
 8003686:	e051      	b.n	800372c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 800368e:	492e      	ldr	r1, [pc, #184]	; (8003748 <HAL_RCC_OscConfig+0x614>)
 8003690:	400a      	ands	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fd fa80 	bl	8000b98 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fd fa7b 	bl	8000b98 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e03e      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	049b      	lsls	r3, r3, #18
 80036b8:	4013      	ands	r3, r2
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80036bc:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80036c2:	4923      	ldr	r1, [pc, #140]	; (8003750 <HAL_RCC_OscConfig+0x61c>)
 80036c4:	400a      	ands	r2, r1
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e030      	b.n	800372c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e02b      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <HAL_RCC_OscConfig+0x604>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2203      	movs	r2, #3
 80036e0:	401a      	ands	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d11e      	bne.n	8003728 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2270      	movs	r2, #112	; 0x70
 80036ee:	401a      	ands	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d117      	bne.n	8003728 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	23fe      	movs	r3, #254	; 0xfe
 80036fc:	01db      	lsls	r3, r3, #7
 80036fe:	401a      	ands	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d10e      	bne.n	8003728 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	23f8      	movs	r3, #248	; 0xf8
 800370e:	039b      	lsls	r3, r3, #14
 8003710:	401a      	ands	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d106      	bne.n	8003728 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	0f5b      	lsrs	r3, r3, #29
 800371e:	075a      	lsls	r2, r3, #29
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	0018      	movs	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	b008      	add	sp, #32
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
 8003740:	00001388 	.word	0x00001388
 8003744:	efffffff 	.word	0xefffffff
 8003748:	feffffff 	.word	0xfeffffff
 800374c:	1fc1808c 	.word	0x1fc1808c
 8003750:	effefffc 	.word	0xeffefffc

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0e9      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2207      	movs	r2, #7
 800376e:	4013      	ands	r3, r2
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d91e      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b73      	ldr	r3, [pc, #460]	; (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2207      	movs	r2, #7
 800377c:	4393      	bics	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003788:	f7fd fa06 	bl	8000b98 <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003790:	e009      	b.n	80037a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003792:	f7fd fa01 	bl	8000b98 <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	4a6a      	ldr	r2, [pc, #424]	; (8003948 <HAL_RCC_ClockConfig+0x1f4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0ca      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037a6:	4b67      	ldr	r3, [pc, #412]	; (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2207      	movs	r2, #7
 80037ac:	4013      	ands	r3, r2
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1ee      	bne.n	8003792 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	d015      	beq.n	80037ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2204      	movs	r2, #4
 80037c4:	4013      	ands	r3, r2
 80037c6:	d006      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037c8:	4b60      	ldr	r3, [pc, #384]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4b5f      	ldr	r3, [pc, #380]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 80037ce:	21e0      	movs	r1, #224	; 0xe0
 80037d0:	01c9      	lsls	r1, r1, #7
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d6:	4b5d      	ldr	r3, [pc, #372]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4a5d      	ldr	r2, [pc, #372]	; (8003950 <HAL_RCC_ClockConfig+0x1fc>)
 80037dc:	4013      	ands	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	4013      	ands	r3, r2
 80037f2:	d057      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	4013      	ands	r3, r2
 8003806:	d12b      	bne.n	8003860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e097      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d107      	bne.n	8003824 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003814:	4b4d      	ldr	r3, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	049b      	lsls	r3, r3, #18
 800381c:	4013      	ands	r3, r2
 800381e:	d11f      	bne.n	8003860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e08b      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800382c:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4013      	ands	r3, r2
 8003836:	d113      	bne.n	8003860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e07f      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d106      	bne.n	8003852 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003844:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003848:	2202      	movs	r2, #2
 800384a:	4013      	ands	r3, r2
 800384c:	d108      	bne.n	8003860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e074      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	2202      	movs	r2, #2
 8003858:	4013      	ands	r3, r2
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e06d      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2207      	movs	r2, #7
 8003866:	4393      	bics	r3, r2
 8003868:	0019      	movs	r1, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003874:	f7fd f990 	bl	8000b98 <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387c:	e009      	b.n	8003892 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387e:	f7fd f98b 	bl	8000b98 <HAL_GetTick>
 8003882:	0002      	movs	r2, r0
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	4a2f      	ldr	r2, [pc, #188]	; (8003948 <HAL_RCC_ClockConfig+0x1f4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e054      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	4b2e      	ldr	r3, [pc, #184]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2238      	movs	r2, #56	; 0x38
 8003898:	401a      	ands	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1ec      	bne.n	800387e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a4:	4b27      	ldr	r3, [pc, #156]	; (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2207      	movs	r2, #7
 80038aa:	4013      	ands	r3, r2
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d21e      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2207      	movs	r2, #7
 80038b8:	4393      	bics	r3, r2
 80038ba:	0019      	movs	r1, r3
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038c4:	f7fd f968 	bl	8000b98 <HAL_GetTick>
 80038c8:	0003      	movs	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038cc:	e009      	b.n	80038e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ce:	f7fd f963 	bl	8000b98 <HAL_GetTick>
 80038d2:	0002      	movs	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_RCC_ClockConfig+0x1f4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e02c      	b.n	800393c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038e2:	4b18      	ldr	r3, [pc, #96]	; (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2207      	movs	r2, #7
 80038e8:	4013      	ands	r3, r2
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1ee      	bne.n	80038ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2204      	movs	r2, #4
 80038f6:	4013      	ands	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038fa:	4b14      	ldr	r3, [pc, #80]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4a15      	ldr	r2, [pc, #84]	; (8003954 <HAL_RCC_ClockConfig+0x200>)
 8003900:	4013      	ands	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 800390a:	430a      	orrs	r2, r1
 800390c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800390e:	f000 f829 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003912:	0001      	movs	r1, r0
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	220f      	movs	r2, #15
 800391c:	401a      	ands	r2, r3
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_RCC_ClockConfig+0x204>)
 8003920:	0092      	lsls	r2, r2, #2
 8003922:	58d3      	ldr	r3, [r2, r3]
 8003924:	221f      	movs	r2, #31
 8003926:	4013      	ands	r3, r2
 8003928:	000a      	movs	r2, r1
 800392a:	40da      	lsrs	r2, r3
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_ClockConfig+0x208>)
 800392e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_ClockConfig+0x20c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	0018      	movs	r0, r3
 8003936:	f7fd f8d3 	bl	8000ae0 <HAL_InitTick>
 800393a:	0003      	movs	r3, r0
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40022000 	.word	0x40022000
 8003948:	00001388 	.word	0x00001388
 800394c:	40021000 	.word	0x40021000
 8003950:	fffff0ff 	.word	0xfffff0ff
 8003954:	ffff8fff 	.word	0xffff8fff
 8003958:	08004598 	.word	0x08004598
 800395c:	20000008 	.word	0x20000008
 8003960:	2000000c 	.word	0x2000000c

08003964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800396a:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2238      	movs	r2, #56	; 0x38
 8003970:	4013      	ands	r3, r2
 8003972:	d10f      	bne.n	8003994 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003974:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0adb      	lsrs	r3, r3, #11
 800397a:	2207      	movs	r2, #7
 800397c:	4013      	ands	r3, r2
 800397e:	2201      	movs	r2, #1
 8003980:	409a      	lsls	r2, r3
 8003982:	0013      	movs	r3, r2
 8003984:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003986:	6839      	ldr	r1, [r7, #0]
 8003988:	4835      	ldr	r0, [pc, #212]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xfc>)
 800398a:	f7fc fbb9 	bl	8000100 <__udivsi3>
 800398e:	0003      	movs	r3, r0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	e05d      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003994:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2238      	movs	r2, #56	; 0x38
 800399a:	4013      	ands	r3, r2
 800399c:	2b08      	cmp	r3, #8
 800399e:	d102      	bne.n	80039a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x100>)
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	e054      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2238      	movs	r2, #56	; 0x38
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d138      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2203      	movs	r2, #3
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	2207      	movs	r2, #7
 80039c4:	4013      	ands	r3, r2
 80039c6:	3301      	adds	r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d10d      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	4824      	ldr	r0, [pc, #144]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x100>)
 80039d4:	f7fc fb94 	bl	8000100 <__udivsi3>
 80039d8:	0003      	movs	r3, r0
 80039da:	0019      	movs	r1, r3
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	227f      	movs	r2, #127	; 0x7f
 80039e4:	4013      	ands	r3, r2
 80039e6:	434b      	muls	r3, r1
 80039e8:	617b      	str	r3, [r7, #20]
        break;
 80039ea:	e00d      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	481c      	ldr	r0, [pc, #112]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xfc>)
 80039f0:	f7fc fb86 	bl	8000100 <__udivsi3>
 80039f4:	0003      	movs	r3, r0
 80039f6:	0019      	movs	r1, r3
 80039f8:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	227f      	movs	r2, #127	; 0x7f
 8003a00:	4013      	ands	r3, r2
 8003a02:	434b      	muls	r3, r1
 8003a04:	617b      	str	r3, [r7, #20]
        break;
 8003a06:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0f5b      	lsrs	r3, r3, #29
 8003a0e:	2207      	movs	r2, #7
 8003a10:	4013      	ands	r3, r2
 8003a12:	3301      	adds	r3, #1
 8003a14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f7fc fb71 	bl	8000100 <__udivsi3>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e015      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2238      	movs	r2, #56	; 0x38
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d103      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a38:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2238      	movs	r2, #56	; 0x38
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b18      	cmp	r3, #24
 8003a42:	d103      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a44:	23fa      	movs	r3, #250	; 0xfa
 8003a46:	01db      	lsls	r3, r3, #7
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	e001      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a50:	693b      	ldr	r3, [r7, #16]
}
 8003a52:	0018      	movs	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b006      	add	sp, #24
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	007a1200 	.word	0x007a1200

08003a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a70:	2313      	movs	r3, #19
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a78:	2312      	movs	r3, #18
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	029b      	lsls	r3, r3, #10
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d100      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a8c:	e0a3      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	2011      	movs	r0, #17
 8003a90:	183b      	adds	r3, r7, r0
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a96:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	055b      	lsls	r3, r3, #21
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d110      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	4b7c      	ldr	r3, [pc, #496]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aa6:	4b7b      	ldr	r3, [pc, #492]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	0549      	lsls	r1, r1, #21
 8003aac:	430a      	orrs	r2, r1
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ab0:	4b78      	ldr	r3, [pc, #480]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	055b      	lsls	r3, r3, #21
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac4:	4b74      	ldr	r3, [pc, #464]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	0049      	lsls	r1, r1, #1
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ad2:	f7fd f861 	bl	8000b98 <HAL_GetTick>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ada:	e00b      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7fd f85c 	bl	8000b98 <HAL_GetTick>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d904      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003aea:	2313      	movs	r3, #19
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	2203      	movs	r2, #3
 8003af0:	701a      	strb	r2, [r3, #0]
        break;
 8003af2:	e005      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af4:	4b68      	ldr	r3, [pc, #416]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4013      	ands	r3, r2
 8003afe:	d0ed      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003b00:	2313      	movs	r3, #19
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d154      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b0a:	4b62      	ldr	r3, [pc, #392]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b0e:	23c0      	movs	r3, #192	; 0xc0
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4013      	ands	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d019      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d014      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b26:	4b5b      	ldr	r3, [pc, #364]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	4a5c      	ldr	r2, [pc, #368]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b30:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b34:	4b57      	ldr	r3, [pc, #348]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0249      	lsls	r1, r1, #9
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3e:	4b55      	ldr	r3, [pc, #340]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b42:	4b54      	ldr	r3, [pc, #336]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b44:	4956      	ldr	r1, [pc, #344]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b4a:	4b52      	ldr	r3, [pc, #328]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2201      	movs	r2, #1
 8003b54:	4013      	ands	r3, r2
 8003b56:	d016      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd f81e 	bl	8000b98 <HAL_GetTick>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b60:	e00c      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fd f819 	bl	8000b98 <HAL_GetTick>
 8003b66:	0002      	movs	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	4a4d      	ldr	r2, [pc, #308]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d904      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003b72:	2313      	movs	r3, #19
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2203      	movs	r2, #3
 8003b78:	701a      	strb	r2, [r3, #0]
            break;
 8003b7a:	e004      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7c:	4b45      	ldr	r3, [pc, #276]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	2202      	movs	r2, #2
 8003b82:	4013      	ands	r3, r2
 8003b84:	d0ed      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b86:	2313      	movs	r3, #19
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b90:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	4a41      	ldr	r2, [pc, #260]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ba4:	e00c      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ba6:	2312      	movs	r3, #18
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	2213      	movs	r2, #19
 8003bac:	18ba      	adds	r2, r7, r2
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	e005      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	2312      	movs	r3, #18
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	2213      	movs	r2, #19
 8003bba:	18ba      	adds	r2, r7, r2
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bc0:	2311      	movs	r3, #17
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bca:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bd0:	4935      	ldr	r1, [pc, #212]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d009      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be0:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	2203      	movs	r2, #3
 8003be6:	4393      	bics	r3, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfe:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	4a2a      	ldr	r2, [pc, #168]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	01db      	lsls	r3, r3, #7
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d015      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	0899      	lsrs	r1, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	05db      	lsls	r3, r3, #23
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c3c:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	0249      	lsls	r1, r1, #9
 8003c46:	430a      	orrs	r2, r1
 8003c48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	4013      	ands	r3, r2
 8003c54:	d016      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c66:	430a      	orrs	r2, r1
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	01db      	lsls	r3, r3, #7
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d106      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	0249      	lsls	r1, r1, #9
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c84:	2312      	movs	r3, #18
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b006      	add	sp, #24
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	fffffcff 	.word	0xfffffcff
 8003ca0:	fffeffff 	.word	0xfffeffff
 8003ca4:	00001388 	.word	0x00001388
 8003ca8:	efffffff 	.word	0xefffffff
 8003cac:	ffffcfff 	.word	0xffffcfff
 8003cb0:	ffff3fff 	.word	0xffff3fff

08003cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0a8      	b.n	8003e18 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	2382      	movs	r3, #130	; 0x82
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d009      	beq.n	8003cee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	61da      	str	r2, [r3, #28]
 8003ce0:	e005      	b.n	8003cee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	225d      	movs	r2, #93	; 0x5d
 8003cf8:	5c9b      	ldrb	r3, [r3, r2]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	225c      	movs	r2, #92	; 0x5c
 8003d04:	2100      	movs	r1, #0
 8003d06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f7fc fdda 	bl	80008c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	225d      	movs	r2, #93	; 0x5d
 8003d14:	2102      	movs	r1, #2
 8003d16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2140      	movs	r1, #64	; 0x40
 8003d24:	438a      	bics	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	23e0      	movs	r3, #224	; 0xe0
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d902      	bls.n	8003d3a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e002      	b.n	8003d40 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	015b      	lsls	r3, r3, #5
 8003d3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	23f0      	movs	r3, #240	; 0xf0
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d008      	beq.n	8003d5e <HAL_SPI_Init+0xaa>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	23e0      	movs	r3, #224	; 0xe0
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d002      	beq.n	8003d5e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	2382      	movs	r3, #130	; 0x82
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	401a      	ands	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6899      	ldr	r1, [r3, #8]
 8003d6c:	2384      	movs	r3, #132	; 0x84
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	400b      	ands	r3, r1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2102      	movs	r1, #2
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2101      	movs	r1, #1
 8003d84:	400b      	ands	r3, r1
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6999      	ldr	r1, [r3, #24]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	400b      	ands	r3, r1
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2138      	movs	r1, #56	; 0x38
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	400b      	ands	r3, r1
 8003da6:	431a      	orrs	r2, r3
 8003da8:	0011      	movs	r1, r2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	401a      	ands	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	2110      	movs	r1, #16
 8003dcc:	400b      	ands	r3, r1
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	2108      	movs	r1, #8
 8003dd6:	400b      	ands	r3, r1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68d9      	ldr	r1, [r3, #12]
 8003dde:	23f0      	movs	r3, #240	; 0xf0
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	400b      	ands	r3, r1
 8003de4:	431a      	orrs	r2, r3
 8003de6:	0011      	movs	r1, r2
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	015b      	lsls	r3, r3, #5
 8003dee:	401a      	ands	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4907      	ldr	r1, [pc, #28]	; (8003e20 <HAL_SPI_Init+0x16c>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	225d      	movs	r2, #93	; 0x5d
 8003e12:	2101      	movs	r1, #1
 8003e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	fffff7ff 	.word	0xfffff7ff

08003e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e04a      	b.n	8003ecc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	223d      	movs	r2, #61	; 0x3d
 8003e3a:	5c9b      	ldrb	r3, [r3, r2]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	223c      	movs	r2, #60	; 0x3c
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7fc fda7 	bl	80009a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	223d      	movs	r2, #61	; 0x3d
 8003e56:	2102      	movs	r1, #2
 8003e58:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	0019      	movs	r1, r3
 8003e64:	0010      	movs	r0, r2
 8003e66:	f000 f97f 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2248      	movs	r2, #72	; 0x48
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	223e      	movs	r2, #62	; 0x3e
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	223f      	movs	r2, #63	; 0x3f
 8003e7e:	2101      	movs	r1, #1
 8003e80:	5499      	strb	r1, [r3, r2]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2240      	movs	r2, #64	; 0x40
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2241      	movs	r2, #65	; 0x41
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2242      	movs	r2, #66	; 0x42
 8003e96:	2101      	movs	r1, #1
 8003e98:	5499      	strb	r1, [r3, r2]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2243      	movs	r2, #67	; 0x43
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2244      	movs	r2, #68	; 0x44
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2245      	movs	r2, #69	; 0x45
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2246      	movs	r2, #70	; 0x46
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2247      	movs	r2, #71	; 0x47
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	223d      	movs	r2, #61	; 0x3d
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	223d      	movs	r2, #61	; 0x3d
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d001      	beq.n	8003eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e02f      	b.n	8003f4c <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	223d      	movs	r2, #61	; 0x3d
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <HAL_TIM_Base_Start+0x80>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_TIM_Base_Start+0x34>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_TIM_Base_Start+0x84>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d116      	bne.n	8003f36 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <HAL_TIM_Base_Start+0x88>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d016      	beq.n	8003f48 <HAL_TIM_Base_Start+0x74>
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	025b      	lsls	r3, r3, #9
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d011      	beq.n	8003f48 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2101      	movs	r1, #1
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f34:	e008      	b.n	8003f48 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	430a      	orrs	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e000      	b.n	8003f4a <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f48:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b004      	add	sp, #16
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	00010007 	.word	0x00010007

08003f60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e04a      	b.n	8004008 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	223d      	movs	r2, #61	; 0x3d
 8003f76:	5c9b      	ldrb	r3, [r3, r2]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223c      	movs	r2, #60	; 0x3c
 8003f82:	2100      	movs	r1, #0
 8003f84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 f841 	bl	8004010 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	223d      	movs	r2, #61	; 0x3d
 8003f92:	2102      	movs	r1, #2
 8003f94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	0010      	movs	r0, r2
 8003fa2:	f000 f8e1 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2248      	movs	r2, #72	; 0x48
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	223e      	movs	r2, #62	; 0x3e
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	223f      	movs	r2, #63	; 0x3f
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2240      	movs	r2, #64	; 0x40
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	5499      	strb	r1, [r3, r2]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2241      	movs	r2, #65	; 0x41
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2242      	movs	r2, #66	; 0x42
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2243      	movs	r2, #67	; 0x43
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2244      	movs	r2, #68	; 0x44
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2245      	movs	r2, #69	; 0x45
 8003fea:	2101      	movs	r1, #1
 8003fec:	5499      	strb	r1, [r3, r2]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2246      	movs	r2, #70	; 0x46
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5499      	strb	r1, [r3, r2]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2247      	movs	r2, #71	; 0x47
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	223d      	movs	r2, #61	; 0x3d
 8004002:	2101      	movs	r1, #1
 8004004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2317      	movs	r3, #23
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	223c      	movs	r2, #60	; 0x3c
 8004038:	5c9b      	ldrb	r3, [r3, r2]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_TIM_IC_ConfigChannel+0x22>
 800403e:	2302      	movs	r3, #2
 8004040:	e08c      	b.n	800415c <HAL_TIM_IC_ConfigChannel+0x13c>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	223c      	movs	r2, #60	; 0x3c
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f000 f8ee 	bl	8004240 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	210c      	movs	r1, #12
 8004070:	438a      	bics	r2, r1
 8004072:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6999      	ldr	r1, [r3, #24]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	619a      	str	r2, [r3, #24]
 8004086:	e062      	b.n	800414e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b04      	cmp	r3, #4
 800408c:	d11c      	bne.n	80040c8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f000 f921 	bl	80042e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	492d      	ldr	r1, [pc, #180]	; (8004164 <HAL_TIM_IC_ConfigChannel+0x144>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6999      	ldr	r1, [r3, #24]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	021a      	lsls	r2, r3, #8
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	619a      	str	r2, [r3, #24]
 80040c6:	e042      	b.n	800414e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d11b      	bne.n	8004106 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	6819      	ldr	r1, [r3, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f000 f943 	bl	8004368 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	210c      	movs	r1, #12
 80040ee:	438a      	bics	r2, r1
 80040f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	61da      	str	r2, [r3, #28]
 8004104:	e023      	b.n	800414e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d11c      	bne.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f000 f964 	bl	80043e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	490e      	ldr	r1, [pc, #56]	; (8004164 <HAL_TIM_IC_ConfigChannel+0x144>)
 800412c:	400a      	ands	r2, r1
 800412e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69d9      	ldr	r1, [r3, #28]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	021a      	lsls	r2, r3, #8
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	61da      	str	r2, [r3, #28]
 8004144:	e003      	b.n	800414e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004146:	2317      	movs	r3, #23
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	223c      	movs	r2, #60	; 0x3c
 8004152:	2100      	movs	r1, #0
 8004154:	5499      	strb	r1, [r3, r2]

  return status;
 8004156:	2317      	movs	r3, #23
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	781b      	ldrb	r3, [r3, #0]
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b006      	add	sp, #24
 8004162:	bd80      	pop	{r7, pc}
 8004164:	fffff3ff 	.word	0xfffff3ff

08004168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a2b      	ldr	r2, [pc, #172]	; (8004228 <TIM_Base_SetConfig+0xc0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_Base_SetConfig+0x20>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a2a      	ldr	r2, [pc, #168]	; (800422c <TIM_Base_SetConfig+0xc4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2270      	movs	r2, #112	; 0x70
 800418c:	4393      	bics	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a22      	ldr	r2, [pc, #136]	; (8004228 <TIM_Base_SetConfig+0xc0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00f      	beq.n	80041c2 <TIM_Base_SetConfig+0x5a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a21      	ldr	r2, [pc, #132]	; (800422c <TIM_Base_SetConfig+0xc4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <TIM_Base_SetConfig+0x5a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a20      	ldr	r2, [pc, #128]	; (8004230 <TIM_Base_SetConfig+0xc8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <TIM_Base_SetConfig+0x5a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <TIM_Base_SetConfig+0xcc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_Base_SetConfig+0x5a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <TIM_Base_SetConfig+0xd0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	; (800423c <TIM_Base_SetConfig+0xd4>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	4393      	bics	r3, r2
 80041da:	001a      	movs	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <TIM_Base_SetConfig+0xc0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <TIM_Base_SetConfig+0xaa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <TIM_Base_SetConfig+0xcc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_Base_SetConfig+0xaa>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <TIM_Base_SetConfig+0xd0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d103      	bne.n	800421a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	615a      	str	r2, [r3, #20]
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b004      	add	sp, #16
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40000400 	.word	0x40000400
 8004230:	40002000 	.word	0x40002000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	fffffcff 	.word	0xfffffcff

08004240 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	2201      	movs	r2, #1
 8004254:	4393      	bics	r3, r2
 8004256:	001a      	movs	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <TIM_TI1_SetConfig+0x9c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_TI1_SetConfig+0x38>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <TIM_TI1_SetConfig+0xa0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d101      	bne.n	800427c <TIM_TI1_SetConfig+0x3c>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <TIM_TI1_SetConfig+0x3e>
 800427c:	2300      	movs	r3, #0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2203      	movs	r2, #3
 8004286:	4393      	bics	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	e003      	b.n	800429c <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2201      	movs	r2, #1
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	22f0      	movs	r2, #240	; 0xf0
 80042a0:	4393      	bics	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	22ff      	movs	r2, #255	; 0xff
 80042aa:	4013      	ands	r3, r2
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	220a      	movs	r2, #10
 80042b6:	4393      	bics	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	220a      	movs	r2, #10
 80042be:	4013      	ands	r3, r2
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b006      	add	sp, #24
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400

080042e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	2210      	movs	r2, #16
 80042f8:	4393      	bics	r3, r2
 80042fa:	001a      	movs	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	4a14      	ldr	r2, [pc, #80]	; (8004360 <TIM_TI2_SetConfig+0x7c>)
 8004310:	4013      	ands	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4a10      	ldr	r2, [pc, #64]	; (8004364 <TIM_TI2_SetConfig+0x80>)
 8004322:	4013      	ands	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	031b      	lsls	r3, r3, #12
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	22a0      	movs	r2, #160	; 0xa0
 8004338:	4393      	bics	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	22a0      	movs	r2, #160	; 0xa0
 8004342:	4013      	ands	r3, r2
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b006      	add	sp, #24
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	fffffcff 	.word	0xfffffcff
 8004364:	ffff0fff 	.word	0xffff0fff

08004368 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <TIM_TI3_SetConfig+0x78>)
 800437c:	401a      	ands	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2203      	movs	r2, #3
 8004392:	4393      	bics	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	22f0      	movs	r2, #240	; 0xf0
 80043a2:	4393      	bics	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	22ff      	movs	r2, #255	; 0xff
 80043ac:	4013      	ands	r3, r2
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <TIM_TI3_SetConfig+0x7c>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	021a      	lsls	r2, r3, #8
 80043c0:	23a0      	movs	r3, #160	; 0xa0
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4013      	ands	r3, r2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	46c0      	nop			; (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b006      	add	sp, #24
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	fffffeff 	.word	0xfffffeff
 80043e4:	fffff5ff 	.word	0xfffff5ff

080043e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <TIM_TI4_SetConfig+0x7c>)
 80043fc:	401a      	ands	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <TIM_TI4_SetConfig+0x80>)
 8004412:	4013      	ands	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <TIM_TI4_SetConfig+0x84>)
 8004424:	4013      	ands	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	031b      	lsls	r3, r3, #12
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	0c1b      	lsrs	r3, r3, #16
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <TIM_TI4_SetConfig+0x88>)
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	031a      	lsls	r2, r3, #12
 8004442:	23a0      	movs	r3, #160	; 0xa0
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	4013      	ands	r3, r2
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	46bd      	mov	sp, r7
 800445e:	b006      	add	sp, #24
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	ffffefff 	.word	0xffffefff
 8004468:	fffffcff 	.word	0xfffffcff
 800446c:	ffff0fff 	.word	0xffff0fff
 8004470:	ffff5fff 	.word	0xffff5fff

08004474 <HAL_TIMEx_TISelection>:
  *  (**) Value not defined in all devices. \n
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004480:	2317      	movs	r3, #23
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	223c      	movs	r2, #60	; 0x3c
 800448c:	5c9b      	ldrb	r3, [r3, r2]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_TIMEx_TISelection+0x22>
 8004492:	2302      	movs	r3, #2
 8004494:	e040      	b.n	8004518 <HAL_TIMEx_TISelection+0xa4>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	223c      	movs	r2, #60	; 0x3c
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d021      	beq.n	80044e8 <HAL_TIMEx_TISelection+0x74>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d82a      	bhi.n	8004500 <HAL_TIMEx_TISelection+0x8c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_TIMEx_TISelection+0x44>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d00c      	beq.n	80044d0 <HAL_TIMEx_TISelection+0x5c>
 80044b6:	e023      	b.n	8004500 <HAL_TIMEx_TISelection+0x8c>
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044be:	220f      	movs	r2, #15
 80044c0:	4393      	bics	r3, r2
 80044c2:	0019      	movs	r1, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80044ce:	e01c      	b.n	800450a <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <HAL_TIMEx_TISelection+0xac>)
 80044d8:	4013      	ands	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80044e6:	e010      	b.n	800450a <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ee:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <HAL_TIMEx_TISelection+0xb0>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80044fe:	e004      	b.n	800450a <HAL_TIMEx_TISelection+0x96>
    default:
      status = HAL_ERROR;
 8004500:	2317      	movs	r3, #23
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
      break;
 8004508:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	223c      	movs	r2, #60	; 0x3c
 800450e:	2100      	movs	r1, #0
 8004510:	5499      	strb	r1, [r3, r2]

  return status;
 8004512:	2317      	movs	r3, #23
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	781b      	ldrb	r3, [r3, #0]
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b006      	add	sp, #24
 800451e:	bd80      	pop	{r7, pc}
 8004520:	fffff0ff 	.word	0xfffff0ff
 8004524:	fff0ffff 	.word	0xfff0ffff

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	2600      	movs	r6, #0
 800452c:	4d0c      	ldr	r5, [pc, #48]	; (8004560 <__libc_init_array+0x38>)
 800452e:	4c0d      	ldr	r4, [pc, #52]	; (8004564 <__libc_init_array+0x3c>)
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	42a6      	cmp	r6, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	2600      	movs	r6, #0
 800453a:	f000 f821 	bl	8004580 <_init>
 800453e:	4d0a      	ldr	r5, [pc, #40]	; (8004568 <__libc_init_array+0x40>)
 8004540:	4c0a      	ldr	r4, [pc, #40]	; (800456c <__libc_init_array+0x44>)
 8004542:	1b64      	subs	r4, r4, r5
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	42a6      	cmp	r6, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	00b3      	lsls	r3, r6, #2
 800454e:	58eb      	ldr	r3, [r5, r3]
 8004550:	4798      	blx	r3
 8004552:	3601      	adds	r6, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	00b3      	lsls	r3, r6, #2
 8004558:	58eb      	ldr	r3, [r5, r3]
 800455a:	4798      	blx	r3
 800455c:	3601      	adds	r6, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	080045d8 	.word	0x080045d8
 8004564:	080045d8 	.word	0x080045d8
 8004568:	080045d8 	.word	0x080045d8
 800456c:	080045dc 	.word	0x080045dc

08004570 <memset>:
 8004570:	0003      	movs	r3, r0
 8004572:	1882      	adds	r2, r0, r2
 8004574:	4293      	cmp	r3, r2
 8004576:	d100      	bne.n	800457a <memset+0xa>
 8004578:	4770      	bx	lr
 800457a:	7019      	strb	r1, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	e7f9      	b.n	8004574 <memset+0x4>

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
