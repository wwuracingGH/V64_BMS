
v64_BMS_Segment_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a18  08004a18  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a18  08004a18  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a18  08004a18  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000001c  08004a3c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004a3c  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e583  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002092  00000000  00000000  0002e5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00030660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  000314e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159b2  00000000  00000000  00032268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010016  00000000  00000000  00047c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4da  00000000  00000000  00057c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e410a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000361c  00000000  00000000  000e415c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000001c 	.word	0x2000001c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004940 	.word	0x08004940

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000020 	.word	0x20000020
 80000fc:	08004940 	.word	0x08004940

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f89f 	bl	8000364 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f82b 	bl	800028c <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f891 	bl	8000364 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f887 	bl	8000364 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f837 	bl	80002d8 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f82d 	bl	80002d8 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__eqsf2>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	0042      	lsls	r2, r0, #1
 8000290:	0245      	lsls	r5, r0, #9
 8000292:	024e      	lsls	r6, r1, #9
 8000294:	004c      	lsls	r4, r1, #1
 8000296:	0fc3      	lsrs	r3, r0, #31
 8000298:	0a6d      	lsrs	r5, r5, #9
 800029a:	2001      	movs	r0, #1
 800029c:	0e12      	lsrs	r2, r2, #24
 800029e:	0a76      	lsrs	r6, r6, #9
 80002a0:	0e24      	lsrs	r4, r4, #24
 80002a2:	0fc9      	lsrs	r1, r1, #31
 80002a4:	2aff      	cmp	r2, #255	; 0xff
 80002a6:	d006      	beq.n	80002b6 <__eqsf2+0x2a>
 80002a8:	2cff      	cmp	r4, #255	; 0xff
 80002aa:	d003      	beq.n	80002b4 <__eqsf2+0x28>
 80002ac:	42a2      	cmp	r2, r4
 80002ae:	d101      	bne.n	80002b4 <__eqsf2+0x28>
 80002b0:	42b5      	cmp	r5, r6
 80002b2:	d006      	beq.n	80002c2 <__eqsf2+0x36>
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	d1fc      	bne.n	80002b4 <__eqsf2+0x28>
 80002ba:	2cff      	cmp	r4, #255	; 0xff
 80002bc:	d1fa      	bne.n	80002b4 <__eqsf2+0x28>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d1f8      	bne.n	80002b4 <__eqsf2+0x28>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d006      	beq.n	80002d4 <__eqsf2+0x48>
 80002c6:	2001      	movs	r0, #1
 80002c8:	2a00      	cmp	r2, #0
 80002ca:	d1f3      	bne.n	80002b4 <__eqsf2+0x28>
 80002cc:	0028      	movs	r0, r5
 80002ce:	1e43      	subs	r3, r0, #1
 80002d0:	4198      	sbcs	r0, r3
 80002d2:	e7ef      	b.n	80002b4 <__eqsf2+0x28>
 80002d4:	2000      	movs	r0, #0
 80002d6:	e7ed      	b.n	80002b4 <__eqsf2+0x28>

080002d8 <__gesf2>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	0042      	lsls	r2, r0, #1
 80002dc:	0245      	lsls	r5, r0, #9
 80002de:	024e      	lsls	r6, r1, #9
 80002e0:	004c      	lsls	r4, r1, #1
 80002e2:	0fc3      	lsrs	r3, r0, #31
 80002e4:	0a6d      	lsrs	r5, r5, #9
 80002e6:	0e12      	lsrs	r2, r2, #24
 80002e8:	0a76      	lsrs	r6, r6, #9
 80002ea:	0e24      	lsrs	r4, r4, #24
 80002ec:	0fc8      	lsrs	r0, r1, #31
 80002ee:	2aff      	cmp	r2, #255	; 0xff
 80002f0:	d01b      	beq.n	800032a <__gesf2+0x52>
 80002f2:	2cff      	cmp	r4, #255	; 0xff
 80002f4:	d00e      	beq.n	8000314 <__gesf2+0x3c>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d11b      	bne.n	8000332 <__gesf2+0x5a>
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	d101      	bne.n	8000302 <__gesf2+0x2a>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d01c      	beq.n	800033c <__gesf2+0x64>
 8000302:	2d00      	cmp	r5, #0
 8000304:	d00c      	beq.n	8000320 <__gesf2+0x48>
 8000306:	4283      	cmp	r3, r0
 8000308:	d01c      	beq.n	8000344 <__gesf2+0x6c>
 800030a:	2102      	movs	r1, #2
 800030c:	1e58      	subs	r0, r3, #1
 800030e:	4008      	ands	r0, r1
 8000310:	3801      	subs	r0, #1
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	2e00      	cmp	r6, #0
 8000316:	d122      	bne.n	800035e <__gesf2+0x86>
 8000318:	2a00      	cmp	r2, #0
 800031a:	d1f4      	bne.n	8000306 <__gesf2+0x2e>
 800031c:	2d00      	cmp	r5, #0
 800031e:	d1f2      	bne.n	8000306 <__gesf2+0x2e>
 8000320:	2800      	cmp	r0, #0
 8000322:	d1f6      	bne.n	8000312 <__gesf2+0x3a>
 8000324:	2001      	movs	r0, #1
 8000326:	4240      	negs	r0, r0
 8000328:	e7f3      	b.n	8000312 <__gesf2+0x3a>
 800032a:	2d00      	cmp	r5, #0
 800032c:	d117      	bne.n	800035e <__gesf2+0x86>
 800032e:	2cff      	cmp	r4, #255	; 0xff
 8000330:	d0f0      	beq.n	8000314 <__gesf2+0x3c>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d1e7      	bne.n	8000306 <__gesf2+0x2e>
 8000336:	2e00      	cmp	r6, #0
 8000338:	d1e5      	bne.n	8000306 <__gesf2+0x2e>
 800033a:	e7e6      	b.n	800030a <__gesf2+0x32>
 800033c:	2000      	movs	r0, #0
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e7      	beq.n	8000312 <__gesf2+0x3a>
 8000342:	e7e2      	b.n	800030a <__gesf2+0x32>
 8000344:	42a2      	cmp	r2, r4
 8000346:	dc05      	bgt.n	8000354 <__gesf2+0x7c>
 8000348:	dbea      	blt.n	8000320 <__gesf2+0x48>
 800034a:	42b5      	cmp	r5, r6
 800034c:	d802      	bhi.n	8000354 <__gesf2+0x7c>
 800034e:	d3e7      	bcc.n	8000320 <__gesf2+0x48>
 8000350:	2000      	movs	r0, #0
 8000352:	e7de      	b.n	8000312 <__gesf2+0x3a>
 8000354:	4243      	negs	r3, r0
 8000356:	4158      	adcs	r0, r3
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	3801      	subs	r0, #1
 800035c:	e7d9      	b.n	8000312 <__gesf2+0x3a>
 800035e:	2002      	movs	r0, #2
 8000360:	4240      	negs	r0, r0
 8000362:	e7d6      	b.n	8000312 <__gesf2+0x3a>

08000364 <__lesf2>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	0042      	lsls	r2, r0, #1
 8000368:	0245      	lsls	r5, r0, #9
 800036a:	024e      	lsls	r6, r1, #9
 800036c:	004c      	lsls	r4, r1, #1
 800036e:	0fc3      	lsrs	r3, r0, #31
 8000370:	0a6d      	lsrs	r5, r5, #9
 8000372:	0e12      	lsrs	r2, r2, #24
 8000374:	0a76      	lsrs	r6, r6, #9
 8000376:	0e24      	lsrs	r4, r4, #24
 8000378:	0fc8      	lsrs	r0, r1, #31
 800037a:	2aff      	cmp	r2, #255	; 0xff
 800037c:	d00b      	beq.n	8000396 <__lesf2+0x32>
 800037e:	2cff      	cmp	r4, #255	; 0xff
 8000380:	d00d      	beq.n	800039e <__lesf2+0x3a>
 8000382:	2a00      	cmp	r2, #0
 8000384:	d11f      	bne.n	80003c6 <__lesf2+0x62>
 8000386:	2c00      	cmp	r4, #0
 8000388:	d116      	bne.n	80003b8 <__lesf2+0x54>
 800038a:	2e00      	cmp	r6, #0
 800038c:	d114      	bne.n	80003b8 <__lesf2+0x54>
 800038e:	2000      	movs	r0, #0
 8000390:	2d00      	cmp	r5, #0
 8000392:	d010      	beq.n	80003b6 <__lesf2+0x52>
 8000394:	e009      	b.n	80003aa <__lesf2+0x46>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d10c      	bne.n	80003b4 <__lesf2+0x50>
 800039a:	2cff      	cmp	r4, #255	; 0xff
 800039c:	d113      	bne.n	80003c6 <__lesf2+0x62>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d108      	bne.n	80003b4 <__lesf2+0x50>
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d008      	beq.n	80003b8 <__lesf2+0x54>
 80003a6:	4283      	cmp	r3, r0
 80003a8:	d012      	beq.n	80003d0 <__lesf2+0x6c>
 80003aa:	2102      	movs	r1, #2
 80003ac:	1e58      	subs	r0, r3, #1
 80003ae:	4008      	ands	r0, r1
 80003b0:	3801      	subs	r0, #1
 80003b2:	e000      	b.n	80003b6 <__lesf2+0x52>
 80003b4:	2002      	movs	r0, #2
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d1f4      	bne.n	80003a6 <__lesf2+0x42>
 80003bc:	2800      	cmp	r0, #0
 80003be:	d1fa      	bne.n	80003b6 <__lesf2+0x52>
 80003c0:	2001      	movs	r0, #1
 80003c2:	4240      	negs	r0, r0
 80003c4:	e7f7      	b.n	80003b6 <__lesf2+0x52>
 80003c6:	2c00      	cmp	r4, #0
 80003c8:	d1ed      	bne.n	80003a6 <__lesf2+0x42>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d1eb      	bne.n	80003a6 <__lesf2+0x42>
 80003ce:	e7ec      	b.n	80003aa <__lesf2+0x46>
 80003d0:	42a2      	cmp	r2, r4
 80003d2:	dc05      	bgt.n	80003e0 <__lesf2+0x7c>
 80003d4:	dbf2      	blt.n	80003bc <__lesf2+0x58>
 80003d6:	42b5      	cmp	r5, r6
 80003d8:	d802      	bhi.n	80003e0 <__lesf2+0x7c>
 80003da:	d3ef      	bcc.n	80003bc <__lesf2+0x58>
 80003dc:	2000      	movs	r0, #0
 80003de:	e7ea      	b.n	80003b6 <__lesf2+0x52>
 80003e0:	4243      	negs	r3, r0
 80003e2:	4158      	adcs	r0, r3
 80003e4:	0040      	lsls	r0, r0, #1
 80003e6:	3801      	subs	r0, #1
 80003e8:	e7e5      	b.n	80003b6 <__lesf2+0x52>
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_ddiv>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	4657      	mov	r7, sl
 80003f0:	464e      	mov	r6, r9
 80003f2:	4645      	mov	r5, r8
 80003f4:	46de      	mov	lr, fp
 80003f6:	b5e0      	push	{r5, r6, r7, lr}
 80003f8:	4681      	mov	r9, r0
 80003fa:	0005      	movs	r5, r0
 80003fc:	030c      	lsls	r4, r1, #12
 80003fe:	0048      	lsls	r0, r1, #1
 8000400:	4692      	mov	sl, r2
 8000402:	001f      	movs	r7, r3
 8000404:	b085      	sub	sp, #20
 8000406:	0b24      	lsrs	r4, r4, #12
 8000408:	0d40      	lsrs	r0, r0, #21
 800040a:	0fce      	lsrs	r6, r1, #31
 800040c:	2800      	cmp	r0, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_ddiv+0x26>
 8000410:	e156      	b.n	80006c0 <__aeabi_ddiv+0x2d4>
 8000412:	4bd4      	ldr	r3, [pc, #848]	; (8000764 <__aeabi_ddiv+0x378>)
 8000414:	4298      	cmp	r0, r3
 8000416:	d100      	bne.n	800041a <__aeabi_ddiv+0x2e>
 8000418:	e172      	b.n	8000700 <__aeabi_ddiv+0x314>
 800041a:	0f6b      	lsrs	r3, r5, #29
 800041c:	00e4      	lsls	r4, r4, #3
 800041e:	431c      	orrs	r4, r3
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	041b      	lsls	r3, r3, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	4698      	mov	r8, r3
 8000428:	4bcf      	ldr	r3, [pc, #828]	; (8000768 <__aeabi_ddiv+0x37c>)
 800042a:	00ed      	lsls	r5, r5, #3
 800042c:	469b      	mov	fp, r3
 800042e:	2300      	movs	r3, #0
 8000430:	4699      	mov	r9, r3
 8000432:	4483      	add	fp, r0
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	033c      	lsls	r4, r7, #12
 8000438:	007b      	lsls	r3, r7, #1
 800043a:	4650      	mov	r0, sl
 800043c:	0b24      	lsrs	r4, r4, #12
 800043e:	0d5b      	lsrs	r3, r3, #21
 8000440:	0fff      	lsrs	r7, r7, #31
 8000442:	2b00      	cmp	r3, #0
 8000444:	d100      	bne.n	8000448 <__aeabi_ddiv+0x5c>
 8000446:	e11f      	b.n	8000688 <__aeabi_ddiv+0x29c>
 8000448:	4ac6      	ldr	r2, [pc, #792]	; (8000764 <__aeabi_ddiv+0x378>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d100      	bne.n	8000450 <__aeabi_ddiv+0x64>
 800044e:	e162      	b.n	8000716 <__aeabi_ddiv+0x32a>
 8000450:	49c5      	ldr	r1, [pc, #788]	; (8000768 <__aeabi_ddiv+0x37c>)
 8000452:	0f42      	lsrs	r2, r0, #29
 8000454:	468c      	mov	ip, r1
 8000456:	00e4      	lsls	r4, r4, #3
 8000458:	4659      	mov	r1, fp
 800045a:	4314      	orrs	r4, r2
 800045c:	2280      	movs	r2, #128	; 0x80
 800045e:	4463      	add	r3, ip
 8000460:	0412      	lsls	r2, r2, #16
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	4314      	orrs	r4, r2
 8000466:	469b      	mov	fp, r3
 8000468:	00c2      	lsls	r2, r0, #3
 800046a:	2000      	movs	r0, #0
 800046c:	0033      	movs	r3, r6
 800046e:	407b      	eors	r3, r7
 8000470:	469a      	mov	sl, r3
 8000472:	464b      	mov	r3, r9
 8000474:	2b0f      	cmp	r3, #15
 8000476:	d827      	bhi.n	80004c8 <__aeabi_ddiv+0xdc>
 8000478:	49bc      	ldr	r1, [pc, #752]	; (800076c <__aeabi_ddiv+0x380>)
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	58cb      	ldr	r3, [r1, r3]
 800047e:	469f      	mov	pc, r3
 8000480:	46b2      	mov	sl, r6
 8000482:	9b00      	ldr	r3, [sp, #0]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d016      	beq.n	80004b6 <__aeabi_ddiv+0xca>
 8000488:	2b03      	cmp	r3, #3
 800048a:	d100      	bne.n	800048e <__aeabi_ddiv+0xa2>
 800048c:	e28e      	b.n	80009ac <__aeabi_ddiv+0x5c0>
 800048e:	2b01      	cmp	r3, #1
 8000490:	d000      	beq.n	8000494 <__aeabi_ddiv+0xa8>
 8000492:	e0d9      	b.n	8000648 <__aeabi_ddiv+0x25c>
 8000494:	2300      	movs	r3, #0
 8000496:	2400      	movs	r4, #0
 8000498:	2500      	movs	r5, #0
 800049a:	4652      	mov	r2, sl
 800049c:	051b      	lsls	r3, r3, #20
 800049e:	4323      	orrs	r3, r4
 80004a0:	07d2      	lsls	r2, r2, #31
 80004a2:	4313      	orrs	r3, r2
 80004a4:	0028      	movs	r0, r5
 80004a6:	0019      	movs	r1, r3
 80004a8:	b005      	add	sp, #20
 80004aa:	bcf0      	pop	{r4, r5, r6, r7}
 80004ac:	46bb      	mov	fp, r7
 80004ae:	46b2      	mov	sl, r6
 80004b0:	46a9      	mov	r9, r5
 80004b2:	46a0      	mov	r8, r4
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	2400      	movs	r4, #0
 80004b8:	2500      	movs	r5, #0
 80004ba:	4baa      	ldr	r3, [pc, #680]	; (8000764 <__aeabi_ddiv+0x378>)
 80004bc:	e7ed      	b.n	800049a <__aeabi_ddiv+0xae>
 80004be:	46ba      	mov	sl, r7
 80004c0:	46a0      	mov	r8, r4
 80004c2:	0015      	movs	r5, r2
 80004c4:	9000      	str	r0, [sp, #0]
 80004c6:	e7dc      	b.n	8000482 <__aeabi_ddiv+0x96>
 80004c8:	4544      	cmp	r4, r8
 80004ca:	d200      	bcs.n	80004ce <__aeabi_ddiv+0xe2>
 80004cc:	e1c7      	b.n	800085e <__aeabi_ddiv+0x472>
 80004ce:	d100      	bne.n	80004d2 <__aeabi_ddiv+0xe6>
 80004d0:	e1c2      	b.n	8000858 <__aeabi_ddiv+0x46c>
 80004d2:	2301      	movs	r3, #1
 80004d4:	425b      	negs	r3, r3
 80004d6:	469c      	mov	ip, r3
 80004d8:	002e      	movs	r6, r5
 80004da:	4640      	mov	r0, r8
 80004dc:	2500      	movs	r5, #0
 80004de:	44e3      	add	fp, ip
 80004e0:	0223      	lsls	r3, r4, #8
 80004e2:	0e14      	lsrs	r4, r2, #24
 80004e4:	431c      	orrs	r4, r3
 80004e6:	0c1b      	lsrs	r3, r3, #16
 80004e8:	4699      	mov	r9, r3
 80004ea:	0423      	lsls	r3, r4, #16
 80004ec:	0c1f      	lsrs	r7, r3, #16
 80004ee:	0212      	lsls	r2, r2, #8
 80004f0:	4649      	mov	r1, r9
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9701      	str	r7, [sp, #4]
 80004f6:	f7ff fe89 	bl	800020c <__aeabi_uidivmod>
 80004fa:	0002      	movs	r2, r0
 80004fc:	437a      	muls	r2, r7
 80004fe:	040b      	lsls	r3, r1, #16
 8000500:	0c31      	lsrs	r1, r6, #16
 8000502:	4680      	mov	r8, r0
 8000504:	4319      	orrs	r1, r3
 8000506:	428a      	cmp	r2, r1
 8000508:	d907      	bls.n	800051a <__aeabi_ddiv+0x12e>
 800050a:	2301      	movs	r3, #1
 800050c:	425b      	negs	r3, r3
 800050e:	469c      	mov	ip, r3
 8000510:	1909      	adds	r1, r1, r4
 8000512:	44e0      	add	r8, ip
 8000514:	428c      	cmp	r4, r1
 8000516:	d800      	bhi.n	800051a <__aeabi_ddiv+0x12e>
 8000518:	e207      	b.n	800092a <__aeabi_ddiv+0x53e>
 800051a:	1a88      	subs	r0, r1, r2
 800051c:	4649      	mov	r1, r9
 800051e:	f7ff fe75 	bl	800020c <__aeabi_uidivmod>
 8000522:	0409      	lsls	r1, r1, #16
 8000524:	468c      	mov	ip, r1
 8000526:	0431      	lsls	r1, r6, #16
 8000528:	4666      	mov	r6, ip
 800052a:	9a01      	ldr	r2, [sp, #4]
 800052c:	0c09      	lsrs	r1, r1, #16
 800052e:	4342      	muls	r2, r0
 8000530:	0003      	movs	r3, r0
 8000532:	4331      	orrs	r1, r6
 8000534:	428a      	cmp	r2, r1
 8000536:	d904      	bls.n	8000542 <__aeabi_ddiv+0x156>
 8000538:	1909      	adds	r1, r1, r4
 800053a:	3b01      	subs	r3, #1
 800053c:	428c      	cmp	r4, r1
 800053e:	d800      	bhi.n	8000542 <__aeabi_ddiv+0x156>
 8000540:	e1ed      	b.n	800091e <__aeabi_ddiv+0x532>
 8000542:	1a88      	subs	r0, r1, r2
 8000544:	4642      	mov	r2, r8
 8000546:	0412      	lsls	r2, r2, #16
 8000548:	431a      	orrs	r2, r3
 800054a:	4690      	mov	r8, r2
 800054c:	4641      	mov	r1, r8
 800054e:	9b00      	ldr	r3, [sp, #0]
 8000550:	040e      	lsls	r6, r1, #16
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	001f      	movs	r7, r3
 8000556:	9302      	str	r3, [sp, #8]
 8000558:	9b00      	ldr	r3, [sp, #0]
 800055a:	0c36      	lsrs	r6, r6, #16
 800055c:	041b      	lsls	r3, r3, #16
 800055e:	0c19      	lsrs	r1, r3, #16
 8000560:	000b      	movs	r3, r1
 8000562:	4373      	muls	r3, r6
 8000564:	0c12      	lsrs	r2, r2, #16
 8000566:	437e      	muls	r6, r7
 8000568:	9103      	str	r1, [sp, #12]
 800056a:	4351      	muls	r1, r2
 800056c:	437a      	muls	r2, r7
 800056e:	0c1f      	lsrs	r7, r3, #16
 8000570:	46bc      	mov	ip, r7
 8000572:	1876      	adds	r6, r6, r1
 8000574:	4466      	add	r6, ip
 8000576:	42b1      	cmp	r1, r6
 8000578:	d903      	bls.n	8000582 <__aeabi_ddiv+0x196>
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	0249      	lsls	r1, r1, #9
 800057e:	468c      	mov	ip, r1
 8000580:	4462      	add	r2, ip
 8000582:	0c31      	lsrs	r1, r6, #16
 8000584:	188a      	adds	r2, r1, r2
 8000586:	0431      	lsls	r1, r6, #16
 8000588:	041e      	lsls	r6, r3, #16
 800058a:	0c36      	lsrs	r6, r6, #16
 800058c:	198e      	adds	r6, r1, r6
 800058e:	4290      	cmp	r0, r2
 8000590:	d302      	bcc.n	8000598 <__aeabi_ddiv+0x1ac>
 8000592:	d112      	bne.n	80005ba <__aeabi_ddiv+0x1ce>
 8000594:	42b5      	cmp	r5, r6
 8000596:	d210      	bcs.n	80005ba <__aeabi_ddiv+0x1ce>
 8000598:	4643      	mov	r3, r8
 800059a:	1e59      	subs	r1, r3, #1
 800059c:	9b00      	ldr	r3, [sp, #0]
 800059e:	469c      	mov	ip, r3
 80005a0:	4465      	add	r5, ip
 80005a2:	001f      	movs	r7, r3
 80005a4:	429d      	cmp	r5, r3
 80005a6:	419b      	sbcs	r3, r3
 80005a8:	425b      	negs	r3, r3
 80005aa:	191b      	adds	r3, r3, r4
 80005ac:	18c0      	adds	r0, r0, r3
 80005ae:	4284      	cmp	r4, r0
 80005b0:	d200      	bcs.n	80005b4 <__aeabi_ddiv+0x1c8>
 80005b2:	e1a0      	b.n	80008f6 <__aeabi_ddiv+0x50a>
 80005b4:	d100      	bne.n	80005b8 <__aeabi_ddiv+0x1cc>
 80005b6:	e19b      	b.n	80008f0 <__aeabi_ddiv+0x504>
 80005b8:	4688      	mov	r8, r1
 80005ba:	1bae      	subs	r6, r5, r6
 80005bc:	42b5      	cmp	r5, r6
 80005be:	41ad      	sbcs	r5, r5
 80005c0:	1a80      	subs	r0, r0, r2
 80005c2:	426d      	negs	r5, r5
 80005c4:	1b40      	subs	r0, r0, r5
 80005c6:	4284      	cmp	r4, r0
 80005c8:	d100      	bne.n	80005cc <__aeabi_ddiv+0x1e0>
 80005ca:	e1d5      	b.n	8000978 <__aeabi_ddiv+0x58c>
 80005cc:	4649      	mov	r1, r9
 80005ce:	f7ff fe1d 	bl	800020c <__aeabi_uidivmod>
 80005d2:	9a01      	ldr	r2, [sp, #4]
 80005d4:	040b      	lsls	r3, r1, #16
 80005d6:	4342      	muls	r2, r0
 80005d8:	0c31      	lsrs	r1, r6, #16
 80005da:	0005      	movs	r5, r0
 80005dc:	4319      	orrs	r1, r3
 80005de:	428a      	cmp	r2, r1
 80005e0:	d900      	bls.n	80005e4 <__aeabi_ddiv+0x1f8>
 80005e2:	e16c      	b.n	80008be <__aeabi_ddiv+0x4d2>
 80005e4:	1a88      	subs	r0, r1, r2
 80005e6:	4649      	mov	r1, r9
 80005e8:	f7ff fe10 	bl	800020c <__aeabi_uidivmod>
 80005ec:	9a01      	ldr	r2, [sp, #4]
 80005ee:	0436      	lsls	r6, r6, #16
 80005f0:	4342      	muls	r2, r0
 80005f2:	0409      	lsls	r1, r1, #16
 80005f4:	0c36      	lsrs	r6, r6, #16
 80005f6:	0003      	movs	r3, r0
 80005f8:	430e      	orrs	r6, r1
 80005fa:	42b2      	cmp	r2, r6
 80005fc:	d900      	bls.n	8000600 <__aeabi_ddiv+0x214>
 80005fe:	e153      	b.n	80008a8 <__aeabi_ddiv+0x4bc>
 8000600:	9803      	ldr	r0, [sp, #12]
 8000602:	1ab6      	subs	r6, r6, r2
 8000604:	0002      	movs	r2, r0
 8000606:	042d      	lsls	r5, r5, #16
 8000608:	431d      	orrs	r5, r3
 800060a:	9f02      	ldr	r7, [sp, #8]
 800060c:	042b      	lsls	r3, r5, #16
 800060e:	0c1b      	lsrs	r3, r3, #16
 8000610:	435a      	muls	r2, r3
 8000612:	437b      	muls	r3, r7
 8000614:	469c      	mov	ip, r3
 8000616:	0c29      	lsrs	r1, r5, #16
 8000618:	4348      	muls	r0, r1
 800061a:	0c13      	lsrs	r3, r2, #16
 800061c:	4484      	add	ip, r0
 800061e:	4463      	add	r3, ip
 8000620:	4379      	muls	r1, r7
 8000622:	4298      	cmp	r0, r3
 8000624:	d903      	bls.n	800062e <__aeabi_ddiv+0x242>
 8000626:	2080      	movs	r0, #128	; 0x80
 8000628:	0240      	lsls	r0, r0, #9
 800062a:	4684      	mov	ip, r0
 800062c:	4461      	add	r1, ip
 800062e:	0c18      	lsrs	r0, r3, #16
 8000630:	0412      	lsls	r2, r2, #16
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	0c12      	lsrs	r2, r2, #16
 8000636:	1841      	adds	r1, r0, r1
 8000638:	189b      	adds	r3, r3, r2
 800063a:	428e      	cmp	r6, r1
 800063c:	d200      	bcs.n	8000640 <__aeabi_ddiv+0x254>
 800063e:	e0ff      	b.n	8000840 <__aeabi_ddiv+0x454>
 8000640:	d100      	bne.n	8000644 <__aeabi_ddiv+0x258>
 8000642:	e0fa      	b.n	800083a <__aeabi_ddiv+0x44e>
 8000644:	2301      	movs	r3, #1
 8000646:	431d      	orrs	r5, r3
 8000648:	4a49      	ldr	r2, [pc, #292]	; (8000770 <__aeabi_ddiv+0x384>)
 800064a:	445a      	add	r2, fp
 800064c:	2a00      	cmp	r2, #0
 800064e:	dc00      	bgt.n	8000652 <__aeabi_ddiv+0x266>
 8000650:	e0aa      	b.n	80007a8 <__aeabi_ddiv+0x3bc>
 8000652:	076b      	lsls	r3, r5, #29
 8000654:	d000      	beq.n	8000658 <__aeabi_ddiv+0x26c>
 8000656:	e13d      	b.n	80008d4 <__aeabi_ddiv+0x4e8>
 8000658:	08ed      	lsrs	r5, r5, #3
 800065a:	4643      	mov	r3, r8
 800065c:	01db      	lsls	r3, r3, #7
 800065e:	d506      	bpl.n	800066e <__aeabi_ddiv+0x282>
 8000660:	4642      	mov	r2, r8
 8000662:	4b44      	ldr	r3, [pc, #272]	; (8000774 <__aeabi_ddiv+0x388>)
 8000664:	401a      	ands	r2, r3
 8000666:	4690      	mov	r8, r2
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	00d2      	lsls	r2, r2, #3
 800066c:	445a      	add	r2, fp
 800066e:	4b42      	ldr	r3, [pc, #264]	; (8000778 <__aeabi_ddiv+0x38c>)
 8000670:	429a      	cmp	r2, r3
 8000672:	dd00      	ble.n	8000676 <__aeabi_ddiv+0x28a>
 8000674:	e71f      	b.n	80004b6 <__aeabi_ddiv+0xca>
 8000676:	4643      	mov	r3, r8
 8000678:	075b      	lsls	r3, r3, #29
 800067a:	431d      	orrs	r5, r3
 800067c:	4643      	mov	r3, r8
 800067e:	0552      	lsls	r2, r2, #21
 8000680:	025c      	lsls	r4, r3, #9
 8000682:	0b24      	lsrs	r4, r4, #12
 8000684:	0d53      	lsrs	r3, r2, #21
 8000686:	e708      	b.n	800049a <__aeabi_ddiv+0xae>
 8000688:	4652      	mov	r2, sl
 800068a:	4322      	orrs	r2, r4
 800068c:	d100      	bne.n	8000690 <__aeabi_ddiv+0x2a4>
 800068e:	e07b      	b.n	8000788 <__aeabi_ddiv+0x39c>
 8000690:	2c00      	cmp	r4, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_ddiv+0x2aa>
 8000694:	e0fa      	b.n	800088c <__aeabi_ddiv+0x4a0>
 8000696:	0020      	movs	r0, r4
 8000698:	f000 fcb8 	bl	800100c <__clzsi2>
 800069c:	0002      	movs	r2, r0
 800069e:	3a0b      	subs	r2, #11
 80006a0:	231d      	movs	r3, #29
 80006a2:	0001      	movs	r1, r0
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	4652      	mov	r2, sl
 80006a8:	3908      	subs	r1, #8
 80006aa:	40da      	lsrs	r2, r3
 80006ac:	408c      	lsls	r4, r1
 80006ae:	4314      	orrs	r4, r2
 80006b0:	4652      	mov	r2, sl
 80006b2:	408a      	lsls	r2, r1
 80006b4:	4b31      	ldr	r3, [pc, #196]	; (800077c <__aeabi_ddiv+0x390>)
 80006b6:	4458      	add	r0, fp
 80006b8:	469b      	mov	fp, r3
 80006ba:	4483      	add	fp, r0
 80006bc:	2000      	movs	r0, #0
 80006be:	e6d5      	b.n	800046c <__aeabi_ddiv+0x80>
 80006c0:	464b      	mov	r3, r9
 80006c2:	4323      	orrs	r3, r4
 80006c4:	4698      	mov	r8, r3
 80006c6:	d044      	beq.n	8000752 <__aeabi_ddiv+0x366>
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_ddiv+0x2e2>
 80006cc:	e0ce      	b.n	800086c <__aeabi_ddiv+0x480>
 80006ce:	0020      	movs	r0, r4
 80006d0:	f000 fc9c 	bl	800100c <__clzsi2>
 80006d4:	0001      	movs	r1, r0
 80006d6:	0002      	movs	r2, r0
 80006d8:	390b      	subs	r1, #11
 80006da:	231d      	movs	r3, #29
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	4649      	mov	r1, r9
 80006e0:	0010      	movs	r0, r2
 80006e2:	40d9      	lsrs	r1, r3
 80006e4:	3808      	subs	r0, #8
 80006e6:	4084      	lsls	r4, r0
 80006e8:	000b      	movs	r3, r1
 80006ea:	464d      	mov	r5, r9
 80006ec:	4323      	orrs	r3, r4
 80006ee:	4698      	mov	r8, r3
 80006f0:	4085      	lsls	r5, r0
 80006f2:	4823      	ldr	r0, [pc, #140]	; (8000780 <__aeabi_ddiv+0x394>)
 80006f4:	1a83      	subs	r3, r0, r2
 80006f6:	469b      	mov	fp, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	4699      	mov	r9, r3
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	e69a      	b.n	8000436 <__aeabi_ddiv+0x4a>
 8000700:	464b      	mov	r3, r9
 8000702:	4323      	orrs	r3, r4
 8000704:	4698      	mov	r8, r3
 8000706:	d11d      	bne.n	8000744 <__aeabi_ddiv+0x358>
 8000708:	2308      	movs	r3, #8
 800070a:	4699      	mov	r9, r3
 800070c:	3b06      	subs	r3, #6
 800070e:	2500      	movs	r5, #0
 8000710:	4683      	mov	fp, r0
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	e68f      	b.n	8000436 <__aeabi_ddiv+0x4a>
 8000716:	4652      	mov	r2, sl
 8000718:	4322      	orrs	r2, r4
 800071a:	d109      	bne.n	8000730 <__aeabi_ddiv+0x344>
 800071c:	2302      	movs	r3, #2
 800071e:	4649      	mov	r1, r9
 8000720:	4319      	orrs	r1, r3
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <__aeabi_ddiv+0x398>)
 8000724:	4689      	mov	r9, r1
 8000726:	469c      	mov	ip, r3
 8000728:	2400      	movs	r4, #0
 800072a:	2002      	movs	r0, #2
 800072c:	44e3      	add	fp, ip
 800072e:	e69d      	b.n	800046c <__aeabi_ddiv+0x80>
 8000730:	2303      	movs	r3, #3
 8000732:	464a      	mov	r2, r9
 8000734:	431a      	orrs	r2, r3
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <__aeabi_ddiv+0x398>)
 8000738:	4691      	mov	r9, r2
 800073a:	469c      	mov	ip, r3
 800073c:	4652      	mov	r2, sl
 800073e:	2003      	movs	r0, #3
 8000740:	44e3      	add	fp, ip
 8000742:	e693      	b.n	800046c <__aeabi_ddiv+0x80>
 8000744:	230c      	movs	r3, #12
 8000746:	4699      	mov	r9, r3
 8000748:	3b09      	subs	r3, #9
 800074a:	46a0      	mov	r8, r4
 800074c:	4683      	mov	fp, r0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	e671      	b.n	8000436 <__aeabi_ddiv+0x4a>
 8000752:	2304      	movs	r3, #4
 8000754:	4699      	mov	r9, r3
 8000756:	2300      	movs	r3, #0
 8000758:	469b      	mov	fp, r3
 800075a:	3301      	adds	r3, #1
 800075c:	2500      	movs	r5, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	e669      	b.n	8000436 <__aeabi_ddiv+0x4a>
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	000007ff 	.word	0x000007ff
 8000768:	fffffc01 	.word	0xfffffc01
 800076c:	08004958 	.word	0x08004958
 8000770:	000003ff 	.word	0x000003ff
 8000774:	feffffff 	.word	0xfeffffff
 8000778:	000007fe 	.word	0x000007fe
 800077c:	000003f3 	.word	0x000003f3
 8000780:	fffffc0d 	.word	0xfffffc0d
 8000784:	fffff801 	.word	0xfffff801
 8000788:	4649      	mov	r1, r9
 800078a:	2301      	movs	r3, #1
 800078c:	4319      	orrs	r1, r3
 800078e:	4689      	mov	r9, r1
 8000790:	2400      	movs	r4, #0
 8000792:	2001      	movs	r0, #1
 8000794:	e66a      	b.n	800046c <__aeabi_ddiv+0x80>
 8000796:	2300      	movs	r3, #0
 8000798:	2480      	movs	r4, #128	; 0x80
 800079a:	469a      	mov	sl, r3
 800079c:	2500      	movs	r5, #0
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <__aeabi_ddiv+0x5dc>)
 80007a0:	0324      	lsls	r4, r4, #12
 80007a2:	e67a      	b.n	800049a <__aeabi_ddiv+0xae>
 80007a4:	2501      	movs	r5, #1
 80007a6:	426d      	negs	r5, r5
 80007a8:	2301      	movs	r3, #1
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	2b38      	cmp	r3, #56	; 0x38
 80007ae:	dd00      	ble.n	80007b2 <__aeabi_ddiv+0x3c6>
 80007b0:	e670      	b.n	8000494 <__aeabi_ddiv+0xa8>
 80007b2:	2b1f      	cmp	r3, #31
 80007b4:	dc00      	bgt.n	80007b8 <__aeabi_ddiv+0x3cc>
 80007b6:	e0bf      	b.n	8000938 <__aeabi_ddiv+0x54c>
 80007b8:	211f      	movs	r1, #31
 80007ba:	4249      	negs	r1, r1
 80007bc:	1a8a      	subs	r2, r1, r2
 80007be:	4641      	mov	r1, r8
 80007c0:	40d1      	lsrs	r1, r2
 80007c2:	000a      	movs	r2, r1
 80007c4:	2b20      	cmp	r3, #32
 80007c6:	d004      	beq.n	80007d2 <__aeabi_ddiv+0x3e6>
 80007c8:	4641      	mov	r1, r8
 80007ca:	4b80      	ldr	r3, [pc, #512]	; (80009cc <__aeabi_ddiv+0x5e0>)
 80007cc:	445b      	add	r3, fp
 80007ce:	4099      	lsls	r1, r3
 80007d0:	430d      	orrs	r5, r1
 80007d2:	1e6b      	subs	r3, r5, #1
 80007d4:	419d      	sbcs	r5, r3
 80007d6:	2307      	movs	r3, #7
 80007d8:	432a      	orrs	r2, r5
 80007da:	001d      	movs	r5, r3
 80007dc:	2400      	movs	r4, #0
 80007de:	4015      	ands	r5, r2
 80007e0:	4213      	tst	r3, r2
 80007e2:	d100      	bne.n	80007e6 <__aeabi_ddiv+0x3fa>
 80007e4:	e0d4      	b.n	8000990 <__aeabi_ddiv+0x5a4>
 80007e6:	210f      	movs	r1, #15
 80007e8:	2300      	movs	r3, #0
 80007ea:	4011      	ands	r1, r2
 80007ec:	2904      	cmp	r1, #4
 80007ee:	d100      	bne.n	80007f2 <__aeabi_ddiv+0x406>
 80007f0:	e0cb      	b.n	800098a <__aeabi_ddiv+0x59e>
 80007f2:	1d11      	adds	r1, r2, #4
 80007f4:	4291      	cmp	r1, r2
 80007f6:	4192      	sbcs	r2, r2
 80007f8:	4252      	negs	r2, r2
 80007fa:	189b      	adds	r3, r3, r2
 80007fc:	000a      	movs	r2, r1
 80007fe:	0219      	lsls	r1, r3, #8
 8000800:	d400      	bmi.n	8000804 <__aeabi_ddiv+0x418>
 8000802:	e0c2      	b.n	800098a <__aeabi_ddiv+0x59e>
 8000804:	2301      	movs	r3, #1
 8000806:	2400      	movs	r4, #0
 8000808:	2500      	movs	r5, #0
 800080a:	e646      	b.n	800049a <__aeabi_ddiv+0xae>
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	4641      	mov	r1, r8
 8000810:	031b      	lsls	r3, r3, #12
 8000812:	4219      	tst	r1, r3
 8000814:	d008      	beq.n	8000828 <__aeabi_ddiv+0x43c>
 8000816:	421c      	tst	r4, r3
 8000818:	d106      	bne.n	8000828 <__aeabi_ddiv+0x43c>
 800081a:	431c      	orrs	r4, r3
 800081c:	0324      	lsls	r4, r4, #12
 800081e:	46ba      	mov	sl, r7
 8000820:	0015      	movs	r5, r2
 8000822:	4b69      	ldr	r3, [pc, #420]	; (80009c8 <__aeabi_ddiv+0x5dc>)
 8000824:	0b24      	lsrs	r4, r4, #12
 8000826:	e638      	b.n	800049a <__aeabi_ddiv+0xae>
 8000828:	2480      	movs	r4, #128	; 0x80
 800082a:	4643      	mov	r3, r8
 800082c:	0324      	lsls	r4, r4, #12
 800082e:	431c      	orrs	r4, r3
 8000830:	0324      	lsls	r4, r4, #12
 8000832:	46b2      	mov	sl, r6
 8000834:	4b64      	ldr	r3, [pc, #400]	; (80009c8 <__aeabi_ddiv+0x5dc>)
 8000836:	0b24      	lsrs	r4, r4, #12
 8000838:	e62f      	b.n	800049a <__aeabi_ddiv+0xae>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_ddiv+0x454>
 800083e:	e703      	b.n	8000648 <__aeabi_ddiv+0x25c>
 8000840:	19a6      	adds	r6, r4, r6
 8000842:	1e68      	subs	r0, r5, #1
 8000844:	42a6      	cmp	r6, r4
 8000846:	d200      	bcs.n	800084a <__aeabi_ddiv+0x45e>
 8000848:	e08d      	b.n	8000966 <__aeabi_ddiv+0x57a>
 800084a:	428e      	cmp	r6, r1
 800084c:	d200      	bcs.n	8000850 <__aeabi_ddiv+0x464>
 800084e:	e0a3      	b.n	8000998 <__aeabi_ddiv+0x5ac>
 8000850:	d100      	bne.n	8000854 <__aeabi_ddiv+0x468>
 8000852:	e0b3      	b.n	80009bc <__aeabi_ddiv+0x5d0>
 8000854:	0005      	movs	r5, r0
 8000856:	e6f5      	b.n	8000644 <__aeabi_ddiv+0x258>
 8000858:	42aa      	cmp	r2, r5
 800085a:	d900      	bls.n	800085e <__aeabi_ddiv+0x472>
 800085c:	e639      	b.n	80004d2 <__aeabi_ddiv+0xe6>
 800085e:	4643      	mov	r3, r8
 8000860:	07de      	lsls	r6, r3, #31
 8000862:	0858      	lsrs	r0, r3, #1
 8000864:	086b      	lsrs	r3, r5, #1
 8000866:	431e      	orrs	r6, r3
 8000868:	07ed      	lsls	r5, r5, #31
 800086a:	e639      	b.n	80004e0 <__aeabi_ddiv+0xf4>
 800086c:	4648      	mov	r0, r9
 800086e:	f000 fbcd 	bl	800100c <__clzsi2>
 8000872:	0001      	movs	r1, r0
 8000874:	0002      	movs	r2, r0
 8000876:	3115      	adds	r1, #21
 8000878:	3220      	adds	r2, #32
 800087a:	291c      	cmp	r1, #28
 800087c:	dc00      	bgt.n	8000880 <__aeabi_ddiv+0x494>
 800087e:	e72c      	b.n	80006da <__aeabi_ddiv+0x2ee>
 8000880:	464b      	mov	r3, r9
 8000882:	3808      	subs	r0, #8
 8000884:	4083      	lsls	r3, r0
 8000886:	2500      	movs	r5, #0
 8000888:	4698      	mov	r8, r3
 800088a:	e732      	b.n	80006f2 <__aeabi_ddiv+0x306>
 800088c:	f000 fbbe 	bl	800100c <__clzsi2>
 8000890:	0003      	movs	r3, r0
 8000892:	001a      	movs	r2, r3
 8000894:	3215      	adds	r2, #21
 8000896:	3020      	adds	r0, #32
 8000898:	2a1c      	cmp	r2, #28
 800089a:	dc00      	bgt.n	800089e <__aeabi_ddiv+0x4b2>
 800089c:	e700      	b.n	80006a0 <__aeabi_ddiv+0x2b4>
 800089e:	4654      	mov	r4, sl
 80008a0:	3b08      	subs	r3, #8
 80008a2:	2200      	movs	r2, #0
 80008a4:	409c      	lsls	r4, r3
 80008a6:	e705      	b.n	80006b4 <__aeabi_ddiv+0x2c8>
 80008a8:	1936      	adds	r6, r6, r4
 80008aa:	3b01      	subs	r3, #1
 80008ac:	42b4      	cmp	r4, r6
 80008ae:	d900      	bls.n	80008b2 <__aeabi_ddiv+0x4c6>
 80008b0:	e6a6      	b.n	8000600 <__aeabi_ddiv+0x214>
 80008b2:	42b2      	cmp	r2, r6
 80008b4:	d800      	bhi.n	80008b8 <__aeabi_ddiv+0x4cc>
 80008b6:	e6a3      	b.n	8000600 <__aeabi_ddiv+0x214>
 80008b8:	1e83      	subs	r3, r0, #2
 80008ba:	1936      	adds	r6, r6, r4
 80008bc:	e6a0      	b.n	8000600 <__aeabi_ddiv+0x214>
 80008be:	1909      	adds	r1, r1, r4
 80008c0:	3d01      	subs	r5, #1
 80008c2:	428c      	cmp	r4, r1
 80008c4:	d900      	bls.n	80008c8 <__aeabi_ddiv+0x4dc>
 80008c6:	e68d      	b.n	80005e4 <__aeabi_ddiv+0x1f8>
 80008c8:	428a      	cmp	r2, r1
 80008ca:	d800      	bhi.n	80008ce <__aeabi_ddiv+0x4e2>
 80008cc:	e68a      	b.n	80005e4 <__aeabi_ddiv+0x1f8>
 80008ce:	1e85      	subs	r5, r0, #2
 80008d0:	1909      	adds	r1, r1, r4
 80008d2:	e687      	b.n	80005e4 <__aeabi_ddiv+0x1f8>
 80008d4:	230f      	movs	r3, #15
 80008d6:	402b      	ands	r3, r5
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d100      	bne.n	80008de <__aeabi_ddiv+0x4f2>
 80008dc:	e6bc      	b.n	8000658 <__aeabi_ddiv+0x26c>
 80008de:	2305      	movs	r3, #5
 80008e0:	425b      	negs	r3, r3
 80008e2:	42ab      	cmp	r3, r5
 80008e4:	419b      	sbcs	r3, r3
 80008e6:	3504      	adds	r5, #4
 80008e8:	425b      	negs	r3, r3
 80008ea:	08ed      	lsrs	r5, r5, #3
 80008ec:	4498      	add	r8, r3
 80008ee:	e6b4      	b.n	800065a <__aeabi_ddiv+0x26e>
 80008f0:	42af      	cmp	r7, r5
 80008f2:	d900      	bls.n	80008f6 <__aeabi_ddiv+0x50a>
 80008f4:	e660      	b.n	80005b8 <__aeabi_ddiv+0x1cc>
 80008f6:	4282      	cmp	r2, r0
 80008f8:	d804      	bhi.n	8000904 <__aeabi_ddiv+0x518>
 80008fa:	d000      	beq.n	80008fe <__aeabi_ddiv+0x512>
 80008fc:	e65c      	b.n	80005b8 <__aeabi_ddiv+0x1cc>
 80008fe:	42ae      	cmp	r6, r5
 8000900:	d800      	bhi.n	8000904 <__aeabi_ddiv+0x518>
 8000902:	e659      	b.n	80005b8 <__aeabi_ddiv+0x1cc>
 8000904:	2302      	movs	r3, #2
 8000906:	425b      	negs	r3, r3
 8000908:	469c      	mov	ip, r3
 800090a:	9b00      	ldr	r3, [sp, #0]
 800090c:	44e0      	add	r8, ip
 800090e:	469c      	mov	ip, r3
 8000910:	4465      	add	r5, ip
 8000912:	429d      	cmp	r5, r3
 8000914:	419b      	sbcs	r3, r3
 8000916:	425b      	negs	r3, r3
 8000918:	191b      	adds	r3, r3, r4
 800091a:	18c0      	adds	r0, r0, r3
 800091c:	e64d      	b.n	80005ba <__aeabi_ddiv+0x1ce>
 800091e:	428a      	cmp	r2, r1
 8000920:	d800      	bhi.n	8000924 <__aeabi_ddiv+0x538>
 8000922:	e60e      	b.n	8000542 <__aeabi_ddiv+0x156>
 8000924:	1e83      	subs	r3, r0, #2
 8000926:	1909      	adds	r1, r1, r4
 8000928:	e60b      	b.n	8000542 <__aeabi_ddiv+0x156>
 800092a:	428a      	cmp	r2, r1
 800092c:	d800      	bhi.n	8000930 <__aeabi_ddiv+0x544>
 800092e:	e5f4      	b.n	800051a <__aeabi_ddiv+0x12e>
 8000930:	1e83      	subs	r3, r0, #2
 8000932:	4698      	mov	r8, r3
 8000934:	1909      	adds	r1, r1, r4
 8000936:	e5f0      	b.n	800051a <__aeabi_ddiv+0x12e>
 8000938:	4925      	ldr	r1, [pc, #148]	; (80009d0 <__aeabi_ddiv+0x5e4>)
 800093a:	0028      	movs	r0, r5
 800093c:	4459      	add	r1, fp
 800093e:	408d      	lsls	r5, r1
 8000940:	4642      	mov	r2, r8
 8000942:	408a      	lsls	r2, r1
 8000944:	1e69      	subs	r1, r5, #1
 8000946:	418d      	sbcs	r5, r1
 8000948:	4641      	mov	r1, r8
 800094a:	40d8      	lsrs	r0, r3
 800094c:	40d9      	lsrs	r1, r3
 800094e:	4302      	orrs	r2, r0
 8000950:	432a      	orrs	r2, r5
 8000952:	000b      	movs	r3, r1
 8000954:	0751      	lsls	r1, r2, #29
 8000956:	d100      	bne.n	800095a <__aeabi_ddiv+0x56e>
 8000958:	e751      	b.n	80007fe <__aeabi_ddiv+0x412>
 800095a:	210f      	movs	r1, #15
 800095c:	4011      	ands	r1, r2
 800095e:	2904      	cmp	r1, #4
 8000960:	d000      	beq.n	8000964 <__aeabi_ddiv+0x578>
 8000962:	e746      	b.n	80007f2 <__aeabi_ddiv+0x406>
 8000964:	e74b      	b.n	80007fe <__aeabi_ddiv+0x412>
 8000966:	0005      	movs	r5, r0
 8000968:	428e      	cmp	r6, r1
 800096a:	d000      	beq.n	800096e <__aeabi_ddiv+0x582>
 800096c:	e66a      	b.n	8000644 <__aeabi_ddiv+0x258>
 800096e:	9a00      	ldr	r2, [sp, #0]
 8000970:	4293      	cmp	r3, r2
 8000972:	d000      	beq.n	8000976 <__aeabi_ddiv+0x58a>
 8000974:	e666      	b.n	8000644 <__aeabi_ddiv+0x258>
 8000976:	e667      	b.n	8000648 <__aeabi_ddiv+0x25c>
 8000978:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <__aeabi_ddiv+0x5e8>)
 800097a:	445a      	add	r2, fp
 800097c:	2a00      	cmp	r2, #0
 800097e:	dc00      	bgt.n	8000982 <__aeabi_ddiv+0x596>
 8000980:	e710      	b.n	80007a4 <__aeabi_ddiv+0x3b8>
 8000982:	2301      	movs	r3, #1
 8000984:	2500      	movs	r5, #0
 8000986:	4498      	add	r8, r3
 8000988:	e667      	b.n	800065a <__aeabi_ddiv+0x26e>
 800098a:	075d      	lsls	r5, r3, #29
 800098c:	025b      	lsls	r3, r3, #9
 800098e:	0b1c      	lsrs	r4, r3, #12
 8000990:	08d2      	lsrs	r2, r2, #3
 8000992:	2300      	movs	r3, #0
 8000994:	4315      	orrs	r5, r2
 8000996:	e580      	b.n	800049a <__aeabi_ddiv+0xae>
 8000998:	9800      	ldr	r0, [sp, #0]
 800099a:	3d02      	subs	r5, #2
 800099c:	0042      	lsls	r2, r0, #1
 800099e:	4282      	cmp	r2, r0
 80009a0:	41bf      	sbcs	r7, r7
 80009a2:	427f      	negs	r7, r7
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	1936      	adds	r6, r6, r4
 80009a8:	9200      	str	r2, [sp, #0]
 80009aa:	e7dd      	b.n	8000968 <__aeabi_ddiv+0x57c>
 80009ac:	2480      	movs	r4, #128	; 0x80
 80009ae:	4643      	mov	r3, r8
 80009b0:	0324      	lsls	r4, r4, #12
 80009b2:	431c      	orrs	r4, r3
 80009b4:	0324      	lsls	r4, r4, #12
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__aeabi_ddiv+0x5dc>)
 80009b8:	0b24      	lsrs	r4, r4, #12
 80009ba:	e56e      	b.n	800049a <__aeabi_ddiv+0xae>
 80009bc:	9a00      	ldr	r2, [sp, #0]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d3ea      	bcc.n	8000998 <__aeabi_ddiv+0x5ac>
 80009c2:	0005      	movs	r5, r0
 80009c4:	e7d3      	b.n	800096e <__aeabi_ddiv+0x582>
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	000007ff 	.word	0x000007ff
 80009cc:	0000043e 	.word	0x0000043e
 80009d0:	0000041e 	.word	0x0000041e
 80009d4:	000003ff 	.word	0x000003ff

080009d8 <__aeabi_dmul>:
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	4657      	mov	r7, sl
 80009dc:	464e      	mov	r6, r9
 80009de:	4645      	mov	r5, r8
 80009e0:	46de      	mov	lr, fp
 80009e2:	b5e0      	push	{r5, r6, r7, lr}
 80009e4:	4698      	mov	r8, r3
 80009e6:	030c      	lsls	r4, r1, #12
 80009e8:	004b      	lsls	r3, r1, #1
 80009ea:	0006      	movs	r6, r0
 80009ec:	4692      	mov	sl, r2
 80009ee:	b087      	sub	sp, #28
 80009f0:	0b24      	lsrs	r4, r4, #12
 80009f2:	0d5b      	lsrs	r3, r3, #21
 80009f4:	0fcf      	lsrs	r7, r1, #31
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_dmul+0x24>
 80009fa:	e15c      	b.n	8000cb6 <__aeabi_dmul+0x2de>
 80009fc:	4ad9      	ldr	r2, [pc, #868]	; (8000d64 <__aeabi_dmul+0x38c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dmul+0x2c>
 8000a02:	e175      	b.n	8000cf0 <__aeabi_dmul+0x318>
 8000a04:	0f42      	lsrs	r2, r0, #29
 8000a06:	00e4      	lsls	r4, r4, #3
 8000a08:	4314      	orrs	r4, r2
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	0412      	lsls	r2, r2, #16
 8000a0e:	4314      	orrs	r4, r2
 8000a10:	4ad5      	ldr	r2, [pc, #852]	; (8000d68 <__aeabi_dmul+0x390>)
 8000a12:	00c5      	lsls	r5, r0, #3
 8000a14:	4694      	mov	ip, r2
 8000a16:	4463      	add	r3, ip
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	469b      	mov	fp, r3
 8000a20:	4643      	mov	r3, r8
 8000a22:	4642      	mov	r2, r8
 8000a24:	031e      	lsls	r6, r3, #12
 8000a26:	0fd2      	lsrs	r2, r2, #31
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4650      	mov	r0, sl
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	0b36      	lsrs	r6, r6, #12
 8000a30:	0d5b      	lsrs	r3, r3, #21
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dmul+0x5e>
 8000a34:	e120      	b.n	8000c78 <__aeabi_dmul+0x2a0>
 8000a36:	4acb      	ldr	r2, [pc, #812]	; (8000d64 <__aeabi_dmul+0x38c>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dmul+0x66>
 8000a3c:	e162      	b.n	8000d04 <__aeabi_dmul+0x32c>
 8000a3e:	49ca      	ldr	r1, [pc, #808]	; (8000d68 <__aeabi_dmul+0x390>)
 8000a40:	0f42      	lsrs	r2, r0, #29
 8000a42:	468c      	mov	ip, r1
 8000a44:	9900      	ldr	r1, [sp, #0]
 8000a46:	4463      	add	r3, ip
 8000a48:	00f6      	lsls	r6, r6, #3
 8000a4a:	468c      	mov	ip, r1
 8000a4c:	4316      	orrs	r6, r2
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	449c      	add	ip, r3
 8000a52:	0412      	lsls	r2, r2, #16
 8000a54:	4663      	mov	r3, ip
 8000a56:	4316      	orrs	r6, r2
 8000a58:	00c2      	lsls	r2, r0, #3
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	9900      	ldr	r1, [sp, #0]
 8000a60:	4643      	mov	r3, r8
 8000a62:	3101      	adds	r1, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	4649      	mov	r1, r9
 8000a68:	407b      	eors	r3, r7
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	290f      	cmp	r1, #15
 8000a6e:	d826      	bhi.n	8000abe <__aeabi_dmul+0xe6>
 8000a70:	4bbe      	ldr	r3, [pc, #760]	; (8000d6c <__aeabi_dmul+0x394>)
 8000a72:	0089      	lsls	r1, r1, #2
 8000a74:	5859      	ldr	r1, [r3, r1]
 8000a76:	468f      	mov	pc, r1
 8000a78:	4643      	mov	r3, r8
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	0034      	movs	r4, r6
 8000a7e:	0015      	movs	r5, r2
 8000a80:	4683      	mov	fp, r0
 8000a82:	465b      	mov	r3, fp
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d016      	beq.n	8000ab6 <__aeabi_dmul+0xde>
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dmul+0xb6>
 8000a8c:	e203      	b.n	8000e96 <__aeabi_dmul+0x4be>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dmul+0xbc>
 8000a92:	e0cd      	b.n	8000c30 <__aeabi_dmul+0x258>
 8000a94:	2200      	movs	r2, #0
 8000a96:	2400      	movs	r4, #0
 8000a98:	2500      	movs	r5, #0
 8000a9a:	9b01      	ldr	r3, [sp, #4]
 8000a9c:	0512      	lsls	r2, r2, #20
 8000a9e:	4322      	orrs	r2, r4
 8000aa0:	07db      	lsls	r3, r3, #31
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	0028      	movs	r0, r5
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	b007      	add	sp, #28
 8000aaa:	bcf0      	pop	{r4, r5, r6, r7}
 8000aac:	46bb      	mov	fp, r7
 8000aae:	46b2      	mov	sl, r6
 8000ab0:	46a9      	mov	r9, r5
 8000ab2:	46a0      	mov	r8, r4
 8000ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	2500      	movs	r5, #0
 8000aba:	4aaa      	ldr	r2, [pc, #680]	; (8000d64 <__aeabi_dmul+0x38c>)
 8000abc:	e7ed      	b.n	8000a9a <__aeabi_dmul+0xc2>
 8000abe:	0c28      	lsrs	r0, r5, #16
 8000ac0:	042d      	lsls	r5, r5, #16
 8000ac2:	0c2d      	lsrs	r5, r5, #16
 8000ac4:	002b      	movs	r3, r5
 8000ac6:	0c11      	lsrs	r1, r2, #16
 8000ac8:	0412      	lsls	r2, r2, #16
 8000aca:	0c12      	lsrs	r2, r2, #16
 8000acc:	4353      	muls	r3, r2
 8000ace:	4698      	mov	r8, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	002f      	movs	r7, r5
 8000ad4:	4343      	muls	r3, r0
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	434f      	muls	r7, r1
 8000ada:	444f      	add	r7, r9
 8000adc:	46bb      	mov	fp, r7
 8000ade:	4647      	mov	r7, r8
 8000ae0:	000b      	movs	r3, r1
 8000ae2:	0c3f      	lsrs	r7, r7, #16
 8000ae4:	46ba      	mov	sl, r7
 8000ae6:	4343      	muls	r3, r0
 8000ae8:	44da      	add	sl, fp
 8000aea:	9302      	str	r3, [sp, #8]
 8000aec:	45d1      	cmp	r9, sl
 8000aee:	d904      	bls.n	8000afa <__aeabi_dmul+0x122>
 8000af0:	2780      	movs	r7, #128	; 0x80
 8000af2:	027f      	lsls	r7, r7, #9
 8000af4:	46b9      	mov	r9, r7
 8000af6:	444b      	add	r3, r9
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	4653      	mov	r3, sl
 8000afc:	0c1b      	lsrs	r3, r3, #16
 8000afe:	469b      	mov	fp, r3
 8000b00:	4653      	mov	r3, sl
 8000b02:	041f      	lsls	r7, r3, #16
 8000b04:	4643      	mov	r3, r8
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	4443      	add	r3, r8
 8000b10:	9304      	str	r3, [sp, #16]
 8000b12:	0c33      	lsrs	r3, r6, #16
 8000b14:	0436      	lsls	r6, r6, #16
 8000b16:	0c36      	lsrs	r6, r6, #16
 8000b18:	4698      	mov	r8, r3
 8000b1a:	0033      	movs	r3, r6
 8000b1c:	4343      	muls	r3, r0
 8000b1e:	4699      	mov	r9, r3
 8000b20:	4643      	mov	r3, r8
 8000b22:	4343      	muls	r3, r0
 8000b24:	002f      	movs	r7, r5
 8000b26:	469a      	mov	sl, r3
 8000b28:	4643      	mov	r3, r8
 8000b2a:	4377      	muls	r7, r6
 8000b2c:	435d      	muls	r5, r3
 8000b2e:	0c38      	lsrs	r0, r7, #16
 8000b30:	444d      	add	r5, r9
 8000b32:	1945      	adds	r5, r0, r5
 8000b34:	45a9      	cmp	r9, r5
 8000b36:	d903      	bls.n	8000b40 <__aeabi_dmul+0x168>
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	025b      	lsls	r3, r3, #9
 8000b3c:	4699      	mov	r9, r3
 8000b3e:	44ca      	add	sl, r9
 8000b40:	043f      	lsls	r7, r7, #16
 8000b42:	0c28      	lsrs	r0, r5, #16
 8000b44:	0c3f      	lsrs	r7, r7, #16
 8000b46:	042d      	lsls	r5, r5, #16
 8000b48:	19ed      	adds	r5, r5, r7
 8000b4a:	0c27      	lsrs	r7, r4, #16
 8000b4c:	0424      	lsls	r4, r4, #16
 8000b4e:	0c24      	lsrs	r4, r4, #16
 8000b50:	0003      	movs	r3, r0
 8000b52:	0020      	movs	r0, r4
 8000b54:	4350      	muls	r0, r2
 8000b56:	437a      	muls	r2, r7
 8000b58:	4691      	mov	r9, r2
 8000b5a:	003a      	movs	r2, r7
 8000b5c:	4453      	add	r3, sl
 8000b5e:	9305      	str	r3, [sp, #20]
 8000b60:	0c03      	lsrs	r3, r0, #16
 8000b62:	469a      	mov	sl, r3
 8000b64:	434a      	muls	r2, r1
 8000b66:	4361      	muls	r1, r4
 8000b68:	4449      	add	r1, r9
 8000b6a:	4451      	add	r1, sl
 8000b6c:	44ab      	add	fp, r5
 8000b6e:	4589      	cmp	r9, r1
 8000b70:	d903      	bls.n	8000b7a <__aeabi_dmul+0x1a2>
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	4699      	mov	r9, r3
 8000b78:	444a      	add	r2, r9
 8000b7a:	0400      	lsls	r0, r0, #16
 8000b7c:	0c0b      	lsrs	r3, r1, #16
 8000b7e:	0c00      	lsrs	r0, r0, #16
 8000b80:	0409      	lsls	r1, r1, #16
 8000b82:	1809      	adds	r1, r1, r0
 8000b84:	0020      	movs	r0, r4
 8000b86:	4699      	mov	r9, r3
 8000b88:	4643      	mov	r3, r8
 8000b8a:	4370      	muls	r0, r6
 8000b8c:	435c      	muls	r4, r3
 8000b8e:	437e      	muls	r6, r7
 8000b90:	435f      	muls	r7, r3
 8000b92:	0c03      	lsrs	r3, r0, #16
 8000b94:	4698      	mov	r8, r3
 8000b96:	19a4      	adds	r4, r4, r6
 8000b98:	4444      	add	r4, r8
 8000b9a:	444a      	add	r2, r9
 8000b9c:	9703      	str	r7, [sp, #12]
 8000b9e:	42a6      	cmp	r6, r4
 8000ba0:	d904      	bls.n	8000bac <__aeabi_dmul+0x1d4>
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	4447      	add	r7, r8
 8000baa:	9703      	str	r7, [sp, #12]
 8000bac:	0423      	lsls	r3, r4, #16
 8000bae:	9e02      	ldr	r6, [sp, #8]
 8000bb0:	469a      	mov	sl, r3
 8000bb2:	9b05      	ldr	r3, [sp, #20]
 8000bb4:	445e      	add	r6, fp
 8000bb6:	4698      	mov	r8, r3
 8000bb8:	42ae      	cmp	r6, r5
 8000bba:	41ad      	sbcs	r5, r5
 8000bbc:	1876      	adds	r6, r6, r1
 8000bbe:	428e      	cmp	r6, r1
 8000bc0:	4189      	sbcs	r1, r1
 8000bc2:	0400      	lsls	r0, r0, #16
 8000bc4:	0c00      	lsrs	r0, r0, #16
 8000bc6:	4450      	add	r0, sl
 8000bc8:	4440      	add	r0, r8
 8000bca:	426d      	negs	r5, r5
 8000bcc:	1947      	adds	r7, r0, r5
 8000bce:	46b8      	mov	r8, r7
 8000bd0:	4693      	mov	fp, r2
 8000bd2:	4249      	negs	r1, r1
 8000bd4:	4689      	mov	r9, r1
 8000bd6:	44c3      	add	fp, r8
 8000bd8:	44d9      	add	r9, fp
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	4180      	sbcs	r0, r0
 8000bde:	45a8      	cmp	r8, r5
 8000be0:	41ad      	sbcs	r5, r5
 8000be2:	4593      	cmp	fp, r2
 8000be4:	4192      	sbcs	r2, r2
 8000be6:	4589      	cmp	r9, r1
 8000be8:	4189      	sbcs	r1, r1
 8000bea:	426d      	negs	r5, r5
 8000bec:	4240      	negs	r0, r0
 8000bee:	4328      	orrs	r0, r5
 8000bf0:	0c24      	lsrs	r4, r4, #16
 8000bf2:	4252      	negs	r2, r2
 8000bf4:	4249      	negs	r1, r1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	9b03      	ldr	r3, [sp, #12]
 8000bfa:	1900      	adds	r0, r0, r4
 8000bfc:	1880      	adds	r0, r0, r2
 8000bfe:	18c7      	adds	r7, r0, r3
 8000c00:	464b      	mov	r3, r9
 8000c02:	0ddc      	lsrs	r4, r3, #23
 8000c04:	9b04      	ldr	r3, [sp, #16]
 8000c06:	0275      	lsls	r5, r6, #9
 8000c08:	431d      	orrs	r5, r3
 8000c0a:	1e6a      	subs	r2, r5, #1
 8000c0c:	4195      	sbcs	r5, r2
 8000c0e:	464b      	mov	r3, r9
 8000c10:	0df6      	lsrs	r6, r6, #23
 8000c12:	027f      	lsls	r7, r7, #9
 8000c14:	4335      	orrs	r5, r6
 8000c16:	025a      	lsls	r2, r3, #9
 8000c18:	433c      	orrs	r4, r7
 8000c1a:	4315      	orrs	r5, r2
 8000c1c:	01fb      	lsls	r3, r7, #7
 8000c1e:	d400      	bmi.n	8000c22 <__aeabi_dmul+0x24a>
 8000c20:	e11c      	b.n	8000e5c <__aeabi_dmul+0x484>
 8000c22:	2101      	movs	r1, #1
 8000c24:	086a      	lsrs	r2, r5, #1
 8000c26:	400d      	ands	r5, r1
 8000c28:	4315      	orrs	r5, r2
 8000c2a:	07e2      	lsls	r2, r4, #31
 8000c2c:	4315      	orrs	r5, r2
 8000c2e:	0864      	lsrs	r4, r4, #1
 8000c30:	494f      	ldr	r1, [pc, #316]	; (8000d70 <__aeabi_dmul+0x398>)
 8000c32:	4461      	add	r1, ip
 8000c34:	2900      	cmp	r1, #0
 8000c36:	dc00      	bgt.n	8000c3a <__aeabi_dmul+0x262>
 8000c38:	e0b0      	b.n	8000d9c <__aeabi_dmul+0x3c4>
 8000c3a:	076b      	lsls	r3, r5, #29
 8000c3c:	d009      	beq.n	8000c52 <__aeabi_dmul+0x27a>
 8000c3e:	220f      	movs	r2, #15
 8000c40:	402a      	ands	r2, r5
 8000c42:	2a04      	cmp	r2, #4
 8000c44:	d005      	beq.n	8000c52 <__aeabi_dmul+0x27a>
 8000c46:	1d2a      	adds	r2, r5, #4
 8000c48:	42aa      	cmp	r2, r5
 8000c4a:	41ad      	sbcs	r5, r5
 8000c4c:	426d      	negs	r5, r5
 8000c4e:	1964      	adds	r4, r4, r5
 8000c50:	0015      	movs	r5, r2
 8000c52:	01e3      	lsls	r3, r4, #7
 8000c54:	d504      	bpl.n	8000c60 <__aeabi_dmul+0x288>
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	4a46      	ldr	r2, [pc, #280]	; (8000d74 <__aeabi_dmul+0x39c>)
 8000c5a:	00c9      	lsls	r1, r1, #3
 8000c5c:	4014      	ands	r4, r2
 8000c5e:	4461      	add	r1, ip
 8000c60:	4a45      	ldr	r2, [pc, #276]	; (8000d78 <__aeabi_dmul+0x3a0>)
 8000c62:	4291      	cmp	r1, r2
 8000c64:	dd00      	ble.n	8000c68 <__aeabi_dmul+0x290>
 8000c66:	e726      	b.n	8000ab6 <__aeabi_dmul+0xde>
 8000c68:	0762      	lsls	r2, r4, #29
 8000c6a:	08ed      	lsrs	r5, r5, #3
 8000c6c:	0264      	lsls	r4, r4, #9
 8000c6e:	0549      	lsls	r1, r1, #21
 8000c70:	4315      	orrs	r5, r2
 8000c72:	0b24      	lsrs	r4, r4, #12
 8000c74:	0d4a      	lsrs	r2, r1, #21
 8000c76:	e710      	b.n	8000a9a <__aeabi_dmul+0xc2>
 8000c78:	4652      	mov	r2, sl
 8000c7a:	4332      	orrs	r2, r6
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dmul+0x2a8>
 8000c7e:	e07f      	b.n	8000d80 <__aeabi_dmul+0x3a8>
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dmul+0x2ae>
 8000c84:	e0dc      	b.n	8000e40 <__aeabi_dmul+0x468>
 8000c86:	0030      	movs	r0, r6
 8000c88:	f000 f9c0 	bl	800100c <__clzsi2>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	3a0b      	subs	r2, #11
 8000c90:	231d      	movs	r3, #29
 8000c92:	0001      	movs	r1, r0
 8000c94:	1a9b      	subs	r3, r3, r2
 8000c96:	4652      	mov	r2, sl
 8000c98:	3908      	subs	r1, #8
 8000c9a:	40da      	lsrs	r2, r3
 8000c9c:	408e      	lsls	r6, r1
 8000c9e:	4316      	orrs	r6, r2
 8000ca0:	4652      	mov	r2, sl
 8000ca2:	408a      	lsls	r2, r1
 8000ca4:	9b00      	ldr	r3, [sp, #0]
 8000ca6:	4935      	ldr	r1, [pc, #212]	; (8000d7c <__aeabi_dmul+0x3a4>)
 8000ca8:	1a18      	subs	r0, r3, r0
 8000caa:	0003      	movs	r3, r0
 8000cac:	468c      	mov	ip, r1
 8000cae:	4463      	add	r3, ip
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	e6d3      	b.n	8000a5e <__aeabi_dmul+0x86>
 8000cb6:	0025      	movs	r5, r4
 8000cb8:	4305      	orrs	r5, r0
 8000cba:	d04a      	beq.n	8000d52 <__aeabi_dmul+0x37a>
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dmul+0x2ea>
 8000cc0:	e0b0      	b.n	8000e24 <__aeabi_dmul+0x44c>
 8000cc2:	0020      	movs	r0, r4
 8000cc4:	f000 f9a2 	bl	800100c <__clzsi2>
 8000cc8:	0001      	movs	r1, r0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	390b      	subs	r1, #11
 8000cce:	231d      	movs	r3, #29
 8000cd0:	0010      	movs	r0, r2
 8000cd2:	1a5b      	subs	r3, r3, r1
 8000cd4:	0031      	movs	r1, r6
 8000cd6:	0035      	movs	r5, r6
 8000cd8:	3808      	subs	r0, #8
 8000cda:	4084      	lsls	r4, r0
 8000cdc:	40d9      	lsrs	r1, r3
 8000cde:	4085      	lsls	r5, r0
 8000ce0:	430c      	orrs	r4, r1
 8000ce2:	4826      	ldr	r0, [pc, #152]	; (8000d7c <__aeabi_dmul+0x3a4>)
 8000ce4:	1a83      	subs	r3, r0, r2
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4699      	mov	r9, r3
 8000cec:	469b      	mov	fp, r3
 8000cee:	e697      	b.n	8000a20 <__aeabi_dmul+0x48>
 8000cf0:	0005      	movs	r5, r0
 8000cf2:	4325      	orrs	r5, r4
 8000cf4:	d126      	bne.n	8000d44 <__aeabi_dmul+0x36c>
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	4691      	mov	r9, r2
 8000d00:	469b      	mov	fp, r3
 8000d02:	e68d      	b.n	8000a20 <__aeabi_dmul+0x48>
 8000d04:	4652      	mov	r2, sl
 8000d06:	9b00      	ldr	r3, [sp, #0]
 8000d08:	4332      	orrs	r2, r6
 8000d0a:	d110      	bne.n	8000d2e <__aeabi_dmul+0x356>
 8000d0c:	4915      	ldr	r1, [pc, #84]	; (8000d64 <__aeabi_dmul+0x38c>)
 8000d0e:	2600      	movs	r6, #0
 8000d10:	468c      	mov	ip, r1
 8000d12:	4463      	add	r3, ip
 8000d14:	4649      	mov	r1, r9
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2302      	movs	r3, #2
 8000d1a:	4319      	orrs	r1, r3
 8000d1c:	4689      	mov	r9, r1
 8000d1e:	2002      	movs	r0, #2
 8000d20:	e69d      	b.n	8000a5e <__aeabi_dmul+0x86>
 8000d22:	465b      	mov	r3, fp
 8000d24:	9701      	str	r7, [sp, #4]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d000      	beq.n	8000d2c <__aeabi_dmul+0x354>
 8000d2a:	e6ad      	b.n	8000a88 <__aeabi_dmul+0xb0>
 8000d2c:	e6c3      	b.n	8000ab6 <__aeabi_dmul+0xde>
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <__aeabi_dmul+0x38c>)
 8000d30:	2003      	movs	r0, #3
 8000d32:	4694      	mov	ip, r2
 8000d34:	4463      	add	r3, ip
 8000d36:	464a      	mov	r2, r9
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	4691      	mov	r9, r2
 8000d40:	4652      	mov	r2, sl
 8000d42:	e68c      	b.n	8000a5e <__aeabi_dmul+0x86>
 8000d44:	220c      	movs	r2, #12
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2303      	movs	r3, #3
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	469b      	mov	fp, r3
 8000d50:	e666      	b.n	8000a20 <__aeabi_dmul+0x48>
 8000d52:	2304      	movs	r3, #4
 8000d54:	4699      	mov	r9, r3
 8000d56:	2300      	movs	r3, #0
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	2400      	movs	r4, #0
 8000d5e:	469b      	mov	fp, r3
 8000d60:	e65e      	b.n	8000a20 <__aeabi_dmul+0x48>
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	000007ff 	.word	0x000007ff
 8000d68:	fffffc01 	.word	0xfffffc01
 8000d6c:	08004998 	.word	0x08004998
 8000d70:	000003ff 	.word	0x000003ff
 8000d74:	feffffff 	.word	0xfeffffff
 8000d78:	000007fe 	.word	0x000007fe
 8000d7c:	fffffc0d 	.word	0xfffffc0d
 8000d80:	4649      	mov	r1, r9
 8000d82:	2301      	movs	r3, #1
 8000d84:	4319      	orrs	r1, r3
 8000d86:	4689      	mov	r9, r1
 8000d88:	2600      	movs	r6, #0
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	e667      	b.n	8000a5e <__aeabi_dmul+0x86>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2480      	movs	r4, #128	; 0x80
 8000d92:	2500      	movs	r5, #0
 8000d94:	4a43      	ldr	r2, [pc, #268]	; (8000ea4 <__aeabi_dmul+0x4cc>)
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	0324      	lsls	r4, r4, #12
 8000d9a:	e67e      	b.n	8000a9a <__aeabi_dmul+0xc2>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	1a40      	subs	r0, r0, r1
 8000da0:	2838      	cmp	r0, #56	; 0x38
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_dmul+0x3ce>
 8000da4:	e676      	b.n	8000a94 <__aeabi_dmul+0xbc>
 8000da6:	281f      	cmp	r0, #31
 8000da8:	dd5b      	ble.n	8000e62 <__aeabi_dmul+0x48a>
 8000daa:	221f      	movs	r2, #31
 8000dac:	0023      	movs	r3, r4
 8000dae:	4252      	negs	r2, r2
 8000db0:	1a51      	subs	r1, r2, r1
 8000db2:	40cb      	lsrs	r3, r1
 8000db4:	0019      	movs	r1, r3
 8000db6:	2820      	cmp	r0, #32
 8000db8:	d003      	beq.n	8000dc2 <__aeabi_dmul+0x3ea>
 8000dba:	4a3b      	ldr	r2, [pc, #236]	; (8000ea8 <__aeabi_dmul+0x4d0>)
 8000dbc:	4462      	add	r2, ip
 8000dbe:	4094      	lsls	r4, r2
 8000dc0:	4325      	orrs	r5, r4
 8000dc2:	1e6a      	subs	r2, r5, #1
 8000dc4:	4195      	sbcs	r5, r2
 8000dc6:	002a      	movs	r2, r5
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	2107      	movs	r1, #7
 8000dcc:	000d      	movs	r5, r1
 8000dce:	2400      	movs	r4, #0
 8000dd0:	4015      	ands	r5, r2
 8000dd2:	4211      	tst	r1, r2
 8000dd4:	d05b      	beq.n	8000e8e <__aeabi_dmul+0x4b6>
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	2400      	movs	r4, #0
 8000dda:	4011      	ands	r1, r2
 8000ddc:	2904      	cmp	r1, #4
 8000dde:	d053      	beq.n	8000e88 <__aeabi_dmul+0x4b0>
 8000de0:	1d11      	adds	r1, r2, #4
 8000de2:	4291      	cmp	r1, r2
 8000de4:	4192      	sbcs	r2, r2
 8000de6:	4252      	negs	r2, r2
 8000de8:	18a4      	adds	r4, r4, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	0223      	lsls	r3, r4, #8
 8000dee:	d54b      	bpl.n	8000e88 <__aeabi_dmul+0x4b0>
 8000df0:	2201      	movs	r2, #1
 8000df2:	2400      	movs	r4, #0
 8000df4:	2500      	movs	r5, #0
 8000df6:	e650      	b.n	8000a9a <__aeabi_dmul+0xc2>
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	031b      	lsls	r3, r3, #12
 8000dfc:	421c      	tst	r4, r3
 8000dfe:	d009      	beq.n	8000e14 <__aeabi_dmul+0x43c>
 8000e00:	421e      	tst	r6, r3
 8000e02:	d107      	bne.n	8000e14 <__aeabi_dmul+0x43c>
 8000e04:	4333      	orrs	r3, r6
 8000e06:	031c      	lsls	r4, r3, #12
 8000e08:	4643      	mov	r3, r8
 8000e0a:	0015      	movs	r5, r2
 8000e0c:	0b24      	lsrs	r4, r4, #12
 8000e0e:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <__aeabi_dmul+0x4cc>)
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	e642      	b.n	8000a9a <__aeabi_dmul+0xc2>
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0312      	lsls	r2, r2, #12
 8000e18:	4314      	orrs	r4, r2
 8000e1a:	0324      	lsls	r4, r4, #12
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <__aeabi_dmul+0x4cc>)
 8000e1e:	0b24      	lsrs	r4, r4, #12
 8000e20:	9701      	str	r7, [sp, #4]
 8000e22:	e63a      	b.n	8000a9a <__aeabi_dmul+0xc2>
 8000e24:	f000 f8f2 	bl	800100c <__clzsi2>
 8000e28:	0001      	movs	r1, r0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	3115      	adds	r1, #21
 8000e2e:	3220      	adds	r2, #32
 8000e30:	291c      	cmp	r1, #28
 8000e32:	dc00      	bgt.n	8000e36 <__aeabi_dmul+0x45e>
 8000e34:	e74b      	b.n	8000cce <__aeabi_dmul+0x2f6>
 8000e36:	0034      	movs	r4, r6
 8000e38:	3808      	subs	r0, #8
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	4084      	lsls	r4, r0
 8000e3e:	e750      	b.n	8000ce2 <__aeabi_dmul+0x30a>
 8000e40:	f000 f8e4 	bl	800100c <__clzsi2>
 8000e44:	0003      	movs	r3, r0
 8000e46:	001a      	movs	r2, r3
 8000e48:	3215      	adds	r2, #21
 8000e4a:	3020      	adds	r0, #32
 8000e4c:	2a1c      	cmp	r2, #28
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_dmul+0x47a>
 8000e50:	e71e      	b.n	8000c90 <__aeabi_dmul+0x2b8>
 8000e52:	4656      	mov	r6, sl
 8000e54:	3b08      	subs	r3, #8
 8000e56:	2200      	movs	r2, #0
 8000e58:	409e      	lsls	r6, r3
 8000e5a:	e723      	b.n	8000ca4 <__aeabi_dmul+0x2cc>
 8000e5c:	9b00      	ldr	r3, [sp, #0]
 8000e5e:	469c      	mov	ip, r3
 8000e60:	e6e6      	b.n	8000c30 <__aeabi_dmul+0x258>
 8000e62:	4912      	ldr	r1, [pc, #72]	; (8000eac <__aeabi_dmul+0x4d4>)
 8000e64:	0022      	movs	r2, r4
 8000e66:	4461      	add	r1, ip
 8000e68:	002e      	movs	r6, r5
 8000e6a:	408d      	lsls	r5, r1
 8000e6c:	408a      	lsls	r2, r1
 8000e6e:	40c6      	lsrs	r6, r0
 8000e70:	1e69      	subs	r1, r5, #1
 8000e72:	418d      	sbcs	r5, r1
 8000e74:	4332      	orrs	r2, r6
 8000e76:	432a      	orrs	r2, r5
 8000e78:	40c4      	lsrs	r4, r0
 8000e7a:	0753      	lsls	r3, r2, #29
 8000e7c:	d0b6      	beq.n	8000dec <__aeabi_dmul+0x414>
 8000e7e:	210f      	movs	r1, #15
 8000e80:	4011      	ands	r1, r2
 8000e82:	2904      	cmp	r1, #4
 8000e84:	d1ac      	bne.n	8000de0 <__aeabi_dmul+0x408>
 8000e86:	e7b1      	b.n	8000dec <__aeabi_dmul+0x414>
 8000e88:	0765      	lsls	r5, r4, #29
 8000e8a:	0264      	lsls	r4, r4, #9
 8000e8c:	0b24      	lsrs	r4, r4, #12
 8000e8e:	08d2      	lsrs	r2, r2, #3
 8000e90:	4315      	orrs	r5, r2
 8000e92:	2200      	movs	r2, #0
 8000e94:	e601      	b.n	8000a9a <__aeabi_dmul+0xc2>
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	0312      	lsls	r2, r2, #12
 8000e9a:	4314      	orrs	r4, r2
 8000e9c:	0324      	lsls	r4, r4, #12
 8000e9e:	4a01      	ldr	r2, [pc, #4]	; (8000ea4 <__aeabi_dmul+0x4cc>)
 8000ea0:	0b24      	lsrs	r4, r4, #12
 8000ea2:	e5fa      	b.n	8000a9a <__aeabi_dmul+0xc2>
 8000ea4:	000007ff 	.word	0x000007ff
 8000ea8:	0000043e 	.word	0x0000043e
 8000eac:	0000041e 	.word	0x0000041e

08000eb0 <__aeabi_ui2d>:
 8000eb0:	b510      	push	{r4, lr}
 8000eb2:	1e04      	subs	r4, r0, #0
 8000eb4:	d010      	beq.n	8000ed8 <__aeabi_ui2d+0x28>
 8000eb6:	f000 f8a9 	bl	800100c <__clzsi2>
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <__aeabi_ui2d+0x48>)
 8000ebc:	1a1b      	subs	r3, r3, r0
 8000ebe:	280a      	cmp	r0, #10
 8000ec0:	dc11      	bgt.n	8000ee6 <__aeabi_ui2d+0x36>
 8000ec2:	220b      	movs	r2, #11
 8000ec4:	0021      	movs	r1, r4
 8000ec6:	1a12      	subs	r2, r2, r0
 8000ec8:	40d1      	lsrs	r1, r2
 8000eca:	3015      	adds	r0, #21
 8000ecc:	030a      	lsls	r2, r1, #12
 8000ece:	055b      	lsls	r3, r3, #21
 8000ed0:	4084      	lsls	r4, r0
 8000ed2:	0b12      	lsrs	r2, r2, #12
 8000ed4:	0d5b      	lsrs	r3, r3, #21
 8000ed6:	e001      	b.n	8000edc <__aeabi_ui2d+0x2c>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2200      	movs	r2, #0
 8000edc:	051b      	lsls	r3, r3, #20
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	0020      	movs	r0, r4
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	bd10      	pop	{r4, pc}
 8000ee6:	0022      	movs	r2, r4
 8000ee8:	380b      	subs	r0, #11
 8000eea:	4082      	lsls	r2, r0
 8000eec:	055b      	lsls	r3, r3, #21
 8000eee:	0312      	lsls	r2, r2, #12
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	0b12      	lsrs	r2, r2, #12
 8000ef4:	0d5b      	lsrs	r3, r3, #21
 8000ef6:	e7f1      	b.n	8000edc <__aeabi_ui2d+0x2c>
 8000ef8:	0000041e 	.word	0x0000041e

08000efc <__aeabi_d2f>:
 8000efc:	0002      	movs	r2, r0
 8000efe:	004b      	lsls	r3, r1, #1
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	0d5b      	lsrs	r3, r3, #21
 8000f04:	030c      	lsls	r4, r1, #12
 8000f06:	4e3d      	ldr	r6, [pc, #244]	; (8000ffc <__aeabi_d2f+0x100>)
 8000f08:	0a64      	lsrs	r4, r4, #9
 8000f0a:	0f40      	lsrs	r0, r0, #29
 8000f0c:	1c5f      	adds	r7, r3, #1
 8000f0e:	0fc9      	lsrs	r1, r1, #31
 8000f10:	4304      	orrs	r4, r0
 8000f12:	00d5      	lsls	r5, r2, #3
 8000f14:	4237      	tst	r7, r6
 8000f16:	d00a      	beq.n	8000f2e <__aeabi_d2f+0x32>
 8000f18:	4839      	ldr	r0, [pc, #228]	; (8001000 <__aeabi_d2f+0x104>)
 8000f1a:	181e      	adds	r6, r3, r0
 8000f1c:	2efe      	cmp	r6, #254	; 0xfe
 8000f1e:	dd16      	ble.n	8000f4e <__aeabi_d2f+0x52>
 8000f20:	20ff      	movs	r0, #255	; 0xff
 8000f22:	2400      	movs	r4, #0
 8000f24:	05c0      	lsls	r0, r0, #23
 8000f26:	4320      	orrs	r0, r4
 8000f28:	07c9      	lsls	r1, r1, #31
 8000f2a:	4308      	orrs	r0, r1
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d106      	bne.n	8000f40 <__aeabi_d2f+0x44>
 8000f32:	432c      	orrs	r4, r5
 8000f34:	d026      	beq.n	8000f84 <__aeabi_d2f+0x88>
 8000f36:	2205      	movs	r2, #5
 8000f38:	0192      	lsls	r2, r2, #6
 8000f3a:	0a54      	lsrs	r4, r2, #9
 8000f3c:	b2d8      	uxtb	r0, r3
 8000f3e:	e7f1      	b.n	8000f24 <__aeabi_d2f+0x28>
 8000f40:	4325      	orrs	r5, r4
 8000f42:	d0ed      	beq.n	8000f20 <__aeabi_d2f+0x24>
 8000f44:	2080      	movs	r0, #128	; 0x80
 8000f46:	03c0      	lsls	r0, r0, #15
 8000f48:	4304      	orrs	r4, r0
 8000f4a:	20ff      	movs	r0, #255	; 0xff
 8000f4c:	e7ea      	b.n	8000f24 <__aeabi_d2f+0x28>
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	dd1b      	ble.n	8000f8a <__aeabi_d2f+0x8e>
 8000f52:	0192      	lsls	r2, r2, #6
 8000f54:	1e53      	subs	r3, r2, #1
 8000f56:	419a      	sbcs	r2, r3
 8000f58:	00e4      	lsls	r4, r4, #3
 8000f5a:	0f6d      	lsrs	r5, r5, #29
 8000f5c:	4322      	orrs	r2, r4
 8000f5e:	432a      	orrs	r2, r5
 8000f60:	0753      	lsls	r3, r2, #29
 8000f62:	d048      	beq.n	8000ff6 <__aeabi_d2f+0xfa>
 8000f64:	230f      	movs	r3, #15
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_d2f+0x72>
 8000f6c:	3204      	adds	r2, #4
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	04db      	lsls	r3, r3, #19
 8000f72:	4013      	ands	r3, r2
 8000f74:	d03f      	beq.n	8000ff6 <__aeabi_d2f+0xfa>
 8000f76:	1c70      	adds	r0, r6, #1
 8000f78:	2efe      	cmp	r6, #254	; 0xfe
 8000f7a:	d0d1      	beq.n	8000f20 <__aeabi_d2f+0x24>
 8000f7c:	0192      	lsls	r2, r2, #6
 8000f7e:	0a54      	lsrs	r4, r2, #9
 8000f80:	b2c0      	uxtb	r0, r0
 8000f82:	e7cf      	b.n	8000f24 <__aeabi_d2f+0x28>
 8000f84:	2000      	movs	r0, #0
 8000f86:	2400      	movs	r4, #0
 8000f88:	e7cc      	b.n	8000f24 <__aeabi_d2f+0x28>
 8000f8a:	0032      	movs	r2, r6
 8000f8c:	3217      	adds	r2, #23
 8000f8e:	db22      	blt.n	8000fd6 <__aeabi_d2f+0xda>
 8000f90:	2080      	movs	r0, #128	; 0x80
 8000f92:	0400      	lsls	r0, r0, #16
 8000f94:	4320      	orrs	r0, r4
 8000f96:	241e      	movs	r4, #30
 8000f98:	1ba4      	subs	r4, r4, r6
 8000f9a:	2c1f      	cmp	r4, #31
 8000f9c:	dd1d      	ble.n	8000fda <__aeabi_d2f+0xde>
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4252      	negs	r2, r2
 8000fa2:	1b96      	subs	r6, r2, r6
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	0016      	movs	r6, r2
 8000faa:	2c20      	cmp	r4, #32
 8000fac:	d004      	beq.n	8000fb8 <__aeabi_d2f+0xbc>
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <__aeabi_d2f+0x108>)
 8000fb0:	4694      	mov	ip, r2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	4098      	lsls	r0, r3
 8000fb6:	4305      	orrs	r5, r0
 8000fb8:	002a      	movs	r2, r5
 8000fba:	1e53      	subs	r3, r2, #1
 8000fbc:	419a      	sbcs	r2, r3
 8000fbe:	4332      	orrs	r2, r6
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	0753      	lsls	r3, r2, #29
 8000fc4:	d1ce      	bne.n	8000f64 <__aeabi_d2f+0x68>
 8000fc6:	2480      	movs	r4, #128	; 0x80
 8000fc8:	0013      	movs	r3, r2
 8000fca:	04e4      	lsls	r4, r4, #19
 8000fcc:	2001      	movs	r0, #1
 8000fce:	4023      	ands	r3, r4
 8000fd0:	4222      	tst	r2, r4
 8000fd2:	d1d3      	bne.n	8000f7c <__aeabi_d2f+0x80>
 8000fd4:	e7b0      	b.n	8000f38 <__aeabi_d2f+0x3c>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e7ad      	b.n	8000f36 <__aeabi_d2f+0x3a>
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <__aeabi_d2f+0x10c>)
 8000fdc:	4694      	mov	ip, r2
 8000fde:	002a      	movs	r2, r5
 8000fe0:	40e2      	lsrs	r2, r4
 8000fe2:	0014      	movs	r4, r2
 8000fe4:	002a      	movs	r2, r5
 8000fe6:	4463      	add	r3, ip
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	4098      	lsls	r0, r3
 8000fec:	1e55      	subs	r5, r2, #1
 8000fee:	41aa      	sbcs	r2, r5
 8000ff0:	4302      	orrs	r2, r0
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	e7e4      	b.n	8000fc0 <__aeabi_d2f+0xc4>
 8000ff6:	0033      	movs	r3, r6
 8000ff8:	e79e      	b.n	8000f38 <__aeabi_d2f+0x3c>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	000007fe 	.word	0x000007fe
 8001000:	fffffc80 	.word	0xfffffc80
 8001004:	fffffca2 	.word	0xfffffca2
 8001008:	fffffc82 	.word	0xfffffc82

0800100c <__clzsi2>:
 800100c:	211c      	movs	r1, #28
 800100e:	2301      	movs	r3, #1
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	4298      	cmp	r0, r3
 8001014:	d301      	bcc.n	800101a <__clzsi2+0xe>
 8001016:	0c00      	lsrs	r0, r0, #16
 8001018:	3910      	subs	r1, #16
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	4298      	cmp	r0, r3
 800101e:	d301      	bcc.n	8001024 <__clzsi2+0x18>
 8001020:	0a00      	lsrs	r0, r0, #8
 8001022:	3908      	subs	r1, #8
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	4298      	cmp	r0, r3
 8001028:	d301      	bcc.n	800102e <__clzsi2+0x22>
 800102a:	0900      	lsrs	r0, r0, #4
 800102c:	3904      	subs	r1, #4
 800102e:	a202      	add	r2, pc, #8	; (adr r2, 8001038 <__clzsi2+0x2c>)
 8001030:	5c10      	ldrb	r0, [r2, r0]
 8001032:	1840      	adds	r0, r0, r1
 8001034:	4770      	bx	lr
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	02020304 	.word	0x02020304
 800103c:	01010101 	.word	0x01010101
	...

08001048 <MaxInit>:

/*
 * Private function definitions
 */

void MaxInit(SPI_HandleTypeDef hspi, ADC_HandleTypeDef hadc, TIM_HandleTypeDef htim) {
 8001048:	b084      	sub	sp, #16
 800104a:	b5b0      	push	{r4, r5, r7, lr}
 800104c:	af00      	add	r7, sp, #0
 800104e:	250c      	movs	r5, #12
 8001050:	1d2c      	adds	r4, r5, #4
 8001052:	19e4      	adds	r4, r4, r7
 8001054:	6020      	str	r0, [r4, #0]
 8001056:	6061      	str	r1, [r4, #4]
 8001058:	60a2      	str	r2, [r4, #8]
 800105a:	60e3      	str	r3, [r4, #12]
	maxspi = &hspi;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MaxInit+0x3c>)
 800105e:	1d2a      	adds	r2, r5, #4
 8001060:	19d2      	adds	r2, r2, r7
 8001062:	601a      	str	r2, [r3, #0]
	maxadc = &hadc;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MaxInit+0x40>)
 8001066:	2270      	movs	r2, #112	; 0x70
 8001068:	3204      	adds	r2, #4
 800106a:	19d2      	adds	r2, r2, r7
 800106c:	601a      	str	r2, [r3, #0]
	maxtim = &htim;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <MaxInit+0x44>)
 8001070:	22d4      	movs	r2, #212	; 0xd4
 8001072:	3204      	adds	r2, #4
 8001074:	19d2      	adds	r2, r2, r7
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bcb0      	pop	{r4, r5, r7}
 800107e:	bc08      	pop	{r3}
 8001080:	b004      	add	sp, #16
 8001082:	4718      	bx	r3
 8001084:	20000038 	.word	0x20000038
 8001088:	2000003c 	.word	0x2000003c
 800108c:	20000040 	.word	0x20000040

08001090 <delay_us>:

void delay_us(uint16_t us) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	0002      	movs	r2, r0
 8001098:	1dbb      	adds	r3, r7, #6
 800109a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(maxtim,0);
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <delay_us+0x34>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(maxtim) < us);
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <delay_us+0x34>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3f7      	bcc.n	80010a8 <delay_us+0x18>
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	20000040 	.word	0x20000040

080010c8 <selectCell>:

// Takes integer and returns 8 bit big endian selection
uint8_t selectCell(uint8_t cellNum) {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	701a      	strb	r2, [r3, #0]
	uint8_t clone0 = cellNum >> 2;
 80010d4:	200f      	movs	r0, #15
 80010d6:	183b      	adds	r3, r7, r0
 80010d8:	1dfa      	adds	r2, r7, #7
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	0892      	lsrs	r2, r2, #2
 80010de:	701a      	strb	r2, [r3, #0]
	uint8_t clone2 = (cellNum << 2) & 0x4;
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	240e      	movs	r4, #14
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2104      	movs	r1, #4
 80010ee:	400a      	ands	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
	uint8_t return_cell = (cellNum & 0x2)| clone0 | clone2;
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	2202      	movs	r2, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	183b      	adds	r3, r7, r0
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b25b      	sxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b25a      	sxtb	r2, r3
 8001108:	193b      	adds	r3, r7, r4
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b25a      	sxtb	r2, r3
 8001112:	210d      	movs	r1, #13
 8001114:	187b      	adds	r3, r7, r1
 8001116:	701a      	strb	r2, [r3, #0]
	return return_cell;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b005      	add	sp, #20
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <MaxSampleCharges>:
	*config = 0;
	HAL_SPI_Transmit(maxspi, u1_buffer_in, BYTE_COUNT, SPI_TIMEOUT);

}

void MaxSampleCharges() {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	//Empty transmission buffer and start sample phase
	*balanceLower = 0;
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <MaxSampleCharges+0x178>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
	*balanceUpper = 0;
 8001132:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <MaxSampleCharges+0x17c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	*config = 0;
 800113a:	4b5a      	ldr	r3, [pc, #360]	; (80012a4 <MaxSampleCharges+0x180>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(maxspi, u1_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 8001142:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <MaxSampleCharges+0x184>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	4959      	ldr	r1, [pc, #356]	; (80012ac <MaxSampleCharges+0x188>)
 8001148:	2332      	movs	r3, #50	; 0x32
 800114a:	2203      	movs	r2, #3
 800114c:	f002 fd72 	bl	8003c34 <HAL_SPI_Transmit>

	//wait for sample phase to complete, at least 40 ms
	HAL_Delay(SAMPLE_DELAY);
 8001150:	202d      	movs	r0, #45	; 0x2d
 8001152:	f000 fd23 	bl	8001b9c <HAL_Delay>

	//start hold phase
	*config = SMPLB_HIGH;
 8001156:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <MaxSampleCharges+0x180>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2204      	movs	r2, #4
 800115c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(maxspi, u1_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 800115e:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <MaxSampleCharges+0x184>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	4952      	ldr	r1, [pc, #328]	; (80012ac <MaxSampleCharges+0x188>)
 8001164:	2332      	movs	r3, #50	; 0x32
 8001166:	2203      	movs	r2, #3
 8001168:	f002 fd64 	bl	8003c34 <HAL_SPI_Transmit>

	//wait for sample cap voltages to shift to ground reference, at least 50.5 us
	delay_us(HOLD_DELAY + LEVEL_SHIFT_DELAY);
 800116c:	2038      	movs	r0, #56	; 0x38
 800116e:	f7ff ff8f 	bl	8001090 <delay_us>
	//HAL_Delay(10);
	*balanceLower = 0;
 8001172:	4b4a      	ldr	r3, [pc, #296]	; (800129c <MaxSampleCharges+0x178>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
	*balanceUpper = 0;
 800117a:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <MaxSampleCharges+0x17c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]

	//Measure voltage of every set of cells
	for (int i = 0; i < 8; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	e080      	b.n	800128a <MaxSampleCharges+0x166>

		// Reset config register to only ECS_HIGH
		*config = ECS_HIGH;
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <MaxSampleCharges+0x180>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	701a      	strb	r2, [r3, #0]

		// Select desired cell
		*config |= selectCell(i);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ff97 	bl	80010c8 <selectCell>
 800119a:	0003      	movs	r3, r0
 800119c:	0019      	movs	r1, r3
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <MaxSampleCharges+0x180>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <MaxSampleCharges+0x180>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]

		//tell MAX14920 to measure voltage of cell i
		HAL_SPI_Transmit(maxspi, u1_buffer_in, BYTE_COUNT, SPI_TIMEOUT);
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <MaxSampleCharges+0x184>)
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	493e      	ldr	r1, [pc, #248]	; (80012ac <MaxSampleCharges+0x188>)
 80011b4:	2332      	movs	r3, #50	; 0x32
 80011b6:	2203      	movs	r2, #3
 80011b8:	f002 fd3c 	bl	8003c34 <HAL_SPI_Transmit>

		//Time delay to allow voltage measurement to settle.
		//According to MAX14920 datasheet, we should have a delay of over 5us.
		//Reading from ADC takes a few microseconds anyways.
		delay_us(6);
 80011bc:	2006      	movs	r0, #6
 80011be:	f7ff ff67 	bl	8001090 <delay_us>
		//HAL_Delay(10);

		//read voltage of cell i from ADC
		ADC_Select_CH7();
 80011c2:	f000 f883 	bl	80012cc <ADC_Select_CH7>
		HAL_ADC_Start(maxadc);
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <MaxSampleCharges+0x18c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f001 f81c 	bl	8002208 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(maxadc, ADC_TIMEOUT);
 80011d0:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <MaxSampleCharges+0x18c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2105      	movs	r1, #5
 80011d6:	0018      	movs	r0, r3
 80011d8:	f001 f8a0 	bl	800231c <HAL_ADC_PollForConversion>
		cell_voltages[i] = HAL_ADC_GetValue(maxadc) / 4096.0 * 15100 / 10000;
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <MaxSampleCharges+0x18c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f001 f92f 	bl	8002444 <HAL_ADC_GetValue>
 80011e6:	0003      	movs	r3, r0
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fe61 	bl	8000eb0 <__aeabi_ui2d>
 80011ee:	2200      	movs	r2, #0
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <MaxSampleCharges+0x190>)
 80011f2:	f7ff f8fb 	bl	80003ec <__aeabi_ddiv>
 80011f6:	0002      	movs	r2, r0
 80011f8:	000b      	movs	r3, r1
 80011fa:	0010      	movs	r0, r2
 80011fc:	0019      	movs	r1, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MaxSampleCharges+0x194>)
 8001202:	f7ff fbe9 	bl	80009d8 <__aeabi_dmul>
 8001206:	0002      	movs	r2, r0
 8001208:	000b      	movs	r3, r1
 800120a:	0010      	movs	r0, r2
 800120c:	0019      	movs	r1, r3
 800120e:	2200      	movs	r2, #0
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <MaxSampleCharges+0x198>)
 8001212:	f7ff f8eb 	bl	80003ec <__aeabi_ddiv>
 8001216:	0002      	movs	r2, r0
 8001218:	000b      	movs	r3, r1
 800121a:	0010      	movs	r0, r2
 800121c:	0019      	movs	r1, r3
 800121e:	f7ff fe6d 	bl	8000efc <__aeabi_d2f>
 8001222:	1c01      	adds	r1, r0, #0
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <MaxSampleCharges+0x19c>)
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	50d1      	str	r1, [r2, r3]
		HAL_ADC_Stop(maxadc);
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <MaxSampleCharges+0x18c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0018      	movs	r0, r3
 8001232:	f001 f837 	bl	80022a4 <HAL_ADC_Stop>
		if (cell_voltages[i] > cell_voltages[highest_cell]) {
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MaxSampleCharges+0x19c>)
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	58d0      	ldr	r0, [r2, r3]
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MaxSampleCharges+0x1a0>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	001a      	movs	r2, r3
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MaxSampleCharges+0x19c>)
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	58d3      	ldr	r3, [r2, r3]
 800124a:	1c19      	adds	r1, r3, #0
 800124c:	f7ff f80a 	bl	8000264 <__aeabi_fcmpgt>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d004      	beq.n	800125e <MaxSampleCharges+0x13a>
			highest_cell = i;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MaxSampleCharges+0x1a0>)
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e012      	b.n	8001284 <MaxSampleCharges+0x160>
		} else if (cell_voltages[i] < cell_voltages[lowest_cell]) {
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MaxSampleCharges+0x19c>)
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	58d0      	ldr	r0, [r2, r3]
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MaxSampleCharges+0x1a4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	001a      	movs	r2, r3
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MaxSampleCharges+0x19c>)
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	58d3      	ldr	r3, [r2, r3]
 8001272:	1c19      	adds	r1, r3, #0
 8001274:	f7fe ffe2 	bl	800023c <__aeabi_fcmplt>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d003      	beq.n	8001284 <MaxSampleCharges+0x160>
			lowest_cell = i;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MaxSampleCharges+0x1a4>)
 8001282:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b07      	cmp	r3, #7
 800128e:	dc00      	bgt.n	8001292 <MaxSampleCharges+0x16e>
 8001290:	e77a      	b.n	8001188 <MaxSampleCharges+0x64>
		}
	}
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000004 	.word	0x20000004
 80012a0:	20000008 	.word	0x20000008
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	20000038 	.word	0x20000038
 80012ac:	20000000 	.word	0x20000000
 80012b0:	2000003c 	.word	0x2000003c
 80012b4:	40b00000 	.word	0x40b00000
 80012b8:	40cd7e00 	.word	0x40cd7e00
 80012bc:	40c38800 	.word	0x40c38800
 80012c0:	20000044 	.word	0x20000044
 80012c4:	20000065 	.word	0x20000065
 80012c8:	20000064 	.word	0x20000064

080012cc <ADC_Select_CH7>:
	if (HAL_ADC_ConfigChannel(maxadc, &sConfig) != HAL_OK)
	{
	 Error_Handler();
	}
 }
void ADC_Select_CH7(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	0018      	movs	r0, r3
 80012d6:	230c      	movs	r3, #12
 80012d8:	001a      	movs	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f003 fb27 	bl	800492e <memset>
	sConfig.Channel = ADC_CHANNEL_7;
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <ADC_Select_CH7+0x40>)
 80012e4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2208      	movs	r2, #8
 80012ea:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(maxadc, &sConfig) != HAL_OK)
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <ADC_Select_CH7+0x44>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	1d3a      	adds	r2, r7, #4
 80012f2:	0011      	movs	r1, r2
 80012f4:	0018      	movs	r0, r3
 80012f6:	f001 f8b1 	bl	800245c <HAL_ADC_ConfigChannel>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d001      	beq.n	8001302 <ADC_Select_CH7+0x36>
	{
	Error_Handler();
 80012fe:	f000 f9f7 	bl	80016f0 <Error_Handler>
	}
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	1c000080 	.word	0x1c000080
 8001310:	2000003c 	.word	0x2000003c

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b0c3      	sub	sp, #268	; 0x10c
 8001318:	af42      	add	r7, sp, #264	; 0x108
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f000 fbb9 	bl	8001a90 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f839 	bl	8001394 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 f9a1 	bl	8001668 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001326:	f000 f87d 	bl	8001424 <MX_ADC1_Init>
  MX_TIM14_Init();
 800132a:	f000 f947 	bl	80015bc <MX_TIM14_Init>
  MX_SPI1_Init();
 800132e:	f000 f8cd 	bl	80014cc <MX_SPI1_Init>
  MX_SPI2_Init();
 8001332:	f000 f909 	bl	8001548 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MaxInit(hspi1,hadc1,htim14);	// Pass peripheral pointers to MAX module
 8001336:	4c14      	ldr	r4, [pc, #80]	; (8001388 <main+0x74>)
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <main+0x78>)
 800133a:	23b8      	movs	r3, #184	; 0xb8
 800133c:	446b      	add	r3, sp
 800133e:	0018      	movs	r0, r3
 8001340:	0011      	movs	r1, r2
 8001342:	234c      	movs	r3, #76	; 0x4c
 8001344:	001a      	movs	r2, r3
 8001346:	f003 fae9 	bl	800491c <memcpy>
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <main+0x7c>)
 800134c:	2354      	movs	r3, #84	; 0x54
 800134e:	446b      	add	r3, sp
 8001350:	0018      	movs	r0, r3
 8001352:	0011      	movs	r1, r2
 8001354:	2364      	movs	r3, #100	; 0x64
 8001356:	001a      	movs	r2, r3
 8001358:	f003 fae0 	bl	800491c <memcpy>
 800135c:	466b      	mov	r3, sp
 800135e:	0018      	movs	r0, r3
 8001360:	0023      	movs	r3, r4
 8001362:	3310      	adds	r3, #16
 8001364:	2254      	movs	r2, #84	; 0x54
 8001366:	0019      	movs	r1, r3
 8001368:	f003 fad8 	bl	800491c <memcpy>
 800136c:	6820      	ldr	r0, [r4, #0]
 800136e:	6861      	ldr	r1, [r4, #4]
 8001370:	68a2      	ldr	r2, [r4, #8]
 8001372:	68e3      	ldr	r3, [r4, #12]
 8001374:	f7ff fe68 	bl	8001048 <MaxInit>
  HAL_TIM_Base_Start(&htim14);	// Start hardware timer
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <main+0x78>)
 800137a:	0018      	movs	r0, r3
 800137c:	f002 ff80 	bl	8004280 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
    /* USER CODE END WHILE */
	  MaxSampleCharges();
 8001380:	f7ff fed0 	bl	8001124 <MaxSampleCharges>
 8001384:	e7fc      	b.n	8001380 <main+0x6c>
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	200000cc 	.word	0x200000cc
 800138c:	20000194 	.word	0x20000194
 8001390:	20000068 	.word	0x20000068

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b093      	sub	sp, #76	; 0x4c
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	2414      	movs	r4, #20
 800139c:	193b      	adds	r3, r7, r4
 800139e:	0018      	movs	r0, r3
 80013a0:	2334      	movs	r3, #52	; 0x34
 80013a2:	001a      	movs	r2, r3
 80013a4:	2100      	movs	r1, #0
 80013a6:	f003 fac2 	bl	800492e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	0018      	movs	r0, r3
 80013ae:	2310      	movs	r3, #16
 80013b0:	001a      	movs	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	f003 fabb 	bl	800492e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	0018      	movs	r0, r3
 80013be:	f001 fd81 	bl	8002ec4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c2:	193b      	adds	r3, r7, r4
 80013c4:	2202      	movs	r2, #2
 80013c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	0052      	lsls	r2, r2, #1
 80013ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80013d0:	193b      	adds	r3, r7, r4
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	2240      	movs	r2, #64	; 0x40
 80013da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 fdad 	bl	8002f44 <HAL_RCC_OscConfig>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80013ee:	f000 f97f 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2100      	movs	r1, #0
 800140e:	0018      	movs	r0, r3
 8001410:	f002 f8a8 	bl	8003564 <HAL_RCC_ClockConfig>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001418:	f000 f96a 	bl	80016f0 <Error_Handler>
  }
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b013      	add	sp, #76	; 0x4c
 8001422:	bd90      	pop	{r4, r7, pc}

08001424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	0018      	movs	r0, r3
 800142e:	230c      	movs	r3, #12
 8001430:	001a      	movs	r2, r3
 8001432:	2100      	movs	r1, #0
 8001434:	f003 fa7b 	bl	800492e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_ADC1_Init+0xa0>)
 800143a:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <MX_ADC1_Init+0xa4>)
 800143c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	0612      	lsls	r2, r2, #24
 8001444:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_ADC1_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	0392      	lsls	r2, r2, #14
 8001458:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_ADC1_Init+0xa0>)
 800145c:	2204      	movs	r2, #4
 800145e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001462:	2200      	movs	r2, #0
 8001464:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001468:	2200      	movs	r2, #0
 800146a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_ADC1_Init+0xa0>)
 800146e:	2201      	movs	r2, #1
 8001470:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001474:	2203      	movs	r2, #3
 8001476:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_ADC1_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001486:	222c      	movs	r2, #44	; 0x2c
 8001488:	2100      	movs	r1, #0
 800148a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <MX_ADC1_Init+0xa0>)
 800148e:	2200      	movs	r2, #0
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_ADC1_Init+0xa0>)
 8001494:	2200      	movs	r2, #0
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_ADC1_Init+0xa0>)
 800149a:	2200      	movs	r2, #0
 800149c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_ADC1_Init+0xa0>)
 80014a0:	223c      	movs	r2, #60	; 0x3c
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_ADC1_Init+0xa0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <MX_ADC1_Init+0xa0>)
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fd02 	bl	8001eb8 <HAL_ADC_Init>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014b8:	f000 f91a 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000068 	.word	0x20000068
 80014c8:	40012400 	.word	0x40012400

080014cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_SPI1_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <MX_SPI1_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_SPI1_Init+0x74>)
 80014d8:	2282      	movs	r2, #130	; 0x82
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_SPI1_Init+0x74>)
 80014e6:	22e0      	movs	r2, #224	; 0xe0
 80014e8:	00d2      	lsls	r2, r2, #3
 80014ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_SPI1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_SPI1_Init+0x74>)
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_SPI1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_SPI1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_SPI1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_SPI1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_SPI1_Init+0x74>)
 800151a:	2207      	movs	r2, #7
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_SPI1_Init+0x74>)
 8001526:	2208      	movs	r2, #8
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <MX_SPI1_Init+0x74>)
 800152c:	0018      	movs	r0, r3
 800152e:	f002 fac9 	bl	8003ac4 <HAL_SPI_Init>
 8001532:	1e03      	subs	r3, r0, #0
 8001534:	d001      	beq.n	800153a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001536:	f000 f8db 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000cc 	.word	0x200000cc
 8001544:	40013000 	.word	0x40013000

08001548 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_SPI2_Init+0x6c>)
 800154e:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <MX_SPI2_Init+0x70>)
 8001550:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_SPI2_Init+0x6c>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_SPI2_Init+0x6c>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_SPI2_Init+0x6c>)
 8001560:	22e0      	movs	r2, #224	; 0xe0
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_SPI2_Init+0x6c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_SPI2_Init+0x6c>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_SPI2_Init+0x6c>)
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_SPI2_Init+0x6c>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_SPI2_Init+0x6c>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_SPI2_Init+0x6c>)
 8001588:	2200      	movs	r2, #0
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_SPI2_Init+0x6c>)
 800158e:	2207      	movs	r2, #7
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_SPI2_Init+0x6c>)
 8001594:	2200      	movs	r2, #0
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_SPI2_Init+0x6c>)
 800159a:	2200      	movs	r2, #0
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <MX_SPI2_Init+0x6c>)
 80015a0:	0018      	movs	r0, r3
 80015a2:	f002 fa8f 	bl	8003ac4 <HAL_SPI_Init>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80015aa:	f000 f8a1 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000130 	.word	0x20000130
 80015b8:	40003800 	.word	0x40003800

080015bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80015c2:	003b      	movs	r3, r7
 80015c4:	0018      	movs	r0, r3
 80015c6:	2310      	movs	r3, #16
 80015c8:	001a      	movs	r2, r3
 80015ca:	2100      	movs	r1, #0
 80015cc:	f003 f9af 	bl	800492e <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_TIM14_Init+0xa0>)
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <MX_TIM14_Init+0xa4>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_TIM14_Init+0xa0>)
 80015d8:	220f      	movs	r2, #15
 80015da:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_TIM14_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM14_Init+0xa0>)
 80015e4:	4a1f      	ldr	r2, [pc, #124]	; (8001664 <MX_TIM14_Init+0xa8>)
 80015e6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_TIM14_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_TIM14_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_TIM14_Init+0xa0>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f002 fdea 	bl	80041d0 <HAL_TIM_Base_Init>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001600:	f000 f876 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_TIM14_Init+0xa0>)
 8001606:	0018      	movs	r0, r3
 8001608:	f002 fe80 	bl	800430c <HAL_TIM_IC_Init>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001610:	f000 f86e 	bl	80016f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001614:	003b      	movs	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800161a:	003b      	movs	r3, r7
 800161c:	2201      	movs	r2, #1
 800161e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001620:	003b      	movs	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001626:	003b      	movs	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800162c:	0039      	movs	r1, r7
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_TIM14_Init+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	0018      	movs	r0, r3
 8001634:	f002 feca 	bl	80043cc <HAL_TIM_IC_ConfigChannel>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800163c:	f000 f858 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim14, TIM_TIM14_TI1_MCO, TIM_CHANNEL_1) != HAL_OK)
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_TIM14_Init+0xa0>)
 8001642:	2200      	movs	r2, #0
 8001644:	2103      	movs	r1, #3
 8001646:	0018      	movs	r0, r3
 8001648:	f003 f8ea 	bl	8004820 <HAL_TIMEx_TISelection>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM14_Init+0x98>
  {
    Error_Handler();
 8001650:	f000 f84e 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000194 	.word	0x20000194
 8001660:	40002000 	.word	0x40002000
 8001664:	0000ffff 	.word	0x0000ffff

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	240c      	movs	r4, #12
 8001670:	193b      	adds	r3, r7, r4
 8001672:	0018      	movs	r0, r3
 8001674:	2314      	movs	r3, #20
 8001676:	001a      	movs	r2, r3
 8001678:	2100      	movs	r1, #0
 800167a:	f003 f958 	bl	800492e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_GPIO_Init+0x84>)
 8001680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_GPIO_Init+0x84>)
 8001684:	2102      	movs	r1, #2
 8001686:	430a      	orrs	r2, r1
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_GPIO_Init+0x84>)
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_GPIO_Init+0x84>)
 8001698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_GPIO_Init+0x84>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_GPIO_Init+0x84>)
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a6:	2201      	movs	r2, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80016ae:	23a0      	movs	r3, #160	; 0xa0
 80016b0:	05db      	lsls	r3, r3, #23
 80016b2:	2200      	movs	r2, #0
 80016b4:	212e      	movs	r1, #46	; 0x2e
 80016b6:	0018      	movs	r0, r3
 80016b8:	f001 fbe6 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80016bc:	0021      	movs	r1, r4
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	222e      	movs	r2, #46	; 0x2e
 80016c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2201      	movs	r2, #1
 80016c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	187a      	adds	r2, r7, r1
 80016d8:	23a0      	movs	r3, #160	; 0xa0
 80016da:	05db      	lsls	r3, r3, #23
 80016dc:	0011      	movs	r1, r2
 80016de:	0018      	movs	r0, r3
 80016e0:	f001 fa6e 	bl	8002bc0 <HAL_GPIO_Init>

}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b009      	add	sp, #36	; 0x24
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	40021000 	.word	0x40021000

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x44>)
 8001704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_MspInit+0x44>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x44>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2201      	movs	r2, #1
 8001714:	4013      	ands	r3, r2
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x44>)
 800171c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_MspInit+0x44>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0549      	lsls	r1, r1, #21
 8001724:	430a      	orrs	r2, r1
 8001726:	63da      	str	r2, [r3, #60]	; 0x3c
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_MspInit+0x44>)
 800172a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	055b      	lsls	r3, r3, #21
 8001730:	4013      	ands	r3, r2
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b091      	sub	sp, #68	; 0x44
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	232c      	movs	r3, #44	; 0x2c
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	0018      	movs	r0, r3
 8001752:	2314      	movs	r3, #20
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f003 f8e9 	bl	800492e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175c:	2414      	movs	r4, #20
 800175e:	193b      	adds	r3, r7, r4
 8001760:	0018      	movs	r0, r3
 8001762:	2318      	movs	r3, #24
 8001764:	001a      	movs	r2, r3
 8001766:	2100      	movs	r1, #0
 8001768:	f003 f8e1 	bl	800492e <memset>
  if(hadc->Instance==ADC1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <HAL_ADC_MspInit+0xb0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d139      	bne.n	80017ea <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	01d2      	lsls	r2, r2, #7
 800177c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	193b      	adds	r3, r7, r4
 8001786:	0018      	movs	r0, r3
 8001788:	f002 f876 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d001      	beq.n	8001794 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001790:	f7ff ffae 	bl	80016f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_ADC_MspInit+0xb4>)
 8001796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_ADC_MspInit+0xb4>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	0349      	lsls	r1, r1, #13
 800179e:	430a      	orrs	r2, r1
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_ADC_MspInit+0xb4>)
 80017a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	035b      	lsls	r3, r3, #13
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_ADC_MspInit+0xb4>)
 80017b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_ADC_MspInit+0xb4>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	430a      	orrs	r2, r1
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_ADC_MspInit+0xb4>)
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c0:	2201      	movs	r2, #1
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	22c1      	movs	r2, #193	; 0xc1
 80017ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	2203      	movs	r2, #3
 80017d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	187a      	adds	r2, r7, r1
 80017de:	23a0      	movs	r3, #160	; 0xa0
 80017e0:	05db      	lsls	r3, r3, #23
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f001 f9eb 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b011      	add	sp, #68	; 0x44
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	40012400 	.word	0x40012400
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b08f      	sub	sp, #60	; 0x3c
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	2424      	movs	r4, #36	; 0x24
 8001806:	193b      	adds	r3, r7, r4
 8001808:	0018      	movs	r0, r3
 800180a:	2314      	movs	r3, #20
 800180c:	001a      	movs	r2, r3
 800180e:	2100      	movs	r1, #0
 8001810:	f003 f88d 	bl	800492e <memset>
  if(hspi->Instance==SPI1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a66      	ldr	r2, [pc, #408]	; (80019b4 <HAL_SPI_MspInit+0x1b8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d153      	bne.n	80018c6 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181e:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0149      	lsls	r1, r1, #5
 8001828:	430a      	orrs	r2, r1
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
 800182c:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 800182e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	015b      	lsls	r3, r3, #5
 8001834:	4013      	ands	r3, r2
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b5f      	ldr	r3, [pc, #380]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 800183c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183e:	4b5e      	ldr	r3, [pc, #376]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
 8001846:	4b5c      	ldr	r3, [pc, #368]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	2201      	movs	r2, #1
 800184c:	4013      	ands	r3, r2
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001856:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001858:	2102      	movs	r1, #2
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	; 0x34
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001862:	2202      	movs	r2, #2
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800186a:	193b      	adds	r3, r7, r4
 800186c:	22c0      	movs	r2, #192	; 0xc0
 800186e:	0152      	lsls	r2, r2, #5
 8001870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	193b      	adds	r3, r7, r4
 8001874:	2202      	movs	r2, #2
 8001876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	193b      	adds	r3, r7, r4
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001884:	193b      	adds	r3, r7, r4
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	193a      	adds	r2, r7, r4
 800188c:	23a0      	movs	r3, #160	; 0xa0
 800188e:	05db      	lsls	r3, r3, #23
 8001890:	0011      	movs	r1, r2
 8001892:	0018      	movs	r0, r3
 8001894:	f001 f994 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001898:	0021      	movs	r1, r4
 800189a:	187b      	adds	r3, r7, r1
 800189c:	2208      	movs	r2, #8
 800189e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2202      	movs	r2, #2
 80018a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	4a40      	ldr	r2, [pc, #256]	; (80019bc <HAL_SPI_MspInit+0x1c0>)
 80018bc:	0019      	movs	r1, r3
 80018be:	0010      	movs	r0, r2
 80018c0:	f001 f97e 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018c4:	e071      	b.n	80019aa <HAL_SPI_MspInit+0x1ae>
  else if(hspi->Instance==SPI2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <HAL_SPI_MspInit+0x1c4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d16c      	bne.n	80019aa <HAL_SPI_MspInit+0x1ae>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 80018d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	01c9      	lsls	r1, r1, #7
 80018da:	430a      	orrs	r2, r1
 80018dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 80018e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	01db      	lsls	r3, r3, #7
 80018e6:	4013      	ands	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 80018ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f0:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 80018f2:	2102      	movs	r1, #2
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
 80018f8:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	2202      	movs	r2, #2
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 800190a:	2101      	movs	r1, #1
 800190c:	430a      	orrs	r2, r1
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_SPI_MspInit+0x1bc>)
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	2201      	movs	r2, #1
 8001916:	4013      	ands	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_2;
 800191c:	2124      	movs	r1, #36	; 0x24
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2282      	movs	r2, #130	; 0x82
 8001922:	0052      	lsls	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	000c      	movs	r4, r1
 8001928:	193b      	adds	r3, r7, r4
 800192a:	2202      	movs	r2, #2
 800192c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	193b      	adds	r3, r7, r4
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	193b      	adds	r3, r7, r4
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800193a:	193b      	adds	r3, r7, r4
 800193c:	2201      	movs	r2, #1
 800193e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	193b      	adds	r3, r7, r4
 8001942:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <HAL_SPI_MspInit+0x1c0>)
 8001944:	0019      	movs	r1, r3
 8001946:	0010      	movs	r0, r2
 8001948:	f001 f93a 	bl	8002bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800194c:	0021      	movs	r1, r4
 800194e:	187b      	adds	r3, r7, r1
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	000c      	movs	r4, r1
 8001958:	193b      	adds	r3, r7, r4
 800195a:	2202      	movs	r2, #2
 800195c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	193b      	adds	r3, r7, r4
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	193b      	adds	r3, r7, r4
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2205      	movs	r2, #5
 800196e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	193b      	adds	r3, r7, r4
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_SPI_MspInit+0x1c0>)
 8001974:	0019      	movs	r1, r3
 8001976:	0010      	movs	r0, r2
 8001978:	f001 f922 	bl	8002bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800197c:	0021      	movs	r1, r4
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2210      	movs	r2, #16
 8001982:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2202      	movs	r2, #2
 8001988:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	187b      	adds	r3, r7, r1
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8001996:	187b      	adds	r3, r7, r1
 8001998:	2201      	movs	r2, #1
 800199a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	187a      	adds	r2, r7, r1
 800199e:	23a0      	movs	r3, #160	; 0xa0
 80019a0:	05db      	lsls	r3, r3, #23
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f001 f90b 	bl	8002bc0 <HAL_GPIO_Init>
}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b00f      	add	sp, #60	; 0x3c
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40013000 	.word	0x40013000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	50000400 	.word	0x50000400
 80019c0:	40003800 	.word	0x40003800

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_TIM_Base_MspInit+0x38>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10d      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_TIM_Base_MspInit+0x3c>)
 80019d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_TIM_Base_MspInit+0x3c>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0209      	lsls	r1, r1, #8
 80019e0:	430a      	orrs	r2, r1
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_TIM_Base_MspInit+0x3c>)
 80019e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40002000 	.word	0x40002000
 8001a00:	40021000 	.word	0x40021000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a28:	f000 f89c 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a40:	f7ff fff7 	bl	8001a32 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a46:	490d      	ldr	r1, [pc, #52]	; (8001a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <LoopForever+0xe>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a5c:	4c0a      	ldr	r4, [pc, #40]	; (8001a88 <LoopForever+0x16>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a6a:	f002 ff33 	bl	80048d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a6e:	f7ff fc51 	bl	8001314 <main>

08001a72 <LoopForever>:

LoopForever:
  b LoopForever
 8001a72:	e7fe      	b.n	8001a72 <LoopForever>
  ldr   r0, =_estack
 8001a74:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001a80:	08004a20 	.word	0x08004a20
  ldr r2, =_sbss
 8001a84:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001a88:	200001e4 	.word	0x200001e4

08001a8c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_Init+0x3c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_Init+0x3c>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	0049      	lsls	r1, r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f810 	bl	8001ad0 <HAL_InitTick>
 8001ab0:	1e03      	subs	r3, r0, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ab4:	1dfb      	adds	r3, r7, #7
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e001      	b.n	8001ac0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff fe1e 	bl	80016fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	230f      	movs	r3, #15
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_InitTick+0x88>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02b      	beq.n	8001b40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_InitTick+0x8c>)
 8001aea:	681c      	ldr	r4, [r3, #0]
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_InitTick+0x88>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	0019      	movs	r1, r3
 8001af2:	23fa      	movs	r3, #250	; 0xfa
 8001af4:	0098      	lsls	r0, r3, #2
 8001af6:	f7fe fb03 	bl	8000100 <__udivsi3>
 8001afa:	0003      	movs	r3, r0
 8001afc:	0019      	movs	r1, r3
 8001afe:	0020      	movs	r0, r4
 8001b00:	f7fe fafe 	bl	8000100 <__udivsi3>
 8001b04:	0003      	movs	r3, r0
 8001b06:	0018      	movs	r0, r3
 8001b08:	f001 f84d 	bl	8002ba6 <HAL_SYSTICK_Config>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d112      	bne.n	8001b36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d80a      	bhi.n	8001b2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f001 f82c 	bl	8002b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_InitTick+0x90>)
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00d      	b.n	8001b48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e008      	b.n	8001b48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b36:	230f      	movs	r3, #15
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e003      	b.n	8001b48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b005      	add	sp, #20
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	20000018 	.word	0x20000018
 8001b5c:	20000010 	.word	0x20000010
 8001b60:	20000014 	.word	0x20000014

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x1c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x20>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	18d2      	adds	r2, r2, r3
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_IncTick+0x20>)
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	20000018 	.word	0x20000018
 8001b84:	200001e0 	.word	0x200001e0

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <HAL_GetTick+0x10>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	200001e0 	.word	0x200001e0

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	001a      	movs	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	189b      	adds	r3, r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	f7ff ffe0 	bl	8001b88 <HAL_GetTick>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b004      	add	sp, #16
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	20000018 	.word	0x20000018

08001be4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	fe3fffff 	.word	0xfe3fffff

08001c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	23e0      	movs	r3, #224	; 0xe0
 8001c1a:	045b      	lsls	r3, r3, #17
 8001c1c:	4013      	ands	r3, r2
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	2104      	movs	r1, #4
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	2107      	movs	r1, #7
 8001c3e:	4091      	lsls	r1, r2
 8001c40:	000a      	movs	r2, r1
 8001c42:	43d2      	mvns	r2, r2
 8001c44:	401a      	ands	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2104      	movs	r1, #4
 8001c4a:	400b      	ands	r3, r1
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4099      	lsls	r1, r3
 8001c50:	000b      	movs	r3, r1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b004      	add	sp, #16
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	2104      	movs	r1, #4
 8001c72:	400a      	ands	r2, r1
 8001c74:	2107      	movs	r1, #7
 8001c76:	4091      	lsls	r1, r2
 8001c78:	000a      	movs	r2, r1
 8001c7a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2104      	movs	r1, #4
 8001c80:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c82:	40da      	lsrs	r2, r3
 8001c84:	0013      	movs	r3, r2
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	211f      	movs	r1, #31
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	4091      	lsls	r1, r2
 8001cca:	000a      	movs	r2, r1
 8001ccc:	43d2      	mvns	r2, r2
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	4019      	ands	r1, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	201f      	movs	r0, #31
 8001cdc:	4003      	ands	r3, r0
 8001cde:	4099      	lsls	r1, r3
 8001ce0:	000b      	movs	r3, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b004      	add	sp, #16
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	035b      	lsls	r3, r3, #13
 8001d02:	0b5b      	lsrs	r3, r3, #13
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	0352      	lsls	r2, r2, #13
 8001d24:	0b52      	lsrs	r2, r2, #13
 8001d26:	43d2      	mvns	r2, r2
 8001d28:	401a      	ands	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	0212      	lsls	r2, r2, #8
 8001d4c:	43d2      	mvns	r2, r2
 8001d4e:	401a      	ands	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	400b      	ands	r3, r1
 8001d58:	4904      	ldr	r1, [pc, #16]	; (8001d6c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	07ffff00 	.word	0x07ffff00

08001d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	0552      	lsls	r2, r2, #21
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	6fffffe8 	.word	0x6fffffe8

08001d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	055b      	lsls	r3, r3, #21
 8001da8:	401a      	ands	r2, r3
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	055b      	lsls	r3, r3, #21
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d101      	bne.n	8001db6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <LL_ADC_Enable+0x20>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	7fffffe8 	.word	0x7fffffe8

08001de4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <LL_ADC_Disable+0x20>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	2202      	movs	r2, #2
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	7fffffe8 	.word	0x7fffffe8

08001e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2201      	movs	r2, #1
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <LL_ADC_IsEnabled+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_ADC_IsEnabled+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d101      	bne.n	8001e42 <LL_ADC_IsDisableOngoing+0x18>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <LL_ADC_IsDisableOngoing+0x1a>
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <LL_ADC_REG_StartConversion+0x20>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	7fffffe8 	.word	0x7fffffe8

08001e70 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <LL_ADC_REG_StopConversion+0x20>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2210      	movs	r2, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	7fffffe8 	.word	0x7fffffe8

08001e94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d101      	bne.n	8001eac <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b002      	add	sp, #8
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec0:	231f      	movs	r3, #31
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e17f      	b.n	80021de <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10a      	bne.n	8001efc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff fc2b 	bl	8001744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2254      	movs	r2, #84	; 0x54
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff ff49 	bl	8001d98 <LL_ADC_IsInternalRegulatorEnabled>
 8001f06:	1e03      	subs	r3, r0, #0
 8001f08:	d115      	bne.n	8001f36 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7ff ff2e 	bl	8001d70 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f14:	4bb4      	ldr	r3, [pc, #720]	; (80021e8 <HAL_ADC_Init+0x330>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	49b4      	ldr	r1, [pc, #720]	; (80021ec <HAL_ADC_Init+0x334>)
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7fe f8f0 	bl	8000100 <__udivsi3>
 8001f20:	0003      	movs	r3, r0
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f7ff ff2c 	bl	8001d98 <LL_ADC_IsInternalRegulatorEnabled>
 8001f40:	1e03      	subs	r3, r0, #0
 8001f42:	d10f      	bne.n	8001f64 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	2210      	movs	r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	2201      	movs	r2, #1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f5c:	231f      	movs	r3, #31
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff ff93 	bl	8001e94 <LL_ADC_REG_IsConversionOngoing>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	2210      	movs	r2, #16
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d000      	beq.n	8001f7e <HAL_ADC_Init+0xc6>
 8001f7c:	e122      	b.n	80021c4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d000      	beq.n	8001f86 <HAL_ADC_Init+0xce>
 8001f84:	e11e      	b.n	80021c4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a99      	ldr	r2, [pc, #612]	; (80021f0 <HAL_ADC_Init+0x338>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2202      	movs	r2, #2
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff ff34 	bl	8001e08 <LL_ADC_IsEnabled>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d000      	beq.n	8001fa6 <HAL_ADC_Init+0xee>
 8001fa4:	e0ad      	b.n	8002102 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7e1b      	ldrb	r3, [r3, #24]
 8001fae:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001fb0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	7e5b      	ldrb	r3, [r3, #25]
 8001fb6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001fb8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7e9b      	ldrb	r3, [r3, #26]
 8001fbe:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001fc0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_ADC_Init+0x118>
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	015b      	lsls	r3, r3, #5
 8001fce:	e000      	b.n	8001fd2 <HAL_ADC_Init+0x11a>
 8001fd0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001fd2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001fd8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da04      	bge.n	8001fec <HAL_ADC_Init+0x134>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	e001      	b.n	8001ff0 <HAL_ADC_Init+0x138>
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001ff0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	5c5b      	ldrb	r3, [r3, r1]
 8001ff8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ffa:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	5c9b      	ldrb	r3, [r3, r2]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d115      	bne.n	8002038 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7e9b      	ldrb	r3, [r3, #26]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0252      	lsls	r2, r2, #9
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	e00b      	b.n	8002038 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	2220      	movs	r2, #32
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2201      	movs	r2, #1
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002044:	23e0      	movs	r3, #224	; 0xe0
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800204e:	4313      	orrs	r3, r2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_ADC_Init+0x33c>)
 800205e:	4013      	ands	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	430a      	orrs	r2, r1
 800206a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	0f9b      	lsrs	r3, r3, #30
 8002072:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002078:	4313      	orrs	r3, r2
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	223c      	movs	r2, #60	; 0x3c
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d111      	bne.n	80020ae <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	0f9b      	lsrs	r3, r3, #30
 8002090:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002096:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800209c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80020a2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	2201      	movs	r2, #1
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_ADC_Init+0x340>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d018      	beq.n	8002102 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	05db      	lsls	r3, r3, #23
 80020d8:	429a      	cmp	r2, r3
 80020da:	d012      	beq.n	8002102 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d00c      	beq.n	8002102 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80020e8:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HAL_ADC_Init+0x344>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a44      	ldr	r2, [pc, #272]	; (8002200 <HAL_ADC_Init+0x348>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	23f0      	movs	r3, #240	; 0xf0
 80020f8:	039b      	lsls	r3, r3, #14
 80020fa:	401a      	ands	r2, r3
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_ADC_Init+0x344>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	001a      	movs	r2, r3
 800210c:	2100      	movs	r1, #0
 800210e:	f7ff fd8a 	bl	8001c26 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	493a      	ldr	r1, [pc, #232]	; (8002204 <HAL_ADC_Init+0x34c>)
 800211c:	001a      	movs	r2, r3
 800211e:	f7ff fd82 	bl	8001c26 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2110      	movs	r1, #16
 8002136:	4249      	negs	r1, r1
 8002138:	430a      	orrs	r2, r1
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
 800213c:	e018      	b.n	8002170 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	039b      	lsls	r3, r3, #14
 8002146:	429a      	cmp	r2, r3
 8002148:	d112      	bne.n	8002170 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	3b01      	subs	r3, #1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	221c      	movs	r2, #28
 800215a:	4013      	ands	r3, r2
 800215c:	2210      	movs	r2, #16
 800215e:	4252      	negs	r2, r2
 8002160:	409a      	lsls	r2, r3
 8002162:	0011      	movs	r1, r2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2100      	movs	r1, #0
 8002176:	0018      	movs	r0, r3
 8002178:	f7ff fd72 	bl	8001c60 <LL_ADC_GetSamplingTimeCommonChannels>
 800217c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002182:	429a      	cmp	r2, r3
 8002184:	d10b      	bne.n	800219e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	2203      	movs	r2, #3
 8002192:	4393      	bics	r3, r2
 8002194:	2201      	movs	r2, #1
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800219c:	e01c      	b.n	80021d8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	2212      	movs	r2, #18
 80021a4:	4393      	bics	r3, r2
 80021a6:	2210      	movs	r2, #16
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2201      	movs	r2, #1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80021ba:	231f      	movs	r3, #31
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021c2:	e009      	b.n	80021d8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	2210      	movs	r2, #16
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021d0:	231f      	movs	r3, #31
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80021d8:	231f      	movs	r3, #31
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	781b      	ldrb	r3, [r3, #0]
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b008      	add	sp, #32
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	20000010 	.word	0x20000010
 80021ec:	00030d40 	.word	0x00030d40
 80021f0:	fffffefd 	.word	0xfffffefd
 80021f4:	fffe0201 	.word	0xfffe0201
 80021f8:	1ffffc02 	.word	0x1ffffc02
 80021fc:	40012708 	.word	0x40012708
 8002200:	ffc3ffff 	.word	0xffc3ffff
 8002204:	07ffff04 	.word	0x07ffff04

08002208 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff fe3d 	bl	8001e94 <LL_ADC_REG_IsConversionOngoing>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d135      	bne.n	800228a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2254      	movs	r2, #84	; 0x54
 8002222:	5c9b      	ldrb	r3, [r3, r2]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_ADC_Start+0x24>
 8002228:	2302      	movs	r3, #2
 800222a:	e035      	b.n	8002298 <HAL_ADC_Start+0x90>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2254      	movs	r2, #84	; 0x54
 8002230:	2101      	movs	r1, #1
 8002232:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002234:	250f      	movs	r5, #15
 8002236:	197c      	adds	r4, r7, r5
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fb28 	bl	8002890 <ADC_Enable>
 8002240:	0003      	movs	r3, r0
 8002242:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002244:	197b      	adds	r3, r7, r5
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d119      	bne.n	8002280 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <HAL_ADC_Start+0x98>)
 8002252:	4013      	ands	r3, r2
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	0052      	lsls	r2, r2, #1
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	221c      	movs	r2, #28
 800226a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2254      	movs	r2, #84	; 0x54
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff fde7 	bl	8001e4c <LL_ADC_REG_StartConversion>
 800227e:	e008      	b.n	8002292 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2254      	movs	r2, #84	; 0x54
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]
 8002288:	e003      	b.n	8002292 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800228a:	230f      	movs	r3, #15
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2202      	movs	r2, #2
 8002290:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002292:	230f      	movs	r3, #15
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	781b      	ldrb	r3, [r3, #0]
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	fffff0fe 	.word	0xfffff0fe

080022a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2254      	movs	r2, #84	; 0x54
 80022b0:	5c9b      	ldrb	r3, [r3, r2]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Stop+0x16>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e029      	b.n	800230e <HAL_ADC_Stop+0x6a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2254      	movs	r2, #84	; 0x54
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80022c2:	250f      	movs	r5, #15
 80022c4:	197c      	adds	r4, r7, r5
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 fa9f 	bl	800280c <ADC_ConversionStop>
 80022ce:	0003      	movs	r3, r0
 80022d0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022d2:	197b      	adds	r3, r7, r5
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d112      	bne.n	8002300 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80022da:	197c      	adds	r4, r7, r5
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fb5c 	bl	800299c <ADC_Disable>
 80022e4:	0003      	movs	r3, r0
 80022e6:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80022e8:	197b      	adds	r3, r7, r5
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_ADC_Stop+0x74>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	2201      	movs	r2, #1
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2254      	movs	r2, #84	; 0x54
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002308:	230f      	movs	r3, #15
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bdb0      	pop	{r4, r5, r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	fffffefe 	.word	0xfffffefe

0800231c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d102      	bne.n	8002334 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800232e:	2308      	movs	r3, #8
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e00f      	b.n	8002354 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d007      	beq.n	8002350 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	2220      	movs	r2, #32
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e072      	b.n	8002436 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002350:	2304      	movs	r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002354:	f7ff fc18 	bl	8001b88 <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800235c:	e01f      	b.n	800239e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	d01c      	beq.n	800239e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002364:	f7ff fc10 	bl	8001b88 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <HAL_ADC_PollForConversion+0x5e>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d111      	bne.n	800239e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	d10b      	bne.n	800239e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	2204      	movs	r2, #4
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2254      	movs	r2, #84	; 0x54
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e04b      	b.n	8002436 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	d0d9      	beq.n	800235e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	0092      	lsls	r2, r2, #2
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff fc66 	bl	8001c8e <LL_ADC_REG_IsTriggerSourceSWStart>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d02e      	beq.n	8002424 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7e9b      	ldrb	r3, [r3, #26]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d12a      	bne.n	8002424 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2208      	movs	r2, #8
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d123      	bne.n	8002424 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff fd57 	bl	8001e94 <LL_ADC_REG_IsConversionOngoing>
 80023e6:	1e03      	subs	r3, r0, #0
 80023e8:	d110      	bne.n	800240c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	210c      	movs	r1, #12
 80023f6:	438a      	bics	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <HAL_ADC_PollForConversion+0x124>)
 8002400:	4013      	ands	r3, r2
 8002402:	2201      	movs	r2, #1
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	659a      	str	r2, [r3, #88]	; 0x58
 800240a:	e00b      	b.n	8002424 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	2220      	movs	r2, #32
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	2201      	movs	r2, #1
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7e1b      	ldrb	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	220c      	movs	r2, #12
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b004      	add	sp, #16
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	fffffefe 	.word	0xfffffefe

08002444 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002466:	2317      	movs	r3, #23
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2254      	movs	r2, #84	; 0x54
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x24>
 800247c:	2302      	movs	r3, #2
 800247e:	e1c0      	b.n	8002802 <HAL_ADC_ConfigChannel+0x3a6>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2254      	movs	r2, #84	; 0x54
 8002484:	2101      	movs	r1, #1
 8002486:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff fd01 	bl	8001e94 <LL_ADC_REG_IsConversionOngoing>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d000      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x3c>
 8002496:	e1a3      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d100      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x46>
 80024a0:	e143      	b.n	800272a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d004      	beq.n	80024b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024b2:	4ac1      	ldr	r2, [pc, #772]	; (80027b8 <HAL_ADC_ConfigChannel+0x35c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d108      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0019      	movs	r1, r3
 80024c2:	0010      	movs	r0, r2
 80024c4:	f7ff fc14 	bl	8001cf0 <LL_ADC_REG_SetSequencerChAdd>
 80024c8:	e0c9      	b.n	800265e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	211f      	movs	r1, #31
 80024d4:	400b      	ands	r3, r1
 80024d6:	210f      	movs	r1, #15
 80024d8:	4099      	lsls	r1, r3
 80024da:	000b      	movs	r3, r1
 80024dc:	43db      	mvns	r3, r3
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	035b      	lsls	r3, r3, #13
 80024e8:	0b5b      	lsrs	r3, r3, #13
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x9c>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	221f      	movs	r2, #31
 80024f4:	4013      	ands	r3, r2
 80024f6:	e098      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	d000      	beq.n	8002504 <HAL_ADC_ConfigChannel+0xa8>
 8002502:	e091      	b.n	8002628 <HAL_ADC_ConfigChannel+0x1cc>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2202      	movs	r2, #2
 800250a:	4013      	ands	r3, r2
 800250c:	d000      	beq.n	8002510 <HAL_ADC_ConfigChannel+0xb4>
 800250e:	e089      	b.n	8002624 <HAL_ADC_ConfigChannel+0x1c8>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2204      	movs	r2, #4
 8002516:	4013      	ands	r3, r2
 8002518:	d000      	beq.n	800251c <HAL_ADC_ConfigChannel+0xc0>
 800251a:	e081      	b.n	8002620 <HAL_ADC_ConfigChannel+0x1c4>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	4013      	ands	r3, r2
 8002524:	d000      	beq.n	8002528 <HAL_ADC_ConfigChannel+0xcc>
 8002526:	e079      	b.n	800261c <HAL_ADC_ConfigChannel+0x1c0>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2210      	movs	r2, #16
 800252e:	4013      	ands	r3, r2
 8002530:	d000      	beq.n	8002534 <HAL_ADC_ConfigChannel+0xd8>
 8002532:	e071      	b.n	8002618 <HAL_ADC_ConfigChannel+0x1bc>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2220      	movs	r2, #32
 800253a:	4013      	ands	r3, r2
 800253c:	d000      	beq.n	8002540 <HAL_ADC_ConfigChannel+0xe4>
 800253e:	e069      	b.n	8002614 <HAL_ADC_ConfigChannel+0x1b8>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	4013      	ands	r3, r2
 8002548:	d000      	beq.n	800254c <HAL_ADC_ConfigChannel+0xf0>
 800254a:	e061      	b.n	8002610 <HAL_ADC_ConfigChannel+0x1b4>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2280      	movs	r2, #128	; 0x80
 8002552:	4013      	ands	r3, r2
 8002554:	d000      	beq.n	8002558 <HAL_ADC_ConfigChannel+0xfc>
 8002556:	e059      	b.n	800260c <HAL_ADC_ConfigChannel+0x1b0>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4013      	ands	r3, r2
 8002562:	d151      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x1ac>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4013      	ands	r3, r2
 800256e:	d149      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1a8>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4013      	ands	r3, r2
 800257a:	d141      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1a4>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4013      	ands	r3, r2
 8002586:	d139      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1a0>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	015b      	lsls	r3, r3, #5
 8002590:	4013      	ands	r3, r2
 8002592:	d131      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x19c>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	019b      	lsls	r3, r3, #6
 800259c:	4013      	ands	r3, r2
 800259e:	d129      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x198>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	01db      	lsls	r3, r3, #7
 80025a8:	4013      	ands	r3, r2
 80025aa:	d121      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x194>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	4013      	ands	r3, r2
 80025b6:	d119      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x190>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	025b      	lsls	r3, r3, #9
 80025c0:	4013      	ands	r3, r2
 80025c2:	d111      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x18c>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	029b      	lsls	r3, r3, #10
 80025cc:	4013      	ands	r3, r2
 80025ce:	d109      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x188>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	02db      	lsls	r3, r3, #11
 80025d8:	4013      	ands	r3, r2
 80025da:	d001      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x184>
 80025dc:	2312      	movs	r3, #18
 80025de:	e024      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80025e0:	2300      	movs	r3, #0
 80025e2:	e022      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80025e4:	2311      	movs	r3, #17
 80025e6:	e020      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80025e8:	2310      	movs	r3, #16
 80025ea:	e01e      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80025ec:	230f      	movs	r3, #15
 80025ee:	e01c      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80025f0:	230e      	movs	r3, #14
 80025f2:	e01a      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80025f4:	230d      	movs	r3, #13
 80025f6:	e018      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80025f8:	230c      	movs	r3, #12
 80025fa:	e016      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 80025fc:	230b      	movs	r3, #11
 80025fe:	e014      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002600:	230a      	movs	r3, #10
 8002602:	e012      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002604:	2309      	movs	r3, #9
 8002606:	e010      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002608:	2308      	movs	r3, #8
 800260a:	e00e      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 800260c:	2307      	movs	r3, #7
 800260e:	e00c      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002610:	2306      	movs	r3, #6
 8002612:	e00a      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002614:	2305      	movs	r3, #5
 8002616:	e008      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002618:	2304      	movs	r3, #4
 800261a:	e006      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 800261c:	2303      	movs	r3, #3
 800261e:	e004      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002620:	2302      	movs	r3, #2
 8002622:	e002      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ce>
 8002628:	2300      	movs	r3, #0
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	6852      	ldr	r2, [r2, #4]
 800262e:	201f      	movs	r0, #31
 8002630:	4002      	ands	r2, r0
 8002632:	4093      	lsls	r3, r2
 8002634:	000a      	movs	r2, r1
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	429a      	cmp	r2, r3
 800264a:	d808      	bhi.n	800265e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	001a      	movs	r2, r3
 800265a:	f7ff fb29 	bl	8001cb0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	001a      	movs	r2, r3
 800266c:	f7ff fb64 	bl	8001d38 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db00      	blt.n	800267a <HAL_ADC_ConfigChannel+0x21e>
 8002678:	e0bc      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800267a:	4b50      	ldr	r3, [pc, #320]	; (80027bc <HAL_ADC_ConfigChannel+0x360>)
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff fac5 	bl	8001c0c <LL_ADC_GetCommonPathInternalCh>
 8002682:	0003      	movs	r3, r0
 8002684:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4d      	ldr	r2, [pc, #308]	; (80027c0 <HAL_ADC_ConfigChannel+0x364>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d122      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002698:	d11d      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	0412      	lsls	r2, r2, #16
 80026a0:	4313      	orrs	r3, r2
 80026a2:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_ADC_ConfigChannel+0x360>)
 80026a4:	0019      	movs	r1, r3
 80026a6:	0010      	movs	r0, r2
 80026a8:	f7ff fa9c 	bl	8001be4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026ac:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <HAL_ADC_ConfigChannel+0x368>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4945      	ldr	r1, [pc, #276]	; (80027c8 <HAL_ADC_ConfigChannel+0x36c>)
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7fd fd24 	bl	8000100 <__udivsi3>
 80026b8:	0003      	movs	r3, r0
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	0013      	movs	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026c6:	e002      	b.n	80026ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f9      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026d4:	e08e      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <HAL_ADC_ConfigChannel+0x370>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10e      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	045b      	lsls	r3, r3, #17
 80026e6:	4013      	ands	r3, r2
 80026e8:	d109      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	0452      	lsls	r2, r2, #17
 80026f0:	4313      	orrs	r3, r2
 80026f2:	4a32      	ldr	r2, [pc, #200]	; (80027bc <HAL_ADC_ConfigChannel+0x360>)
 80026f4:	0019      	movs	r1, r3
 80026f6:	0010      	movs	r0, r2
 80026f8:	f7ff fa74 	bl	8001be4 <LL_ADC_SetCommonPathInternalCh>
 80026fc:	e07a      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <HAL_ADC_ConfigChannel+0x374>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d000      	beq.n	800270a <HAL_ADC_ConfigChannel+0x2ae>
 8002708:	e074      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	03db      	lsls	r3, r3, #15
 8002710:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002712:	d000      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x2ba>
 8002714:	e06e      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	03d2      	lsls	r2, r2, #15
 800271c:	4313      	orrs	r3, r2
 800271e:	4a27      	ldr	r2, [pc, #156]	; (80027bc <HAL_ADC_ConfigChannel+0x360>)
 8002720:	0019      	movs	r1, r3
 8002722:	0010      	movs	r0, r2
 8002724:	f7ff fa5e 	bl	8001be4 <LL_ADC_SetCommonPathInternalCh>
 8002728:	e064      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	429a      	cmp	r2, r3
 8002734:	d004      	beq.n	8002740 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <HAL_ADC_ConfigChannel+0x35c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d107      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0019      	movs	r1, r3
 800274a:	0010      	movs	r0, r2
 800274c:	f7ff fae1 	bl	8001d12 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	da4d      	bge.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_ADC_ConfigChannel+0x360>)
 800275a:	0018      	movs	r0, r3
 800275c:	f7ff fa56 	bl	8001c0c <LL_ADC_GetCommonPathInternalCh>
 8002760:	0003      	movs	r3, r0
 8002762:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <HAL_ADC_ConfigChannel+0x364>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_ADC_ConfigChannel+0x378>)
 8002772:	4013      	ands	r3, r2
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_ADC_ConfigChannel+0x360>)
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f7ff fa33 	bl	8001be4 <LL_ADC_SetCommonPathInternalCh>
 800277e:	e039      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a11      	ldr	r2, [pc, #68]	; (80027cc <HAL_ADC_ConfigChannel+0x370>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d108      	bne.n	800279c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_ADC_ConfigChannel+0x37c>)
 800278e:	4013      	ands	r3, r2
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_ADC_ConfigChannel+0x360>)
 8002792:	0019      	movs	r1, r3
 8002794:	0010      	movs	r0, r2
 8002796:	f7ff fa25 	bl	8001be4 <LL_ADC_SetCommonPathInternalCh>
 800279a:	e02b      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HAL_ADC_ConfigChannel+0x374>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d126      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <HAL_ADC_ConfigChannel+0x380>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	4a03      	ldr	r2, [pc, #12]	; (80027bc <HAL_ADC_ConfigChannel+0x360>)
 80027ae:	0019      	movs	r1, r3
 80027b0:	0010      	movs	r0, r2
 80027b2:	f7ff fa17 	bl	8001be4 <LL_ADC_SetCommonPathInternalCh>
 80027b6:	e01d      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x398>
 80027b8:	80000004 	.word	0x80000004
 80027bc:	40012708 	.word	0x40012708
 80027c0:	b0001000 	.word	0xb0001000
 80027c4:	20000010 	.word	0x20000010
 80027c8:	00030d40 	.word	0x00030d40
 80027cc:	b8004000 	.word	0xb8004000
 80027d0:	b4002000 	.word	0xb4002000
 80027d4:	ff7fffff 	.word	0xff7fffff
 80027d8:	feffffff 	.word	0xfeffffff
 80027dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	2220      	movs	r2, #32
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027ec:	2317      	movs	r3, #23
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2254      	movs	r2, #84	; 0x54
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80027fc:	2317      	movs	r3, #23
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b006      	add	sp, #24
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)

0800280c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0018      	movs	r0, r3
 800281a:	f7ff fb3b 	bl	8001e94 <LL_ADC_REG_IsConversionOngoing>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d031      	beq.n	8002886 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0018      	movs	r0, r3
 8002828:	f7ff faff 	bl	8001e2a <LL_ADC_IsDisableOngoing>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d104      	bne.n	800283a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0018      	movs	r0, r3
 8002836:	f7ff fb1b 	bl	8001e70 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800283a:	f7ff f9a5 	bl	8001b88 <HAL_GetTick>
 800283e:	0003      	movs	r3, r0
 8002840:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002842:	e01a      	b.n	800287a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002844:	f7ff f9a0 	bl	8001b88 <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d913      	bls.n	800287a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2204      	movs	r2, #4
 800285a:	4013      	ands	r3, r2
 800285c:	d00d      	beq.n	800287a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	2210      	movs	r2, #16
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	2201      	movs	r2, #1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e006      	b.n	8002888 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2204      	movs	r2, #4
 8002882:	4013      	ands	r3, r2
 8002884:	d1de      	bne.n	8002844 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b004      	add	sp, #16
 800288e:	bd80      	pop	{r7, pc}

08002890 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff fab1 	bl	8001e08 <LL_ADC_IsEnabled>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d000      	beq.n	80028ac <ADC_Enable+0x1c>
 80028aa:	e069      	b.n	8002980 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4a36      	ldr	r2, [pc, #216]	; (800298c <ADC_Enable+0xfc>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00d      	beq.n	80028d4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	2210      	movs	r2, #16
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2201      	movs	r2, #1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e056      	b.n	8002982 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff fa71 	bl	8001dc0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <ADC_Enable+0x100>)
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7ff f993 	bl	8001c0c <LL_ADC_GetCommonPathInternalCh>
 80028e6:	0002      	movs	r2, r0
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	4013      	ands	r3, r2
 80028ee:	d00f      	beq.n	8002910 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <ADC_Enable+0x104>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4928      	ldr	r1, [pc, #160]	; (8002998 <ADC_Enable+0x108>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7fd fc02 	bl	8000100 <__udivsi3>
 80028fc:	0003      	movs	r3, r0
 80028fe:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002900:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002902:	e002      	b.n	800290a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	3b01      	subs	r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f9      	bne.n	8002904 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7e5b      	ldrb	r3, [r3, #25]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d033      	beq.n	8002980 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002918:	f7ff f936 	bl	8001b88 <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002920:	e027      	b.n	8002972 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0018      	movs	r0, r3
 8002928:	f7ff fa6e 	bl	8001e08 <LL_ADC_IsEnabled>
 800292c:	1e03      	subs	r3, r0, #0
 800292e:	d104      	bne.n	800293a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff fa43 	bl	8001dc0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800293a:	f7ff f925 	bl	8001b88 <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d914      	bls.n	8002972 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2201      	movs	r2, #1
 8002950:	4013      	ands	r3, r2
 8002952:	2b01      	cmp	r3, #1
 8002954:	d00d      	beq.n	8002972 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	2210      	movs	r2, #16
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2201      	movs	r2, #1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e007      	b.n	8002982 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	4013      	ands	r3, r2
 800297c:	2b01      	cmp	r3, #1
 800297e:	d1d0      	bne.n	8002922 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	80000017 	.word	0x80000017
 8002990:	40012708 	.word	0x40012708
 8002994:	20000010 	.word	0x20000010
 8002998:	00030d40 	.word	0x00030d40

0800299c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff fa3e 	bl	8001e2a <LL_ADC_IsDisableOngoing>
 80029ae:	0003      	movs	r3, r0
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff fa26 	bl	8001e08 <LL_ADC_IsEnabled>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d046      	beq.n	8002a4e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d143      	bne.n	8002a4e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2205      	movs	r2, #5
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10d      	bne.n	80029f0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fa03 	bl	8001de4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2203      	movs	r2, #3
 80029e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029e6:	f7ff f8cf 	bl	8001b88 <HAL_GetTick>
 80029ea:	0003      	movs	r3, r0
 80029ec:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029ee:	e028      	b.n	8002a42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	2210      	movs	r2, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2201      	movs	r2, #1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e021      	b.n	8002a50 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a0c:	f7ff f8bc 	bl	8001b88 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d913      	bls.n	8002a42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2201      	movs	r2, #1
 8002a22:	4013      	ands	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2201      	movs	r2, #1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e006      	b.n	8002a50 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d1de      	bne.n	8002a0c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	0002      	movs	r2, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	1dfb      	adds	r3, r7, #7
 8002a64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	1dfb      	adds	r3, r7, #7
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a6c:	d828      	bhi.n	8002ac0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <__NVIC_SetPriority+0xd4>)
 8002a70:	1dfb      	adds	r3, r7, #7
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b25b      	sxtb	r3, r3
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	33c0      	adds	r3, #192	; 0xc0
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	589b      	ldr	r3, [r3, r2]
 8002a7e:	1dfa      	adds	r2, r7, #7
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	0011      	movs	r1, r2
 8002a84:	2203      	movs	r2, #3
 8002a86:	400a      	ands	r2, r1
 8002a88:	00d2      	lsls	r2, r2, #3
 8002a8a:	21ff      	movs	r1, #255	; 0xff
 8002a8c:	4091      	lsls	r1, r2
 8002a8e:	000a      	movs	r2, r1
 8002a90:	43d2      	mvns	r2, r2
 8002a92:	401a      	ands	r2, r3
 8002a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	22ff      	movs	r2, #255	; 0xff
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	1dfb      	adds	r3, r7, #7
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	4003      	ands	r3, r0
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aac:	481f      	ldr	r0, [pc, #124]	; (8002b2c <__NVIC_SetPriority+0xd4>)
 8002aae:	1dfb      	adds	r3, r7, #7
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	b25b      	sxtb	r3, r3
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	33c0      	adds	r3, #192	; 0xc0
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002abe:	e031      	b.n	8002b24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ac0:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <__NVIC_SetPriority+0xd8>)
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	230f      	movs	r3, #15
 8002aca:	400b      	ands	r3, r1
 8002acc:	3b08      	subs	r3, #8
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3306      	adds	r3, #6
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	18d3      	adds	r3, r2, r3
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1dfa      	adds	r2, r7, #7
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	0011      	movs	r1, r2
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	00d2      	lsls	r2, r2, #3
 8002ae6:	21ff      	movs	r1, #255	; 0xff
 8002ae8:	4091      	lsls	r1, r2
 8002aea:	000a      	movs	r2, r1
 8002aec:	43d2      	mvns	r2, r2
 8002aee:	401a      	ands	r2, r3
 8002af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	22ff      	movs	r2, #255	; 0xff
 8002af8:	401a      	ands	r2, r3
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	0018      	movs	r0, r3
 8002b00:	2303      	movs	r3, #3
 8002b02:	4003      	ands	r3, r0
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b08:	4809      	ldr	r0, [pc, #36]	; (8002b30 <__NVIC_SetPriority+0xd8>)
 8002b0a:	1dfb      	adds	r3, r7, #7
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	001c      	movs	r4, r3
 8002b10:	230f      	movs	r3, #15
 8002b12:	4023      	ands	r3, r4
 8002b14:	3b08      	subs	r3, #8
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	3306      	adds	r3, #6
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	18c3      	adds	r3, r0, r3
 8002b20:	3304      	adds	r3, #4
 8002b22:	601a      	str	r2, [r3, #0]
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b003      	add	sp, #12
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	045b      	lsls	r3, r3, #17
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d301      	bcc.n	8002b4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e010      	b.n	8002b6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <SysTick_Config+0x44>)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	3a01      	subs	r2, #1
 8002b52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b54:	2301      	movs	r3, #1
 8002b56:	425b      	negs	r3, r3
 8002b58:	2103      	movs	r1, #3
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff ff7c 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SysTick_Config+0x44>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Config+0x44>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	210f      	movs	r1, #15
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	1c02      	adds	r2, r0, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	0011      	movs	r1, r2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff ff5d 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff ffbf 	bl	8002b34 <SysTick_Config>
 8002bb6:	0003      	movs	r3, r0
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bce:	e147      	b.n	8002e60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4091      	lsls	r1, r2
 8002bda:	000a      	movs	r2, r1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d100      	bne.n	8002be8 <HAL_GPIO_Init+0x28>
 8002be6:	e138      	b.n	8002e5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2203      	movs	r2, #3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d005      	beq.n	8002c00 <HAL_GPIO_Init+0x40>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d130      	bne.n	8002c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	0013      	movs	r3, r2
 8002c10:	43da      	mvns	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	409a      	lsls	r2, r3
 8002c22:	0013      	movs	r3, r2
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c36:	2201      	movs	r2, #1
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	401a      	ands	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	409a      	lsls	r2, r3
 8002c54:	0013      	movs	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2203      	movs	r2, #3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d017      	beq.n	8002c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	0013      	movs	r3, r2
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	0013      	movs	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d123      	bne.n	8002cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	08da      	lsrs	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	58d3      	ldr	r3, [r2, r3]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2207      	movs	r2, #7
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2107      	movs	r1, #7
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	0013      	movs	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	08da      	lsrs	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3208      	adds	r2, #8
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	6939      	ldr	r1, [r7, #16]
 8002cf0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	43da      	mvns	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	401a      	ands	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	409a      	lsls	r2, r3
 8002d18:	0013      	movs	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	23c0      	movs	r3, #192	; 0xc0
 8002d2c:	029b      	lsls	r3, r3, #10
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d100      	bne.n	8002d34 <HAL_GPIO_Init+0x174>
 8002d32:	e092      	b.n	8002e5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002d34:	4a50      	ldr	r2, [pc, #320]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	589b      	ldr	r3, [r3, r2]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2203      	movs	r2, #3
 8002d46:	4013      	ands	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	0013      	movs	r3, r2
 8002d50:	43da      	mvns	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	23a0      	movs	r3, #160	; 0xa0
 8002d5c:	05db      	lsls	r3, r3, #23
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0x1ca>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a45      	ldr	r2, [pc, #276]	; (8002e7c <HAL_GPIO_Init+0x2bc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00d      	beq.n	8002d86 <HAL_GPIO_Init+0x1c6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a44      	ldr	r2, [pc, #272]	; (8002e80 <HAL_GPIO_Init+0x2c0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <HAL_GPIO_Init+0x1c2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a43      	ldr	r2, [pc, #268]	; (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_GPIO_Init+0x1be>
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x1cc>
 8002d7e:	2305      	movs	r3, #5
 8002d80:	e004      	b.n	8002d8c <HAL_GPIO_Init+0x1cc>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <HAL_GPIO_Init+0x1cc>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x1cc>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	2103      	movs	r1, #3
 8002d90:	400a      	ands	r2, r1
 8002d92:	00d2      	lsls	r2, r2, #3
 8002d94:	4093      	lsls	r3, r2
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d9c:	4936      	ldr	r1, [pc, #216]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3318      	adds	r3, #24
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002daa:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43da      	mvns	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	035b      	lsls	r3, r3, #13
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dce:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002dd4:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	039b      	lsls	r3, r3, #14
 8002dec:	4013      	ands	r3, r2
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002e00:	2384      	movs	r3, #132	; 0x84
 8002e02:	58d3      	ldr	r3, [r2, r3]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	029b      	lsls	r3, r3, #10
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e24:	4914      	ldr	r1, [pc, #80]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002e26:	2284      	movs	r2, #132	; 0x84
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e2c:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	58d3      	ldr	r3, [r2, r3]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43da      	mvns	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	025b      	lsls	r3, r3, #9
 8002e46:	4013      	ands	r3, r2
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e52:	4909      	ldr	r1, [pc, #36]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	40da      	lsrs	r2, r3
 8002e68:	1e13      	subs	r3, r2, #0
 8002e6a:	d000      	beq.n	8002e6e <HAL_GPIO_Init+0x2ae>
 8002e6c:	e6b0      	b.n	8002bd0 <HAL_GPIO_Init+0x10>
  }
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b006      	add	sp, #24
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021800 	.word	0x40021800
 8002e7c:	50000400 	.word	0x50000400
 8002e80:	50000800 	.word	0x50000800
 8002e84:	50000c00 	.word	0x50000c00

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	0008      	movs	r0, r1
 8002e92:	0011      	movs	r1, r2
 8002e94:	1cbb      	adds	r3, r7, #2
 8002e96:	1c02      	adds	r2, r0, #0
 8002e98:	801a      	strh	r2, [r3, #0]
 8002e9a:	1c7b      	adds	r3, r7, #1
 8002e9c:	1c0a      	adds	r2, r1, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea0:	1c7b      	adds	r3, r7, #1
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ea8:	1cbb      	adds	r3, r7, #2
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eb2:	1cbb      	adds	r3, r7, #2
 8002eb4:	881a      	ldrh	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d11f      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	0013      	movs	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7fd f902 	bl	8000100 <__udivsi3>
 8002efc:	0003      	movs	r3, r0
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f02:	e008      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e001      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e009      	b.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	401a      	ands	r2, r3
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d0ed      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	40007000 	.word	0x40007000
 8002f38:	fffff9ff 	.word	0xfffff9ff
 8002f3c:	20000010 	.word	0x20000010
 8002f40:	000f4240 	.word	0x000f4240

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e2f3      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d100      	bne.n	8002f62 <HAL_RCC_OscConfig+0x1e>
 8002f60:	e07c      	b.n	800305c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f62:	4bc3      	ldr	r3, [pc, #780]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2238      	movs	r2, #56	; 0x38
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6c:	4bc0      	ldr	r3, [pc, #768]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2203      	movs	r2, #3
 8002f72:	4013      	ands	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3e>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4bb9      	ldr	r3, [pc, #740]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	029b      	lsls	r3, r3, #10
 8002f90:	4013      	ands	r3, r2
 8002f92:	d062      	beq.n	800305a <HAL_RCC_OscConfig+0x116>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d15e      	bne.n	800305a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e2ce      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	025b      	lsls	r3, r3, #9
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x78>
 8002fac:	4bb0      	ldr	r3, [pc, #704]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4baf      	ldr	r3, [pc, #700]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	0249      	lsls	r1, r1, #9
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e020      	b.n	8002ffe <HAL_RCC_OscConfig+0xba>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	23a0      	movs	r3, #160	; 0xa0
 8002fc2:	02db      	lsls	r3, r3, #11
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d10e      	bne.n	8002fe6 <HAL_RCC_OscConfig+0xa2>
 8002fc8:	4ba9      	ldr	r3, [pc, #676]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4ba8      	ldr	r3, [pc, #672]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	02c9      	lsls	r1, r1, #11
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	4ba6      	ldr	r3, [pc, #664]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4ba5      	ldr	r3, [pc, #660]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	0249      	lsls	r1, r1, #9
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0xba>
 8002fe6:	4ba2      	ldr	r3, [pc, #648]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4ba1      	ldr	r3, [pc, #644]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fec:	49a1      	ldr	r1, [pc, #644]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	4b9f      	ldr	r3, [pc, #636]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b9e      	ldr	r3, [pc, #632]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002ff8:	499f      	ldr	r1, [pc, #636]	; (8003278 <HAL_RCC_OscConfig+0x334>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d014      	beq.n	8003030 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fe fdbf 	bl	8001b88 <HAL_GetTick>
 800300a:	0003      	movs	r3, r0
 800300c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fdba 	bl	8001b88 <HAL_GetTick>
 8003014:	0002      	movs	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e28d      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003022:	4b93      	ldr	r3, [pc, #588]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	029b      	lsls	r3, r3, #10
 800302a:	4013      	ands	r3, r2
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xcc>
 800302e:	e015      	b.n	800305c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fdaa 	bl	8001b88 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303a:	f7fe fda5 	bl	8001b88 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	; 0x64
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e278      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304c:	4b88      	ldr	r3, [pc, #544]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	4013      	ands	r3, r2
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0xf6>
 8003058:	e000      	b.n	800305c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2202      	movs	r2, #2
 8003062:	4013      	ands	r3, r2
 8003064:	d100      	bne.n	8003068 <HAL_RCC_OscConfig+0x124>
 8003066:	e099      	b.n	800319c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003068:	4b81      	ldr	r3, [pc, #516]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2238      	movs	r2, #56	; 0x38
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003072:	4b7f      	ldr	r3, [pc, #508]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b10      	cmp	r3, #16
 8003080:	d102      	bne.n	8003088 <HAL_RCC_OscConfig+0x144>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d002      	beq.n	800308e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d135      	bne.n	80030fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308e:	4b78      	ldr	r3, [pc, #480]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4013      	ands	r3, r2
 8003098:	d005      	beq.n	80030a6 <HAL_RCC_OscConfig+0x162>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e24b      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a6:	4b72      	ldr	r3, [pc, #456]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a74      	ldr	r2, [pc, #464]	; (800327c <HAL_RCC_OscConfig+0x338>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	021a      	lsls	r2, r3, #8
 80030b6:	4b6e      	ldr	r3, [pc, #440]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d112      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030c2:	4b6b      	ldr	r3, [pc, #428]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6e      	ldr	r2, [pc, #440]	; (8003280 <HAL_RCC_OscConfig+0x33c>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	4b67      	ldr	r3, [pc, #412]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030d6:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0adb      	lsrs	r3, r3, #11
 80030dc:	2207      	movs	r2, #7
 80030de:	4013      	ands	r3, r2
 80030e0:	4a68      	ldr	r2, [pc, #416]	; (8003284 <HAL_RCC_OscConfig+0x340>)
 80030e2:	40da      	lsrs	r2, r3
 80030e4:	4b68      	ldr	r3, [pc, #416]	; (8003288 <HAL_RCC_OscConfig+0x344>)
 80030e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030e8:	4b68      	ldr	r3, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x348>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fe fcef 	bl	8001ad0 <HAL_InitTick>
 80030f2:	1e03      	subs	r3, r0, #0
 80030f4:	d051      	beq.n	800319a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e221      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d030      	beq.n	8003164 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003102:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5e      	ldr	r2, [pc, #376]	; (8003280 <HAL_RCC_OscConfig+0x33c>)
 8003108:	4013      	ands	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	4b57      	ldr	r3, [pc, #348]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003116:	4b56      	ldr	r3, [pc, #344]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b55      	ldr	r3, [pc, #340]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	0049      	lsls	r1, r1, #1
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fd30 	bl	8001b88 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312e:	f7fe fd2b 	bl	8001b88 <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1fe      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003140:	4b4b      	ldr	r3, [pc, #300]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4013      	ands	r3, r2
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b48      	ldr	r3, [pc, #288]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a4a      	ldr	r2, [pc, #296]	; (800327c <HAL_RCC_OscConfig+0x338>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	021a      	lsls	r2, r3, #8
 800315c:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	e01b      	b.n	800319c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800316a:	4949      	ldr	r1, [pc, #292]	; (8003290 <HAL_RCC_OscConfig+0x34c>)
 800316c:	400a      	ands	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe fd0a 	bl	8001b88 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317a:	f7fe fd05 	bl	8001b88 <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e1d8      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800318c:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4013      	ands	r3, r2
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x236>
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800319a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2208      	movs	r2, #8
 80031a2:	4013      	ands	r3, r2
 80031a4:	d047      	beq.n	8003236 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031a6:	4b32      	ldr	r3, [pc, #200]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2238      	movs	r2, #56	; 0x38
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b18      	cmp	r3, #24
 80031b0:	d10a      	bne.n	80031c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80031b2:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	2202      	movs	r2, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	d03c      	beq.n	8003236 <HAL_RCC_OscConfig+0x2f2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d138      	bne.n	8003236 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e1ba      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d019      	beq.n	8003204 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80031d0:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	430a      	orrs	r2, r1
 80031da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fcd4 	bl	8001b88 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e6:	f7fe fccf 	bl	8001b88 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1a2      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	2202      	movs	r2, #2
 80031fe:	4013      	ands	r3, r2
 8003200:	d0f1      	beq.n	80031e6 <HAL_RCC_OscConfig+0x2a2>
 8003202:	e018      	b.n	8003236 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800320a:	2101      	movs	r1, #1
 800320c:	438a      	bics	r2, r1
 800320e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe fcba 	bl	8001b88 <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe fcb5 	bl	8001b88 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e188      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d1f1      	bne.n	800321a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2204      	movs	r2, #4
 800323c:	4013      	ands	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCC_OscConfig+0x2fe>
 8003240:	e0c6      	b.n	80033d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	231f      	movs	r3, #31
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2238      	movs	r2, #56	; 0x38
 8003250:	4013      	ands	r3, r2
 8003252:	2b20      	cmp	r3, #32
 8003254:	d11e      	bne.n	8003294 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	2202      	movs	r2, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d100      	bne.n	8003262 <HAL_RCC_OscConfig+0x31e>
 8003260:	e0b6      	b.n	80033d0 <HAL_RCC_OscConfig+0x48c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d000      	beq.n	800326c <HAL_RCC_OscConfig+0x328>
 800326a:	e0b1      	b.n	80033d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e166      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
 8003270:	40021000 	.word	0x40021000
 8003274:	fffeffff 	.word	0xfffeffff
 8003278:	fffbffff 	.word	0xfffbffff
 800327c:	ffff80ff 	.word	0xffff80ff
 8003280:	ffffc7ff 	.word	0xffffc7ff
 8003284:	00f42400 	.word	0x00f42400
 8003288:	20000010 	.word	0x20000010
 800328c:	20000014 	.word	0x20000014
 8003290:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003294:	4bac      	ldr	r3, [pc, #688]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	055b      	lsls	r3, r3, #21
 800329c:	4013      	ands	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x360>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x362>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d011      	beq.n	80032ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	4ba7      	ldr	r3, [pc, #668]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80032ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ae:	4ba6      	ldr	r3, [pc, #664]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	0549      	lsls	r1, r1, #21
 80032b4:	430a      	orrs	r2, r1
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b8:	4ba3      	ldr	r3, [pc, #652]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80032ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	055b      	lsls	r3, r3, #21
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80032c6:	231f      	movs	r3, #31
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ce:	4b9f      	ldr	r3, [pc, #636]	; (800354c <HAL_RCC_OscConfig+0x608>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	d11a      	bne.n	8003310 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032da:	4b9c      	ldr	r3, [pc, #624]	; (800354c <HAL_RCC_OscConfig+0x608>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b9b      	ldr	r3, [pc, #620]	; (800354c <HAL_RCC_OscConfig+0x608>)
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	0049      	lsls	r1, r1, #1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80032e8:	f7fe fc4e 	bl	8001b88 <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fe fc49 	bl	8001b88 <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e11c      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003304:	4b91      	ldr	r3, [pc, #580]	; (800354c <HAL_RCC_OscConfig+0x608>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x3e2>
 8003318:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800331a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800331c:	4b8a      	ldr	r3, [pc, #552]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800331e:	2101      	movs	r1, #1
 8003320:	430a      	orrs	r2, r1
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
 8003324:	e01c      	b.n	8003360 <HAL_RCC_OscConfig+0x41c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b05      	cmp	r3, #5
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x404>
 800332e:	4b86      	ldr	r3, [pc, #536]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003334:	2104      	movs	r1, #4
 8003336:	430a      	orrs	r2, r1
 8003338:	65da      	str	r2, [r3, #92]	; 0x5c
 800333a:	4b83      	ldr	r3, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800333c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003340:	2101      	movs	r1, #1
 8003342:	430a      	orrs	r2, r1
 8003344:	65da      	str	r2, [r3, #92]	; 0x5c
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0x41c>
 8003348:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800334a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800334e:	2101      	movs	r1, #1
 8003350:	438a      	bics	r2, r1
 8003352:	65da      	str	r2, [r3, #92]	; 0x5c
 8003354:	4b7c      	ldr	r3, [pc, #496]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800335a:	2104      	movs	r1, #4
 800335c:	438a      	bics	r2, r1
 800335e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d014      	beq.n	8003392 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fc0e 	bl	8001b88 <HAL_GetTick>
 800336c:	0003      	movs	r3, r0
 800336e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003370:	e009      	b.n	8003386 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fe fc09 	bl	8001b88 <HAL_GetTick>
 8003376:	0002      	movs	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	4a74      	ldr	r2, [pc, #464]	; (8003550 <HAL_RCC_OscConfig+0x60c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0db      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x42e>
 8003390:	e013      	b.n	80033ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe fbf9 	bl	8001b88 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800339a:	e009      	b.n	80033b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fe fbf4 	bl	8001b88 <HAL_GetTick>
 80033a0:	0002      	movs	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	4a6a      	ldr	r2, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x60c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0c6      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b0:	4b65      	ldr	r3, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2202      	movs	r2, #2
 80033b6:	4013      	ands	r3, r2
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033ba:	231f      	movs	r3, #31
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033c4:	4b60      	ldr	r3, [pc, #384]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80033c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c8:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80033ca:	4962      	ldr	r1, [pc, #392]	; (8003554 <HAL_RCC_OscConfig+0x610>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <HAL_RCC_OscConfig+0x496>
 80033d8:	e0b0      	b.n	800353c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2238      	movs	r2, #56	; 0x38
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d100      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4a4>
 80033e6:	e078      	b.n	80034da <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d153      	bne.n	8003498 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b55      	ldr	r3, [pc, #340]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b54      	ldr	r3, [pc, #336]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80033f6:	4958      	ldr	r1, [pc, #352]	; (8003558 <HAL_RCC_OscConfig+0x614>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fbc4 	bl	8001b88 <HAL_GetTick>
 8003400:	0003      	movs	r3, r0
 8003402:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe fbbf 	bl	8001b88 <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e092      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003418:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	049b      	lsls	r3, r3, #18
 8003420:	4013      	ands	r3, r2
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003424:	4b48      	ldr	r3, [pc, #288]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a4c      	ldr	r2, [pc, #304]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800342a:	4013      	ands	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1a      	ldr	r2, [r3, #32]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	431a      	orrs	r2, r3
 800344c:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800344e:	430a      	orrs	r2, r1
 8003450:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	0449      	lsls	r1, r1, #17
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4b38      	ldr	r3, [pc, #224]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 8003466:	2180      	movs	r1, #128	; 0x80
 8003468:	0549      	lsls	r1, r1, #21
 800346a:	430a      	orrs	r2, r1
 800346c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fe fb8b 	bl	8001b88 <HAL_GetTick>
 8003472:	0003      	movs	r3, r0
 8003474:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe fb86 	bl	8001b88 <HAL_GetTick>
 800347c:	0002      	movs	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e059      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	049b      	lsls	r3, r3, #18
 8003492:	4013      	ands	r3, r2
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x534>
 8003496:	e051      	b.n	800353c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 800349e:	492e      	ldr	r1, [pc, #184]	; (8003558 <HAL_RCC_OscConfig+0x614>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fb70 	bl	8001b88 <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fb6b 	bl	8001b88 <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e03e      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	049b      	lsls	r3, r3, #18
 80034c8:	4013      	ands	r3, r2
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80034d2:	4923      	ldr	r1, [pc, #140]	; (8003560 <HAL_RCC_OscConfig+0x61c>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]
 80034d8:	e030      	b.n	800353c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e02b      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <HAL_RCC_OscConfig+0x604>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2203      	movs	r2, #3
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d11e      	bne.n	8003538 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2270      	movs	r2, #112	; 0x70
 80034fe:	401a      	ands	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d117      	bne.n	8003538 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	23fe      	movs	r3, #254	; 0xfe
 800350c:	01db      	lsls	r3, r3, #7
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d10e      	bne.n	8003538 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	23f8      	movs	r3, #248	; 0xf8
 800351e:	039b      	lsls	r3, r3, #14
 8003520:	401a      	ands	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	0f5b      	lsrs	r3, r3, #29
 800352e:	075a      	lsls	r2, r3, #29
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b008      	add	sp, #32
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
 8003550:	00001388 	.word	0x00001388
 8003554:	efffffff 	.word	0xefffffff
 8003558:	feffffff 	.word	0xfeffffff
 800355c:	1fc1808c 	.word	0x1fc1808c
 8003560:	effefffc 	.word	0xeffefffc

08003564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0e9      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2207      	movs	r2, #7
 800357e:	4013      	ands	r3, r2
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d91e      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2207      	movs	r2, #7
 800358c:	4393      	bics	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003598:	f7fe faf6 	bl	8001b88 <HAL_GetTick>
 800359c:	0003      	movs	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035a0:	e009      	b.n	80035b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a2:	f7fe faf1 	bl	8001b88 <HAL_GetTick>
 80035a6:	0002      	movs	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	4a6a      	ldr	r2, [pc, #424]	; (8003758 <HAL_RCC_ClockConfig+0x1f4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0ca      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2207      	movs	r2, #7
 80035bc:	4013      	ands	r3, r2
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1ee      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2202      	movs	r2, #2
 80035ca:	4013      	ands	r3, r2
 80035cc:	d015      	beq.n	80035fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2204      	movs	r2, #4
 80035d4:	4013      	ands	r3, r2
 80035d6:	d006      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035d8:	4b60      	ldr	r3, [pc, #384]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	4b5f      	ldr	r3, [pc, #380]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80035de:	21e0      	movs	r1, #224	; 0xe0
 80035e0:	01c9      	lsls	r1, r1, #7
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	4a5d      	ldr	r2, [pc, #372]	; (8003760 <HAL_RCC_ClockConfig+0x1fc>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	d057      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360c:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	4013      	ands	r3, r2
 8003616:	d12b      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e097      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d107      	bne.n	8003634 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	049b      	lsls	r3, r3, #18
 800362c:	4013      	ands	r3, r2
 800362e:	d11f      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e08b      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363c:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4013      	ands	r3, r2
 8003646:	d113      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e07f      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d106      	bne.n	8003662 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	2202      	movs	r2, #2
 800365a:	4013      	ands	r3, r2
 800365c:	d108      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e074      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003662:	4b3e      	ldr	r3, [pc, #248]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	2202      	movs	r2, #2
 8003668:	4013      	ands	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e06d      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2207      	movs	r2, #7
 8003676:	4393      	bics	r3, r2
 8003678:	0019      	movs	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7fe fa80 	bl	8001b88 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368c:	e009      	b.n	80036a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7fe fa7b 	bl	8001b88 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <HAL_RCC_ClockConfig+0x1f4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e054      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2238      	movs	r2, #56	; 0x38
 80036a8:	401a      	ands	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1ec      	bne.n	800368e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2207      	movs	r2, #7
 80036ba:	4013      	ands	r3, r2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d21e      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2207      	movs	r2, #7
 80036c8:	4393      	bics	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036d4:	f7fe fa58 	bl	8001b88 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036dc:	e009      	b.n	80036f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036de:	f7fe fa53 	bl	8001b88 <HAL_GetTick>
 80036e2:	0002      	movs	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_RCC_ClockConfig+0x1f4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e02c      	b.n	800374c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2207      	movs	r2, #7
 80036f8:	4013      	ands	r3, r2
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1ee      	bne.n	80036de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2204      	movs	r2, #4
 8003706:	4013      	ands	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4a15      	ldr	r2, [pc, #84]	; (8003764 <HAL_RCC_ClockConfig+0x200>)
 8003710:	4013      	ands	r3, r2
 8003712:	0019      	movs	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800371e:	f000 f829 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003722:	0001      	movs	r1, r0
 8003724:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_RCC_ClockConfig+0x1f8>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	220f      	movs	r2, #15
 800372c:	401a      	ands	r2, r3
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCC_ClockConfig+0x204>)
 8003730:	0092      	lsls	r2, r2, #2
 8003732:	58d3      	ldr	r3, [r2, r3]
 8003734:	221f      	movs	r2, #31
 8003736:	4013      	ands	r3, r2
 8003738:	000a      	movs	r2, r1
 800373a:	40da      	lsrs	r2, r3
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_ClockConfig+0x208>)
 800373e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x20c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0018      	movs	r0, r3
 8003746:	f7fe f9c3 	bl	8001ad0 <HAL_InitTick>
 800374a:	0003      	movs	r3, r0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40022000 	.word	0x40022000
 8003758:	00001388 	.word	0x00001388
 800375c:	40021000 	.word	0x40021000
 8003760:	fffff0ff 	.word	0xfffff0ff
 8003764:	ffff8fff 	.word	0xffff8fff
 8003768:	080049d8 	.word	0x080049d8
 800376c:	20000010 	.word	0x20000010
 8003770:	20000014 	.word	0x20000014

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800377a:	4b3c      	ldr	r3, [pc, #240]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2238      	movs	r2, #56	; 0x38
 8003780:	4013      	ands	r3, r2
 8003782:	d10f      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003784:	4b39      	ldr	r3, [pc, #228]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0adb      	lsrs	r3, r3, #11
 800378a:	2207      	movs	r2, #7
 800378c:	4013      	ands	r3, r2
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	0013      	movs	r3, r2
 8003794:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	4835      	ldr	r0, [pc, #212]	; (8003870 <HAL_RCC_GetSysClockFreq+0xfc>)
 800379a:	f7fc fcb1 	bl	8000100 <__udivsi3>
 800379e:	0003      	movs	r3, r0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	e05d      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a4:	4b31      	ldr	r3, [pc, #196]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2238      	movs	r2, #56	; 0x38
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d102      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037b0:	4b30      	ldr	r3, [pc, #192]	; (8003874 <HAL_RCC_GetSysClockFreq+0x100>)
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	e054      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b6:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2238      	movs	r2, #56	; 0x38
 80037bc:	4013      	ands	r3, r2
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d138      	bne.n	8003834 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2203      	movs	r2, #3
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	2207      	movs	r2, #7
 80037d4:	4013      	ands	r3, r2
 80037d6:	3301      	adds	r3, #1
 80037d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d10d      	bne.n	80037fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4824      	ldr	r0, [pc, #144]	; (8003874 <HAL_RCC_GetSysClockFreq+0x100>)
 80037e4:	f7fc fc8c 	bl	8000100 <__udivsi3>
 80037e8:	0003      	movs	r3, r0
 80037ea:	0019      	movs	r1, r3
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	227f      	movs	r2, #127	; 0x7f
 80037f4:	4013      	ands	r3, r2
 80037f6:	434b      	muls	r3, r1
 80037f8:	617b      	str	r3, [r7, #20]
        break;
 80037fa:	e00d      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	481c      	ldr	r0, [pc, #112]	; (8003870 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003800:	f7fc fc7e 	bl	8000100 <__udivsi3>
 8003804:	0003      	movs	r3, r0
 8003806:	0019      	movs	r1, r3
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	227f      	movs	r2, #127	; 0x7f
 8003810:	4013      	ands	r3, r2
 8003812:	434b      	muls	r3, r1
 8003814:	617b      	str	r3, [r7, #20]
        break;
 8003816:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0f5b      	lsrs	r3, r3, #29
 800381e:	2207      	movs	r2, #7
 8003820:	4013      	ands	r3, r2
 8003822:	3301      	adds	r3, #1
 8003824:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	6978      	ldr	r0, [r7, #20]
 800382a:	f7fc fc69 	bl	8000100 <__udivsi3>
 800382e:	0003      	movs	r3, r0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	e015      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003834:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2238      	movs	r2, #56	; 0x38
 800383a:	4013      	ands	r3, r2
 800383c:	2b20      	cmp	r3, #32
 800383e:	d103      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e00b      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_RCC_GetSysClockFreq+0xf8>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2238      	movs	r2, #56	; 0x38
 800384e:	4013      	ands	r3, r2
 8003850:	2b18      	cmp	r3, #24
 8003852:	d103      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003854:	23fa      	movs	r3, #250	; 0xfa
 8003856:	01db      	lsls	r3, r3, #7
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e001      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003860:	693b      	ldr	r3, [r7, #16]
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b006      	add	sp, #24
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	40021000 	.word	0x40021000
 8003870:	00f42400 	.word	0x00f42400
 8003874:	007a1200 	.word	0x007a1200

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003880:	2313      	movs	r3, #19
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003888:	2312      	movs	r3, #18
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	029b      	lsls	r3, r3, #10
 8003898:	4013      	ands	r3, r2
 800389a:	d100      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800389c:	e0a3      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389e:	2011      	movs	r0, #17
 80038a0:	183b      	adds	r3, r7, r0
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a6:	4b7f      	ldr	r3, [pc, #508]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	055b      	lsls	r3, r3, #21
 80038ae:	4013      	ands	r3, r2
 80038b0:	d110      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b7c      	ldr	r3, [pc, #496]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038b6:	4b7b      	ldr	r3, [pc, #492]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038b8:	2180      	movs	r1, #128	; 0x80
 80038ba:	0549      	lsls	r1, r1, #21
 80038bc:	430a      	orrs	r2, r1
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
 80038c0:	4b78      	ldr	r3, [pc, #480]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	055b      	lsls	r3, r3, #21
 80038c8:	4013      	ands	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d4:	4b74      	ldr	r3, [pc, #464]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b73      	ldr	r3, [pc, #460]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	0049      	lsls	r1, r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038e2:	f7fe f951 	bl	8001b88 <HAL_GetTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ea:	e00b      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ec:	f7fe f94c 	bl	8001b88 <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d904      	bls.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80038fa:	2313      	movs	r3, #19
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	2203      	movs	r2, #3
 8003900:	701a      	strb	r2, [r3, #0]
        break;
 8003902:	e005      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4013      	ands	r3, r2
 800390e:	d0ed      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003910:	2313      	movs	r3, #19
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d154      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800391a:	4b62      	ldr	r3, [pc, #392]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800391c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800391e:	23c0      	movs	r3, #192	; 0xc0
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4013      	ands	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d019      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	429a      	cmp	r2, r3
 8003934:	d014      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003936:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	4a5c      	ldr	r2, [pc, #368]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800393c:	4013      	ands	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003940:	4b58      	ldr	r3, [pc, #352]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003942:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003944:	4b57      	ldr	r3, [pc, #348]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	0249      	lsls	r1, r1, #9
 800394a:	430a      	orrs	r2, r1
 800394c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800394e:	4b55      	ldr	r3, [pc, #340]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003950:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003952:	4b54      	ldr	r3, [pc, #336]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003954:	4956      	ldr	r1, [pc, #344]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003956:	400a      	ands	r2, r1
 8003958:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800395a:	4b52      	ldr	r3, [pc, #328]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2201      	movs	r2, #1
 8003964:	4013      	ands	r3, r2
 8003966:	d016      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe f90e 	bl	8001b88 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003970:	e00c      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fe f909 	bl	8001b88 <HAL_GetTick>
 8003976:	0002      	movs	r2, r0
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	4a4d      	ldr	r2, [pc, #308]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d904      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003982:	2313      	movs	r3, #19
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2203      	movs	r2, #3
 8003988:	701a      	strb	r2, [r3, #0]
            break;
 800398a:	e004      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	2202      	movs	r2, #2
 8003992:	4013      	ands	r3, r2
 8003994:	d0ed      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003996:	2313      	movs	r3, #19
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a0:	4b40      	ldr	r3, [pc, #256]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	4a41      	ldr	r2, [pc, #260]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039b0:	430a      	orrs	r2, r1
 80039b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80039b4:	e00c      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039b6:	2312      	movs	r3, #18
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2213      	movs	r2, #19
 80039bc:	18ba      	adds	r2, r7, r2
 80039be:	7812      	ldrb	r2, [r2, #0]
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e005      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	2312      	movs	r3, #18
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2213      	movs	r2, #19
 80039ca:	18ba      	adds	r2, r7, r2
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d0:	2311      	movs	r3, #17
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039da:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039e0:	4935      	ldr	r1, [pc, #212]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	4013      	ands	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	2203      	movs	r2, #3
 80039f6:	4393      	bics	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	4a2a      	ldr	r2, [pc, #168]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	01db      	lsls	r3, r3, #7
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	0899      	lsrs	r1, r3, #2
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	05db      	lsls	r3, r3, #23
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	0249      	lsls	r1, r1, #9
 8003a56:	430a      	orrs	r2, r1
 8003a58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	4013      	ands	r3, r2
 8003a64:	d016      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a76:	430a      	orrs	r2, r1
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	01db      	lsls	r3, r3, #7
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d106      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a8c:	2180      	movs	r1, #128	; 0x80
 8003a8e:	0249      	lsls	r1, r1, #9
 8003a90:	430a      	orrs	r2, r1
 8003a92:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003a94:	2312      	movs	r3, #18
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	781b      	ldrb	r3, [r3, #0]
}
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b006      	add	sp, #24
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	fffffcff 	.word	0xfffffcff
 8003ab0:	fffeffff 	.word	0xfffeffff
 8003ab4:	00001388 	.word	0x00001388
 8003ab8:	efffffff 	.word	0xefffffff
 8003abc:	ffffcfff 	.word	0xffffcfff
 8003ac0:	ffff3fff 	.word	0xffff3fff

08003ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0a8      	b.n	8003c28 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	2382      	movs	r3, #130	; 0x82
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d009      	beq.n	8003afe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	61da      	str	r2, [r3, #28]
 8003af0:	e005      	b.n	8003afe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	225d      	movs	r2, #93	; 0x5d
 8003b08:	5c9b      	ldrb	r3, [r3, r2]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	225c      	movs	r2, #92	; 0x5c
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7fd fe6e 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	225d      	movs	r2, #93	; 0x5d
 8003b24:	2102      	movs	r1, #2
 8003b26:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2140      	movs	r1, #64	; 0x40
 8003b34:	438a      	bics	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	23e0      	movs	r3, #224	; 0xe0
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d902      	bls.n	8003b4a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e002      	b.n	8003b50 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	015b      	lsls	r3, r3, #5
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	23f0      	movs	r3, #240	; 0xf0
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d008      	beq.n	8003b6e <HAL_SPI_Init+0xaa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	23e0      	movs	r3, #224	; 0xe0
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d002      	beq.n	8003b6e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2382      	movs	r3, #130	; 0x82
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	401a      	ands	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	2384      	movs	r3, #132	; 0x84
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	400b      	ands	r3, r1
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2102      	movs	r1, #2
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2101      	movs	r1, #1
 8003b94:	400b      	ands	r3, r1
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6999      	ldr	r1, [r3, #24]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	2138      	movs	r1, #56	; 0x38
 8003baa:	400b      	ands	r3, r1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	2180      	movs	r1, #128	; 0x80
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	0011      	movs	r1, r2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2110      	movs	r1, #16
 8003bdc:	400b      	ands	r3, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be4:	2108      	movs	r1, #8
 8003be6:	400b      	ands	r3, r1
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68d9      	ldr	r1, [r3, #12]
 8003bee:	23f0      	movs	r3, #240	; 0xf0
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	400b      	ands	r3, r1
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	015b      	lsls	r3, r3, #5
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4907      	ldr	r1, [pc, #28]	; (8003c30 <HAL_SPI_Init+0x16c>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	225d      	movs	r2, #93	; 0x5d
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b004      	add	sp, #16
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	fffff7ff 	.word	0xfffff7ff

08003c34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	1dbb      	adds	r3, r7, #6
 8003c42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c44:	231f      	movs	r3, #31
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	225c      	movs	r2, #92	; 0x5c
 8003c50:	5c9b      	ldrb	r3, [r3, r2]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_SPI_Transmit+0x26>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e140      	b.n	8003edc <HAL_SPI_Transmit+0x2a8>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	225c      	movs	r2, #92	; 0x5c
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c62:	f7fd ff91 	bl	8001b88 <HAL_GetTick>
 8003c66:	0003      	movs	r3, r0
 8003c68:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c6a:	2316      	movs	r3, #22
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	1dba      	adds	r2, r7, #6
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	225d      	movs	r2, #93	; 0x5d
 8003c78:	5c9b      	ldrb	r3, [r3, r2]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d004      	beq.n	8003c8a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003c80:	231f      	movs	r3, #31
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c88:	e11d      	b.n	8003ec6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_SPI_Transmit+0x64>
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003c98:	231f      	movs	r3, #31
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ca0:	e111      	b.n	8003ec6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	225d      	movs	r2, #93	; 0x5d
 8003ca6:	2103      	movs	r1, #3
 8003ca8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1dba      	adds	r2, r7, #6
 8003cba:	8812      	ldrh	r2, [r2, #0]
 8003cbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1dba      	adds	r2, r7, #6
 8003cc2:	8812      	ldrh	r2, [r2, #0]
 8003cc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2244      	movs	r2, #68	; 0x44
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2246      	movs	r2, #70	; 0x46
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d110      	bne.n	8003d16 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	438a      	bics	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	01c9      	lsls	r1, r1, #7
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d007      	beq.n	8003d34 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	23e0      	movs	r3, #224	; 0xe0
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d94e      	bls.n	8003dde <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <HAL_SPI_Transmit+0x11e>
 8003d48:	2316      	movs	r3, #22
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d13f      	bne.n	8003dd2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d76:	e02c      	b.n	8003dd2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d112      	bne.n	8003dac <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	881a      	ldrh	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	1c9a      	adds	r2, r3, #2
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003daa:	e012      	b.n	8003dd2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dac:	f7fd feec 	bl	8001b88 <HAL_GetTick>
 8003db0:	0002      	movs	r2, r0
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d802      	bhi.n	8003dc2 <HAL_SPI_Transmit+0x18e>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	d102      	bne.n	8003dc8 <HAL_SPI_Transmit+0x194>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003dc8:	231f      	movs	r3, #31
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	2203      	movs	r2, #3
 8003dce:	701a      	strb	r2, [r3, #0]
          goto error;
 8003dd0:	e079      	b.n	8003ec6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1cd      	bne.n	8003d78 <HAL_SPI_Transmit+0x144>
 8003ddc:	e04f      	b.n	8003e7e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_SPI_Transmit+0x1bc>
 8003de6:	2316      	movs	r3, #22
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d141      	bne.n	8003e74 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	7812      	ldrb	r2, [r2, #0]
 8003dfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003e16:	e02d      	b.n	8003e74 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d113      	bne.n	8003e4e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e4c:	e012      	b.n	8003e74 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4e:	f7fd fe9b 	bl	8001b88 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d802      	bhi.n	8003e64 <HAL_SPI_Transmit+0x230>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	d102      	bne.n	8003e6a <HAL_SPI_Transmit+0x236>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d104      	bne.n	8003e74 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003e6a:	231f      	movs	r3, #31
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	2203      	movs	r2, #3
 8003e70:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e72:	e028      	b.n	8003ec6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1cc      	bne.n	8003e18 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f000 f95d 	bl	8004144 <SPI_EndRxTxTransaction>
 8003e8a:	1e03      	subs	r3, r0, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003eba:	231f      	movs	r3, #31
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e000      	b.n	8003ec6 <HAL_SPI_Transmit+0x292>
  }

error:
 8003ec4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	225d      	movs	r2, #93	; 0x5d
 8003eca:	2101      	movs	r1, #1
 8003ecc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	225c      	movs	r2, #92	; 0x5c
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ed6:	231f      	movs	r3, #31
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	781b      	ldrb	r3, [r3, #0]
}
 8003edc:	0018      	movs	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b008      	add	sp, #32
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	1dfb      	adds	r3, r7, #7
 8003ef2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ef4:	f7fd fe48 	bl	8001b88 <HAL_GetTick>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f04:	f7fd fe40 	bl	8001b88 <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	015b      	lsls	r3, r3, #5
 8003f12:	0d1b      	lsrs	r3, r3, #20
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	4353      	muls	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1a:	e058      	b.n	8003fce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	d055      	beq.n	8003fce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f22:	f7fd fe31 	bl	8001b88 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d902      	bls.n	8003f38 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d142      	bne.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	21e0      	movs	r1, #224	; 0xe0
 8003f44:	438a      	bics	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	2382      	movs	r3, #130	; 0x82
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d113      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d005      	beq.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d107      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2140      	movs	r1, #64	; 0x40
 8003f78:	438a      	bics	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	019b      	lsls	r3, r3, #6
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d110      	bne.n	8003faa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	491a      	ldr	r1, [pc, #104]	; (8003ffc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	0189      	lsls	r1, r1, #6
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	225d      	movs	r2, #93	; 0x5d
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	225c      	movs	r2, #92	; 0x5c
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e017      	b.n	8003fee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	425a      	negs	r2, r3
 8003fde:	4153      	adcs	r3, r2
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	001a      	movs	r2, r3
 8003fe4:	1dfb      	adds	r3, r7, #7
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d197      	bne.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	0018      	movs	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b008      	add	sp, #32
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	20000010 	.word	0x20000010
 8003ffc:	ffffdfff 	.word	0xffffdfff

08004000 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800400e:	2317      	movs	r3, #23
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004016:	f7fd fdb7 	bl	8001b88 <HAL_GetTick>
 800401a:	0002      	movs	r2, r0
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	18d3      	adds	r3, r2, r3
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004026:	f7fd fdaf 	bl	8001b88 <HAL_GetTick>
 800402a:	0003      	movs	r3, r0
 800402c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004036:	4b41      	ldr	r3, [pc, #260]	; (800413c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	0013      	movs	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	189b      	adds	r3, r3, r2
 8004040:	00da      	lsls	r2, r3, #3
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	0d1b      	lsrs	r3, r3, #20
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	4353      	muls	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800404c:	e068      	b.n	8004120 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	23c0      	movs	r3, #192	; 0xc0
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	429a      	cmp	r2, r3
 8004056:	d10a      	bne.n	800406e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	2117      	movs	r1, #23
 8004066:	187b      	adds	r3, r7, r1
 8004068:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800406a:	187b      	adds	r3, r7, r1
 800406c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	d055      	beq.n	8004120 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004074:	f7fd fd88 	bl	8001b88 <HAL_GetTick>
 8004078:	0002      	movs	r2, r0
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	429a      	cmp	r2, r3
 8004082:	d902      	bls.n	800408a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d142      	bne.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	21e0      	movs	r1, #224	; 0xe0
 8004096:	438a      	bics	r2, r1
 8004098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	2382      	movs	r3, #130	; 0x82
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d113      	bne.n	80040ce <SPI_WaitFifoStateUntilTimeout+0xce>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d005      	beq.n	80040be <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d107      	bne.n	80040ce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2140      	movs	r1, #64	; 0x40
 80040ca:	438a      	bics	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	019b      	lsls	r3, r3, #6
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d110      	bne.n	80040fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4916      	ldr	r1, [pc, #88]	; (8004140 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	0189      	lsls	r1, r1, #6
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	225d      	movs	r2, #93	; 0x5d
 8004100:	2101      	movs	r1, #1
 8004102:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	225c      	movs	r2, #92	; 0x5c
 8004108:	2100      	movs	r1, #0
 800410a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e010      	b.n	8004132 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	3b01      	subs	r3, #1
 800411e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d18e      	bne.n	800404e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b00a      	add	sp, #40	; 0x28
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	20000010 	.word	0x20000010
 8004140:	ffffdfff 	.word	0xffffdfff

08004144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	23c0      	movs	r3, #192	; 0xc0
 8004154:	0159      	lsls	r1, r3, #5
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	0013      	movs	r3, r2
 800415e:	2200      	movs	r2, #0
 8004160:	f7ff ff4e 	bl	8004000 <SPI_WaitFifoStateUntilTimeout>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d007      	beq.n	8004178 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416c:	2220      	movs	r2, #32
 800416e:	431a      	orrs	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e027      	b.n	80041c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	0013      	movs	r3, r2
 8004182:	2200      	movs	r2, #0
 8004184:	2180      	movs	r1, #128	; 0x80
 8004186:	f7ff fead 	bl	8003ee4 <SPI_WaitFlagStateUntilTimeout>
 800418a:	1e03      	subs	r3, r0, #0
 800418c:	d007      	beq.n	800419e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004192:	2220      	movs	r2, #32
 8004194:	431a      	orrs	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e014      	b.n	80041c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	23c0      	movs	r3, #192	; 0xc0
 80041a2:	00d9      	lsls	r1, r3, #3
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	0013      	movs	r3, r2
 80041ac:	2200      	movs	r2, #0
 80041ae:	f7ff ff27 	bl	8004000 <SPI_WaitFifoStateUntilTimeout>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d007      	beq.n	80041c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ba:	2220      	movs	r2, #32
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e000      	b.n	80041c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e04a      	b.n	8004278 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	223d      	movs	r2, #61	; 0x3d
 80041e6:	5c9b      	ldrb	r3, [r3, r2]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	223c      	movs	r2, #60	; 0x3c
 80041f2:	2100      	movs	r1, #0
 80041f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7fd fbe3 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	223d      	movs	r2, #61	; 0x3d
 8004202:	2102      	movs	r1, #2
 8004204:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	0019      	movs	r1, r3
 8004210:	0010      	movs	r0, r2
 8004212:	f000 f97f 	bl	8004514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2248      	movs	r2, #72	; 0x48
 800421a:	2101      	movs	r1, #1
 800421c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	223e      	movs	r2, #62	; 0x3e
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	223f      	movs	r2, #63	; 0x3f
 800422a:	2101      	movs	r1, #1
 800422c:	5499      	strb	r1, [r3, r2]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2240      	movs	r2, #64	; 0x40
 8004232:	2101      	movs	r1, #1
 8004234:	5499      	strb	r1, [r3, r2]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2241      	movs	r2, #65	; 0x41
 800423a:	2101      	movs	r1, #1
 800423c:	5499      	strb	r1, [r3, r2]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2242      	movs	r2, #66	; 0x42
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2243      	movs	r2, #67	; 0x43
 800424a:	2101      	movs	r1, #1
 800424c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2244      	movs	r2, #68	; 0x44
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2245      	movs	r2, #69	; 0x45
 800425a:	2101      	movs	r1, #1
 800425c:	5499      	strb	r1, [r3, r2]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2246      	movs	r2, #70	; 0x46
 8004262:	2101      	movs	r1, #1
 8004264:	5499      	strb	r1, [r3, r2]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2247      	movs	r2, #71	; 0x47
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	223d      	movs	r2, #61	; 0x3d
 8004272:	2101      	movs	r1, #1
 8004274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	223d      	movs	r2, #61	; 0x3d
 800428c:	5c9b      	ldrb	r3, [r3, r2]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d001      	beq.n	8004298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e02f      	b.n	80042f8 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	223d      	movs	r2, #61	; 0x3d
 800429c:	2102      	movs	r1, #2
 800429e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_TIM_Base_Start+0x80>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_TIM_Base_Start+0x34>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <HAL_TIM_Base_Start+0x84>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d116      	bne.n	80042e2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4a13      	ldr	r2, [pc, #76]	; (8004308 <HAL_TIM_Base_Start+0x88>)
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d016      	beq.n	80042f4 <HAL_TIM_Base_Start+0x74>
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	025b      	lsls	r3, r3, #9
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d011      	beq.n	80042f4 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2101      	movs	r1, #1
 80042dc:	430a      	orrs	r2, r1
 80042de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	e008      	b.n	80042f4 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2101      	movs	r1, #1
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e000      	b.n	80042f6 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b004      	add	sp, #16
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40000400 	.word	0x40000400
 8004308:	00010007 	.word	0x00010007

0800430c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e04a      	b.n	80043b4 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	223d      	movs	r2, #61	; 0x3d
 8004322:	5c9b      	ldrb	r3, [r3, r2]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	223c      	movs	r2, #60	; 0x3c
 800432e:	2100      	movs	r1, #0
 8004330:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	0018      	movs	r0, r3
 8004336:	f000 f841 	bl	80043bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223d      	movs	r2, #61	; 0x3d
 800433e:	2102      	movs	r1, #2
 8004340:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	0019      	movs	r1, r3
 800434c:	0010      	movs	r0, r2
 800434e:	f000 f8e1 	bl	8004514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2248      	movs	r2, #72	; 0x48
 8004356:	2101      	movs	r1, #1
 8004358:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	223e      	movs	r2, #62	; 0x3e
 800435e:	2101      	movs	r1, #1
 8004360:	5499      	strb	r1, [r3, r2]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	223f      	movs	r2, #63	; 0x3f
 8004366:	2101      	movs	r1, #1
 8004368:	5499      	strb	r1, [r3, r2]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2240      	movs	r2, #64	; 0x40
 800436e:	2101      	movs	r1, #1
 8004370:	5499      	strb	r1, [r3, r2]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2241      	movs	r2, #65	; 0x41
 8004376:	2101      	movs	r1, #1
 8004378:	5499      	strb	r1, [r3, r2]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2242      	movs	r2, #66	; 0x42
 800437e:	2101      	movs	r1, #1
 8004380:	5499      	strb	r1, [r3, r2]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2243      	movs	r2, #67	; 0x43
 8004386:	2101      	movs	r1, #1
 8004388:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2244      	movs	r2, #68	; 0x44
 800438e:	2101      	movs	r1, #1
 8004390:	5499      	strb	r1, [r3, r2]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2245      	movs	r2, #69	; 0x45
 8004396:	2101      	movs	r1, #1
 8004398:	5499      	strb	r1, [r3, r2]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2246      	movs	r2, #70	; 0x46
 800439e:	2101      	movs	r1, #1
 80043a0:	5499      	strb	r1, [r3, r2]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2247      	movs	r2, #71	; 0x47
 80043a6:	2101      	movs	r1, #1
 80043a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	223d      	movs	r2, #61	; 0x3d
 80043ae:	2101      	movs	r1, #1
 80043b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b002      	add	sp, #8
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2317      	movs	r3, #23
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	223c      	movs	r2, #60	; 0x3c
 80043e4:	5c9b      	ldrb	r3, [r3, r2]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_IC_ConfigChannel+0x22>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e08c      	b.n	8004508 <HAL_TIM_IC_ConfigChannel+0x13c>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	223c      	movs	r2, #60	; 0x3c
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11b      	bne.n	8004434 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f000 f8ee 	bl	80045ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	210c      	movs	r1, #12
 800441c:	438a      	bics	r2, r1
 800441e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6999      	ldr	r1, [r3, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	619a      	str	r2, [r3, #24]
 8004432:	e062      	b.n	80044fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d11c      	bne.n	8004474 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6819      	ldr	r1, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f000 f921 	bl	8004690 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	492d      	ldr	r1, [pc, #180]	; (8004510 <HAL_TIM_IC_ConfigChannel+0x144>)
 800445a:	400a      	ands	r2, r1
 800445c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6999      	ldr	r1, [r3, #24]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	021a      	lsls	r2, r3, #8
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	619a      	str	r2, [r3, #24]
 8004472:	e042      	b.n	80044fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b08      	cmp	r3, #8
 8004478:	d11b      	bne.n	80044b2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f000 f943 	bl	8004714 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	210c      	movs	r1, #12
 800449a:	438a      	bics	r2, r1
 800449c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	61da      	str	r2, [r3, #28]
 80044b0:	e023      	b.n	80044fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	d11c      	bne.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f000 f964 	bl	8004794 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	490e      	ldr	r1, [pc, #56]	; (8004510 <HAL_TIM_IC_ConfigChannel+0x144>)
 80044d8:	400a      	ands	r2, r1
 80044da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69d9      	ldr	r1, [r3, #28]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	021a      	lsls	r2, r3, #8
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	61da      	str	r2, [r3, #28]
 80044f0:	e003      	b.n	80044fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80044f2:	2317      	movs	r3, #23
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	223c      	movs	r2, #60	; 0x3c
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

  return status;
 8004502:	2317      	movs	r3, #23
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	781b      	ldrb	r3, [r3, #0]
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b006      	add	sp, #24
 800450e:	bd80      	pop	{r7, pc}
 8004510:	fffff3ff 	.word	0xfffff3ff

08004514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a2b      	ldr	r2, [pc, #172]	; (80045d4 <TIM_Base_SetConfig+0xc0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_Base_SetConfig+0x20>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a2a      	ldr	r2, [pc, #168]	; (80045d8 <TIM_Base_SetConfig+0xc4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d108      	bne.n	8004546 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2270      	movs	r2, #112	; 0x70
 8004538:	4393      	bics	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <TIM_Base_SetConfig+0xc0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00f      	beq.n	800456e <TIM_Base_SetConfig+0x5a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <TIM_Base_SetConfig+0xc4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_Base_SetConfig+0x5a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a20      	ldr	r2, [pc, #128]	; (80045dc <TIM_Base_SetConfig+0xc8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_Base_SetConfig+0x5a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <TIM_Base_SetConfig+0xcc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_Base_SetConfig+0x5a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <TIM_Base_SetConfig+0xd0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <TIM_Base_SetConfig+0xd4>)
 8004572:	4013      	ands	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	4393      	bics	r3, r2
 8004586:	001a      	movs	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <TIM_Base_SetConfig+0xc0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <TIM_Base_SetConfig+0xaa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <TIM_Base_SetConfig+0xcc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_Base_SetConfig+0xaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <TIM_Base_SetConfig+0xd0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d103      	bne.n	80045c6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	615a      	str	r2, [r3, #20]
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b004      	add	sp, #16
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40002000 	.word	0x40002000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800
 80045e8:	fffffcff 	.word	0xfffffcff

080045ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	2201      	movs	r2, #1
 8004600:	4393      	bics	r3, r2
 8004602:	001a      	movs	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <TIM_TI1_SetConfig+0x9c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_TI1_SetConfig+0x38>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a1b      	ldr	r2, [pc, #108]	; (800468c <TIM_TI1_SetConfig+0xa0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <TIM_TI1_SetConfig+0x3c>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <TIM_TI1_SetConfig+0x3e>
 8004628:	2300      	movs	r3, #0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2203      	movs	r2, #3
 8004632:	4393      	bics	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e003      	b.n	8004648 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2201      	movs	r2, #1
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	22f0      	movs	r2, #240	; 0xf0
 800464c:	4393      	bics	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	22ff      	movs	r2, #255	; 0xff
 8004656:	4013      	ands	r3, r2
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	220a      	movs	r2, #10
 8004662:	4393      	bics	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	220a      	movs	r2, #10
 800466a:	4013      	ands	r3, r2
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40000400 	.word	0x40000400

08004690 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	2210      	movs	r2, #16
 80046a4:	4393      	bics	r3, r2
 80046a6:	001a      	movs	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4a14      	ldr	r2, [pc, #80]	; (800470c <TIM_TI2_SetConfig+0x7c>)
 80046bc:	4013      	ands	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4a10      	ldr	r2, [pc, #64]	; (8004710 <TIM_TI2_SetConfig+0x80>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	031b      	lsls	r3, r3, #12
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	22a0      	movs	r2, #160	; 0xa0
 80046e4:	4393      	bics	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	22a0      	movs	r2, #160	; 0xa0
 80046ee:	4013      	ands	r3, r2
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	621a      	str	r2, [r3, #32]
}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	b006      	add	sp, #24
 8004708:	bd80      	pop	{r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	fffffcff 	.word	0xfffffcff
 8004710:	ffff0fff 	.word	0xffff0fff

08004714 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	4a19      	ldr	r2, [pc, #100]	; (800478c <TIM_TI3_SetConfig+0x78>)
 8004728:	401a      	ands	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2203      	movs	r2, #3
 800473e:	4393      	bics	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	22f0      	movs	r2, #240	; 0xf0
 800474e:	4393      	bics	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	22ff      	movs	r2, #255	; 0xff
 8004758:	4013      	ands	r3, r2
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <TIM_TI3_SetConfig+0x7c>)
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	021a      	lsls	r2, r3, #8
 800476c:	23a0      	movs	r3, #160	; 0xa0
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	4013      	ands	r3, r2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	621a      	str	r2, [r3, #32]
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	46bd      	mov	sp, r7
 8004788:	b006      	add	sp, #24
 800478a:	bd80      	pop	{r7, pc}
 800478c:	fffffeff 	.word	0xfffffeff
 8004790:	fffff5ff 	.word	0xfffff5ff

08004794 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <TIM_TI4_SetConfig+0x7c>)
 80047a8:	401a      	ands	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	4a15      	ldr	r2, [pc, #84]	; (8004814 <TIM_TI4_SetConfig+0x80>)
 80047be:	4013      	ands	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <TIM_TI4_SetConfig+0x84>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	031b      	lsls	r3, r3, #12
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <TIM_TI4_SetConfig+0x88>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	031a      	lsls	r2, r3, #12
 80047ee:	23a0      	movs	r3, #160	; 0xa0
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	4013      	ands	r3, r2
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	46bd      	mov	sp, r7
 800480a:	b006      	add	sp, #24
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	ffffefff 	.word	0xffffefff
 8004814:	fffffcff 	.word	0xfffffcff
 8004818:	ffff0fff 	.word	0xffff0fff
 800481c:	ffff5fff 	.word	0xffff5fff

08004820 <HAL_TIMEx_TISelection>:
  *  (**) Value not defined in all devices. \n
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800482c:	2317      	movs	r3, #23
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	223c      	movs	r2, #60	; 0x3c
 8004838:	5c9b      	ldrb	r3, [r3, r2]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_TIMEx_TISelection+0x22>
 800483e:	2302      	movs	r3, #2
 8004840:	e040      	b.n	80048c4 <HAL_TIMEx_TISelection+0xa4>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	223c      	movs	r2, #60	; 0x3c
 8004846:	2101      	movs	r1, #1
 8004848:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d021      	beq.n	8004894 <HAL_TIMEx_TISelection+0x74>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d82a      	bhi.n	80048ac <HAL_TIMEx_TISelection+0x8c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_TIMEx_TISelection+0x44>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b04      	cmp	r3, #4
 8004860:	d00c      	beq.n	800487c <HAL_TIMEx_TISelection+0x5c>
 8004862:	e023      	b.n	80048ac <HAL_TIMEx_TISelection+0x8c>
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	220f      	movs	r2, #15
 800486c:	4393      	bics	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	430a      	orrs	r2, r1
 8004878:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800487a:	e01c      	b.n	80048b6 <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <HAL_TIMEx_TISelection+0xac>)
 8004884:	4013      	ands	r3, r2
 8004886:	0019      	movs	r1, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	430a      	orrs	r2, r1
 8004890:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8004892:	e010      	b.n	80048b6 <HAL_TIMEx_TISelection+0x96>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800489a:	4a0d      	ldr	r2, [pc, #52]	; (80048d0 <HAL_TIMEx_TISelection+0xb0>)
 800489c:	4013      	ands	r3, r2
 800489e:	0019      	movs	r1, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80048aa:	e004      	b.n	80048b6 <HAL_TIMEx_TISelection+0x96>
    default:
      status = HAL_ERROR;
 80048ac:	2317      	movs	r3, #23
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
      break;
 80048b4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	223c      	movs	r2, #60	; 0x3c
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]

  return status;
 80048be:	2317      	movs	r3, #23
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	781b      	ldrb	r3, [r3, #0]
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b006      	add	sp, #24
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	fffff0ff 	.word	0xfffff0ff
 80048d0:	fff0ffff 	.word	0xfff0ffff

080048d4 <__libc_init_array>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	2600      	movs	r6, #0
 80048d8:	4d0c      	ldr	r5, [pc, #48]	; (800490c <__libc_init_array+0x38>)
 80048da:	4c0d      	ldr	r4, [pc, #52]	; (8004910 <__libc_init_array+0x3c>)
 80048dc:	1b64      	subs	r4, r4, r5
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	42a6      	cmp	r6, r4
 80048e2:	d109      	bne.n	80048f8 <__libc_init_array+0x24>
 80048e4:	2600      	movs	r6, #0
 80048e6:	f000 f82b 	bl	8004940 <_init>
 80048ea:	4d0a      	ldr	r5, [pc, #40]	; (8004914 <__libc_init_array+0x40>)
 80048ec:	4c0a      	ldr	r4, [pc, #40]	; (8004918 <__libc_init_array+0x44>)
 80048ee:	1b64      	subs	r4, r4, r5
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	42a6      	cmp	r6, r4
 80048f4:	d105      	bne.n	8004902 <__libc_init_array+0x2e>
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	00b3      	lsls	r3, r6, #2
 80048fa:	58eb      	ldr	r3, [r5, r3]
 80048fc:	4798      	blx	r3
 80048fe:	3601      	adds	r6, #1
 8004900:	e7ee      	b.n	80048e0 <__libc_init_array+0xc>
 8004902:	00b3      	lsls	r3, r6, #2
 8004904:	58eb      	ldr	r3, [r5, r3]
 8004906:	4798      	blx	r3
 8004908:	3601      	adds	r6, #1
 800490a:	e7f2      	b.n	80048f2 <__libc_init_array+0x1e>
 800490c:	08004a18 	.word	0x08004a18
 8004910:	08004a18 	.word	0x08004a18
 8004914:	08004a18 	.word	0x08004a18
 8004918:	08004a1c 	.word	0x08004a1c

0800491c <memcpy>:
 800491c:	2300      	movs	r3, #0
 800491e:	b510      	push	{r4, lr}
 8004920:	429a      	cmp	r2, r3
 8004922:	d100      	bne.n	8004926 <memcpy+0xa>
 8004924:	bd10      	pop	{r4, pc}
 8004926:	5ccc      	ldrb	r4, [r1, r3]
 8004928:	54c4      	strb	r4, [r0, r3]
 800492a:	3301      	adds	r3, #1
 800492c:	e7f8      	b.n	8004920 <memcpy+0x4>

0800492e <memset>:
 800492e:	0003      	movs	r3, r0
 8004930:	1882      	adds	r2, r0, r2
 8004932:	4293      	cmp	r3, r2
 8004934:	d100      	bne.n	8004938 <memset+0xa>
 8004936:	4770      	bx	lr
 8004938:	7019      	strb	r1, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	e7f9      	b.n	8004932 <memset+0x4>
	...

08004940 <_init>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr

0800494c <_fini>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004952:	bc08      	pop	{r3}
 8004954:	469e      	mov	lr, r3
 8004956:	4770      	bx	lr
